{
  "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_taskAcceptor",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_mintReward",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_matchmakingBps",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_genesisMint",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AcceptedTaskIdsNotSorted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApprovalCallerNotOwnerNorApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApprovalQueryForNonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BalanceQueryForZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CannotSelfBreed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidQueryRange",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintERC2309QuantityExceedsLimit",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintZeroQuantity",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "TokenId",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "NoSuchToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotListed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotTaskAcceptor",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotTaskHub",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OwnerQueryForNonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OwnershipNotInitializedForExtraData",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PaymentRequired",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SubmisionTaskIdsNotSorted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferCallerNotOwnerNorApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferFromIncorrectOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferToNonERC721ReceiverImplementer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "URIQueryForNonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnknownQuantifier",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fromTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "toTokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "ConsecutiveTransfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "TokenId",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Delisted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "TokenId",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Incubated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "TokenId",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "Listed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "matchmakingBps",
          "type": "uint256"
        }
      ],
      "name": "MatchmakingFeeChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "mintReward",
          "type": "uint256"
        }
      ],
      "name": "MintRewardChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "TokenId",
          "name": "left",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "TokenId",
          "name": "right",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "TokenId",
          "name": "child",
          "type": "uint256"
        }
      ],
      "name": "Spawned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "TaskAcceptorChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "TaskHubChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_taskIds",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "_proof",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_report",
          "type": "bytes"
        }
      ],
      "name": "acceptTaskResults",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum ITaskAcceptorV1.Quantifier",
              "name": "quantifier",
              "type": "uint8"
            },
            {
              "internalType": "uint256[]",
              "name": "taskIds",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct ITaskAcceptorV1.TaskIdSelector",
          "name": "sel",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "TokenId",
          "name": "_left",
          "type": "uint256"
        },
        {
          "internalType": "TokenId",
          "name": "_right",
          "type": "uint256"
        }
      ],
      "name": "breed",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "TokenId",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "delist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "earnings",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "explicitOwnershipOf",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "startTimestamp",
              "type": "uint64"
            },
            {
              "internalType": "bool",
              "name": "burned",
              "type": "bool"
            },
            {
              "internalType": "uint24",
              "name": "extraData",
              "type": "uint24"
            }
          ],
          "internalType": "struct IERC721A.TokenOwnership",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "explicitOwnershipsOf",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "startTimestamp",
              "type": "uint64"
            },
            {
              "internalType": "bool",
              "name": "burned",
              "type": "bool"
            },
            {
              "internalType": "uint24",
              "name": "extraData",
              "type": "uint24"
            }
          ],
          "internalType": "struct IERC721A.TokenOwnership[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "breeder",
          "type": "address"
        },
        {
          "internalType": "TokenId",
          "name": "_left",
          "type": "uint256"
        },
        {
          "internalType": "TokenId",
          "name": "_right",
          "type": "uint256"
        }
      ],
      "name": "getBreedingFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_offset",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_count",
          "type": "uint256"
        }
      ],
      "name": "getStuds",
      "outputs": [
        {
          "components": [
            {
              "internalType": "TokenId",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fee",
              "type": "uint256"
            }
          ],
          "internalType": "struct NFTrout.Stud[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "TokenId",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "list",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "matchmakingBps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "TokenId",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "parents",
      "outputs": [
        {
          "internalType": "TokenId",
          "name": "left",
          "type": "uint256"
        },
        {
          "internalType": "TokenId",
          "name": "right",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_matchBps",
          "type": "uint256"
        }
      ],
      "name": "setMatchmakingFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mintReward",
          "type": "uint256"
        }
      ],
      "name": "setMintReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newTaskAcceptor",
          "type": "address"
        }
      ],
      "name": "setTaskAcceptor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newTaskHub",
          "type": "address"
        }
      ],
      "name": "setTaskHub",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "taskAcceptor",
      "outputs": [
        {
          "internalType": "contract ITaskAcceptorV1",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "taskHub",
      "outputs": [
        {
          "internalType": "contract ITaskHubV1",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "tokensOfOwner",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stop",
          "type": "uint256"
        }
      ],
      "name": "tokensOfOwnerIn",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
  "receipt": {
    "to": null,
    "from": "0x013e84e68AF747DE29F224747011a9c7f8828f08",
    "contractAddress": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
    "transactionIndex": 0,
    "gasUsed": "3959391",
    "logsBloom": "0x2e200099300210020059005408a4ac8000068a002032000102900400042000223092000140004a022a80200224bf1424002131100605d1a0a2204016122e008004127900002004c884c800080a000003194b0240000482198048a2141082101069800a484688c0a0000000018090083c60044908600006a6100000110640884084a0020c4c50080001010010058a441218001be0040e4430000002c5220200a0042401200903100060108182430424700810000946a48060a020101c842f4000d03c10028000009044000813080001040864e000a240640824010d2a401c603ab0005222a15004880a001210002082001a002080b08014168b1964a1428824c0",
    "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42",
    "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000013e84e68af747de29f224747011a9c7f8828f08"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xa1aa4d60fb784cbf55501f9d7ee58929d85455763666d5aeebe93ae500c6cd35"
        ],
        "data": "0x000000000000000000000000ada897c101918d24d2c424007dde5ae937dcc02f",
        "logIndex": 1,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0x5041ed14511e2a28b160ee5bf9eeb9b93e4759285a91383d3b7500179a648091"
        ],
        "data": "0x000000000000000000000000e7326b4ae16a8aee3698992ebf43a476ad199bd8",
        "logIndex": 2,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a885b1f77e4185f98b4d4dbe752b212b18b5d551",
          "0x0000000000000000000000000000000000000000000000000000000000000001"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a885b1f77e4185f98b4d4dbe752b212b18b5d551",
          "0x0000000000000000000000000000000000000000000000000000000000000002"
        ],
        "data": "0x",
        "logIndex": 4,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a885b1f77e4185f98b4d4dbe752b212b18b5d551",
          "0x0000000000000000000000000000000000000000000000000000000000000003"
        ],
        "data": "0x",
        "logIndex": 5,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a885b1f77e4185f98b4d4dbe752b212b18b5d551",
          "0x0000000000000000000000000000000000000000000000000000000000000004"
        ],
        "data": "0x",
        "logIndex": 6,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a885b1f77e4185f98b4d4dbe752b212b18b5d551",
          "0x0000000000000000000000000000000000000000000000000000000000000005"
        ],
        "data": "0x",
        "logIndex": 7,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a885b1f77e4185f98b4d4dbe752b212b18b5d551",
          "0x0000000000000000000000000000000000000000000000000000000000000006"
        ],
        "data": "0x",
        "logIndex": 8,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a885b1f77e4185f98b4d4dbe752b212b18b5d551",
          "0x0000000000000000000000000000000000000000000000000000000000000007"
        ],
        "data": "0x",
        "logIndex": 9,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a885b1f77e4185f98b4d4dbe752b212b18b5d551",
          "0x0000000000000000000000000000000000000000000000000000000000000008"
        ],
        "data": "0x",
        "logIndex": 10,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a885b1f77e4185f98b4d4dbe752b212b18b5d551",
          "0x0000000000000000000000000000000000000000000000000000000000000009"
        ],
        "data": "0x",
        "logIndex": 11,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a885b1f77e4185f98b4d4dbe752b212b18b5d551",
          "0x000000000000000000000000000000000000000000000000000000000000000a"
        ],
        "data": "0x",
        "logIndex": 12,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a885b1f77e4185f98b4d4dbe752b212b18b5d551",
          "0x000000000000000000000000000000000000000000000000000000000000000b"
        ],
        "data": "0x",
        "logIndex": 13,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a885b1f77e4185f98b4d4dbe752b212b18b5d551",
          "0x000000000000000000000000000000000000000000000000000000000000000c"
        ],
        "data": "0x",
        "logIndex": 14,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a885b1f77e4185f98b4d4dbe752b212b18b5d551",
          "0x000000000000000000000000000000000000000000000000000000000000000d"
        ],
        "data": "0x",
        "logIndex": 15,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a885b1f77e4185f98b4d4dbe752b212b18b5d551",
          "0x000000000000000000000000000000000000000000000000000000000000000e"
        ],
        "data": "0x",
        "logIndex": 16,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a885b1f77e4185f98b4d4dbe752b212b18b5d551",
          "0x000000000000000000000000000000000000000000000000000000000000000f"
        ],
        "data": "0x",
        "logIndex": 17,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a885b1f77e4185f98b4d4dbe752b212b18b5d551",
          "0x0000000000000000000000000000000000000000000000000000000000000010"
        ],
        "data": "0x",
        "logIndex": 18,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a885b1f77e4185f98b4d4dbe752b212b18b5d551",
          "0x0000000000000000000000000000000000000000000000000000000000000011"
        ],
        "data": "0x",
        "logIndex": 19,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a885b1f77e4185f98b4d4dbe752b212b18b5d551",
          "0x0000000000000000000000000000000000000000000000000000000000000012"
        ],
        "data": "0x",
        "logIndex": 20,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a885b1f77e4185f98b4d4dbe752b212b18b5d551",
          "0x0000000000000000000000000000000000000000000000000000000000000013"
        ],
        "data": "0x",
        "logIndex": 21,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a885b1f77e4185f98b4d4dbe752b212b18b5d551",
          "0x0000000000000000000000000000000000000000000000000000000000000014"
        ],
        "data": "0x",
        "logIndex": 22,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a885b1f77e4185f98b4d4dbe752b212b18b5d551",
          "0x0000000000000000000000000000000000000000000000000000000000000015"
        ],
        "data": "0x",
        "logIndex": 23,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a885b1f77e4185f98b4d4dbe752b212b18b5d551",
          "0x0000000000000000000000000000000000000000000000000000000000000016"
        ],
        "data": "0x",
        "logIndex": 24,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a885b1f77e4185f98b4d4dbe752b212b18b5d551",
          "0x0000000000000000000000000000000000000000000000000000000000000017"
        ],
        "data": "0x",
        "logIndex": 25,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a885b1f77e4185f98b4d4dbe752b212b18b5d551",
          "0x0000000000000000000000000000000000000000000000000000000000000018"
        ],
        "data": "0x",
        "logIndex": 26,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a885b1f77e4185f98b4d4dbe752b212b18b5d551",
          "0x0000000000000000000000000000000000000000000000000000000000000019"
        ],
        "data": "0x",
        "logIndex": 27,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a885b1f77e4185f98b4d4dbe752b212b18b5d551",
          "0x000000000000000000000000000000000000000000000000000000000000001a"
        ],
        "data": "0x",
        "logIndex": 28,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a885b1f77e4185f98b4d4dbe752b212b18b5d551",
          "0x000000000000000000000000000000000000000000000000000000000000001b"
        ],
        "data": "0x",
        "logIndex": 29,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a885b1f77e4185f98b4d4dbe752b212b18b5d551",
          "0x000000000000000000000000000000000000000000000000000000000000001c"
        ],
        "data": "0x",
        "logIndex": 30,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a885b1f77e4185f98b4d4dbe752b212b18b5d551",
          "0x000000000000000000000000000000000000000000000000000000000000001d"
        ],
        "data": "0x",
        "logIndex": 31,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a885b1f77e4185f98b4d4dbe752b212b18b5d551",
          "0x000000000000000000000000000000000000000000000000000000000000001e"
        ],
        "data": "0x",
        "logIndex": 32,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a885b1f77e4185f98b4d4dbe752b212b18b5d551",
          "0x000000000000000000000000000000000000000000000000000000000000001f"
        ],
        "data": "0x",
        "logIndex": 33,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a885b1f77e4185f98b4d4dbe752b212b18b5d551",
          "0x0000000000000000000000000000000000000000000000000000000000000020"
        ],
        "data": "0x",
        "logIndex": 34,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a885b1f77e4185f98b4d4dbe752b212b18b5d551",
          "0x0000000000000000000000000000000000000000000000000000000000000021"
        ],
        "data": "0x",
        "logIndex": 35,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a885b1f77e4185f98b4d4dbe752b212b18b5d551",
          "0x0000000000000000000000000000000000000000000000000000000000000022"
        ],
        "data": "0x",
        "logIndex": 36,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a885b1f77e4185f98b4d4dbe752b212b18b5d551",
          "0x0000000000000000000000000000000000000000000000000000000000000023"
        ],
        "data": "0x",
        "logIndex": 37,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a885b1f77e4185f98b4d4dbe752b212b18b5d551",
          "0x0000000000000000000000000000000000000000000000000000000000000024"
        ],
        "data": "0x",
        "logIndex": 38,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f29ac257c03cba76da7d3c4a34f2ca14b563260d",
          "0x0000000000000000000000000000000000000000000000000000000000000025"
        ],
        "data": "0x",
        "logIndex": 39,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f29ac257c03cba76da7d3c4a34f2ca14b563260d",
          "0x0000000000000000000000000000000000000000000000000000000000000026"
        ],
        "data": "0x",
        "logIndex": 40,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f29ac257c03cba76da7d3c4a34f2ca14b563260d",
          "0x0000000000000000000000000000000000000000000000000000000000000027"
        ],
        "data": "0x",
        "logIndex": 41,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f29ac257c03cba76da7d3c4a34f2ca14b563260d",
          "0x0000000000000000000000000000000000000000000000000000000000000028"
        ],
        "data": "0x",
        "logIndex": 42,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f29ac257c03cba76da7d3c4a34f2ca14b563260d",
          "0x0000000000000000000000000000000000000000000000000000000000000029"
        ],
        "data": "0x",
        "logIndex": 43,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f29ac257c03cba76da7d3c4a34f2ca14b563260d",
          "0x000000000000000000000000000000000000000000000000000000000000002a"
        ],
        "data": "0x",
        "logIndex": 44,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f29ac257c03cba76da7d3c4a34f2ca14b563260d",
          "0x000000000000000000000000000000000000000000000000000000000000002b"
        ],
        "data": "0x",
        "logIndex": 45,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f29ac257c03cba76da7d3c4a34f2ca14b563260d",
          "0x000000000000000000000000000000000000000000000000000000000000002c"
        ],
        "data": "0x",
        "logIndex": 46,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f29ac257c03cba76da7d3c4a34f2ca14b563260d",
          "0x000000000000000000000000000000000000000000000000000000000000002d"
        ],
        "data": "0x",
        "logIndex": 47,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f29ac257c03cba76da7d3c4a34f2ca14b563260d",
          "0x000000000000000000000000000000000000000000000000000000000000002e"
        ],
        "data": "0x",
        "logIndex": 48,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f29ac257c03cba76da7d3c4a34f2ca14b563260d",
          "0x000000000000000000000000000000000000000000000000000000000000002f"
        ],
        "data": "0x",
        "logIndex": 49,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f29ac257c03cba76da7d3c4a34f2ca14b563260d",
          "0x0000000000000000000000000000000000000000000000000000000000000030"
        ],
        "data": "0x",
        "logIndex": 50,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f29ac257c03cba76da7d3c4a34f2ca14b563260d",
          "0x0000000000000000000000000000000000000000000000000000000000000031"
        ],
        "data": "0x",
        "logIndex": 51,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f29ac257c03cba76da7d3c4a34f2ca14b563260d",
          "0x0000000000000000000000000000000000000000000000000000000000000032"
        ],
        "data": "0x",
        "logIndex": 52,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f29ac257c03cba76da7d3c4a34f2ca14b563260d",
          "0x0000000000000000000000000000000000000000000000000000000000000033"
        ],
        "data": "0x",
        "logIndex": 53,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f29ac257c03cba76da7d3c4a34f2ca14b563260d",
          "0x0000000000000000000000000000000000000000000000000000000000000034"
        ],
        "data": "0x",
        "logIndex": 54,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f29ac257c03cba76da7d3c4a34f2ca14b563260d",
          "0x0000000000000000000000000000000000000000000000000000000000000035"
        ],
        "data": "0x",
        "logIndex": 55,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f29ac257c03cba76da7d3c4a34f2ca14b563260d",
          "0x0000000000000000000000000000000000000000000000000000000000000036"
        ],
        "data": "0x",
        "logIndex": 56,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f29ac257c03cba76da7d3c4a34f2ca14b563260d",
          "0x0000000000000000000000000000000000000000000000000000000000000037"
        ],
        "data": "0x",
        "logIndex": 57,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f29ac257c03cba76da7d3c4a34f2ca14b563260d",
          "0x0000000000000000000000000000000000000000000000000000000000000038"
        ],
        "data": "0x",
        "logIndex": 58,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f29ac257c03cba76da7d3c4a34f2ca14b563260d",
          "0x0000000000000000000000000000000000000000000000000000000000000039"
        ],
        "data": "0x",
        "logIndex": 59,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f29ac257c03cba76da7d3c4a34f2ca14b563260d",
          "0x000000000000000000000000000000000000000000000000000000000000003a"
        ],
        "data": "0x",
        "logIndex": 60,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f29ac257c03cba76da7d3c4a34f2ca14b563260d",
          "0x000000000000000000000000000000000000000000000000000000000000003b"
        ],
        "data": "0x",
        "logIndex": 61,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f29ac257c03cba76da7d3c4a34f2ca14b563260d",
          "0x000000000000000000000000000000000000000000000000000000000000003c"
        ],
        "data": "0x",
        "logIndex": 62,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f29ac257c03cba76da7d3c4a34f2ca14b563260d",
          "0x000000000000000000000000000000000000000000000000000000000000003d"
        ],
        "data": "0x",
        "logIndex": 63,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ed03ea9c96ec39097548256e428a163e5f524e47",
          "0x000000000000000000000000000000000000000000000000000000000000003e"
        ],
        "data": "0x",
        "logIndex": 64,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ed03ea9c96ec39097548256e428a163e5f524e47",
          "0x000000000000000000000000000000000000000000000000000000000000003f"
        ],
        "data": "0x",
        "logIndex": 65,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ed03ea9c96ec39097548256e428a163e5f524e47",
          "0x0000000000000000000000000000000000000000000000000000000000000040"
        ],
        "data": "0x",
        "logIndex": 66,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ed03ea9c96ec39097548256e428a163e5f524e47",
          "0x0000000000000000000000000000000000000000000000000000000000000041"
        ],
        "data": "0x",
        "logIndex": 67,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ed03ea9c96ec39097548256e428a163e5f524e47",
          "0x0000000000000000000000000000000000000000000000000000000000000042"
        ],
        "data": "0x",
        "logIndex": 68,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ed03ea9c96ec39097548256e428a163e5f524e47",
          "0x0000000000000000000000000000000000000000000000000000000000000043"
        ],
        "data": "0x",
        "logIndex": 69,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ed03ea9c96ec39097548256e428a163e5f524e47",
          "0x0000000000000000000000000000000000000000000000000000000000000044"
        ],
        "data": "0x",
        "logIndex": 70,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ed03ea9c96ec39097548256e428a163e5f524e47",
          "0x0000000000000000000000000000000000000000000000000000000000000045"
        ],
        "data": "0x",
        "logIndex": 71,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ed03ea9c96ec39097548256e428a163e5f524e47",
          "0x0000000000000000000000000000000000000000000000000000000000000046"
        ],
        "data": "0x",
        "logIndex": 72,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ed03ea9c96ec39097548256e428a163e5f524e47",
          "0x0000000000000000000000000000000000000000000000000000000000000047"
        ],
        "data": "0x",
        "logIndex": 73,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ed03ea9c96ec39097548256e428a163e5f524e47",
          "0x0000000000000000000000000000000000000000000000000000000000000048"
        ],
        "data": "0x",
        "logIndex": 74,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ed03ea9c96ec39097548256e428a163e5f524e47",
          "0x0000000000000000000000000000000000000000000000000000000000000049"
        ],
        "data": "0x",
        "logIndex": 75,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ed03ea9c96ec39097548256e428a163e5f524e47",
          "0x000000000000000000000000000000000000000000000000000000000000004a"
        ],
        "data": "0x",
        "logIndex": 76,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ed03ea9c96ec39097548256e428a163e5f524e47",
          "0x000000000000000000000000000000000000000000000000000000000000004b"
        ],
        "data": "0x",
        "logIndex": 77,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ed03ea9c96ec39097548256e428a163e5f524e47",
          "0x000000000000000000000000000000000000000000000000000000000000004c"
        ],
        "data": "0x",
        "logIndex": 78,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ed03ea9c96ec39097548256e428a163e5f524e47",
          "0x000000000000000000000000000000000000000000000000000000000000004d"
        ],
        "data": "0x",
        "logIndex": 79,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ed03ea9c96ec39097548256e428a163e5f524e47",
          "0x000000000000000000000000000000000000000000000000000000000000004e"
        ],
        "data": "0x",
        "logIndex": 80,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ed03ea9c96ec39097548256e428a163e5f524e47",
          "0x000000000000000000000000000000000000000000000000000000000000004f"
        ],
        "data": "0x",
        "logIndex": 81,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ed03ea9c96ec39097548256e428a163e5f524e47",
          "0x0000000000000000000000000000000000000000000000000000000000000050"
        ],
        "data": "0x",
        "logIndex": 82,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ed03ea9c96ec39097548256e428a163e5f524e47",
          "0x0000000000000000000000000000000000000000000000000000000000000051"
        ],
        "data": "0x",
        "logIndex": 83,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ed03ea9c96ec39097548256e428a163e5f524e47",
          "0x0000000000000000000000000000000000000000000000000000000000000052"
        ],
        "data": "0x",
        "logIndex": 84,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ed03ea9c96ec39097548256e428a163e5f524e47",
          "0x0000000000000000000000000000000000000000000000000000000000000053"
        ],
        "data": "0x",
        "logIndex": 85,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ed03ea9c96ec39097548256e428a163e5f524e47",
          "0x0000000000000000000000000000000000000000000000000000000000000054"
        ],
        "data": "0x",
        "logIndex": 86,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000bd34678c8e17d4d6f221b4cb912d79c3443f8034",
          "0x0000000000000000000000000000000000000000000000000000000000000055"
        ],
        "data": "0x",
        "logIndex": 87,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000bd34678c8e17d4d6f221b4cb912d79c3443f8034",
          "0x0000000000000000000000000000000000000000000000000000000000000056"
        ],
        "data": "0x",
        "logIndex": 88,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000bd34678c8e17d4d6f221b4cb912d79c3443f8034",
          "0x0000000000000000000000000000000000000000000000000000000000000057"
        ],
        "data": "0x",
        "logIndex": 89,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000bd34678c8e17d4d6f221b4cb912d79c3443f8034",
          "0x0000000000000000000000000000000000000000000000000000000000000058"
        ],
        "data": "0x",
        "logIndex": 90,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000bd34678c8e17d4d6f221b4cb912d79c3443f8034",
          "0x0000000000000000000000000000000000000000000000000000000000000059"
        ],
        "data": "0x",
        "logIndex": 91,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000bd34678c8e17d4d6f221b4cb912d79c3443f8034",
          "0x000000000000000000000000000000000000000000000000000000000000005a"
        ],
        "data": "0x",
        "logIndex": 92,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000bd34678c8e17d4d6f221b4cb912d79c3443f8034",
          "0x000000000000000000000000000000000000000000000000000000000000005b"
        ],
        "data": "0x",
        "logIndex": 93,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000bd34678c8e17d4d6f221b4cb912d79c3443f8034",
          "0x000000000000000000000000000000000000000000000000000000000000005c"
        ],
        "data": "0x",
        "logIndex": 94,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000bd34678c8e17d4d6f221b4cb912d79c3443f8034",
          "0x000000000000000000000000000000000000000000000000000000000000005d"
        ],
        "data": "0x",
        "logIndex": 95,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000bd34678c8e17d4d6f221b4cb912d79c3443f8034",
          "0x000000000000000000000000000000000000000000000000000000000000005e"
        ],
        "data": "0x",
        "logIndex": 96,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000bd34678c8e17d4d6f221b4cb912d79c3443f8034",
          "0x000000000000000000000000000000000000000000000000000000000000005f"
        ],
        "data": "0x",
        "logIndex": 97,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000bd34678c8e17d4d6f221b4cb912d79c3443f8034",
          "0x0000000000000000000000000000000000000000000000000000000000000060"
        ],
        "data": "0x",
        "logIndex": 98,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000007b9bb19911763a372e35f95d0e31031c0884b6ec",
          "0x0000000000000000000000000000000000000000000000000000000000000061"
        ],
        "data": "0x",
        "logIndex": 99,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000007b9bb19911763a372e35f95d0e31031c0884b6ec",
          "0x0000000000000000000000000000000000000000000000000000000000000062"
        ],
        "data": "0x",
        "logIndex": 100,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000007b9bb19911763a372e35f95d0e31031c0884b6ec",
          "0x0000000000000000000000000000000000000000000000000000000000000063"
        ],
        "data": "0x",
        "logIndex": 101,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000007b9bb19911763a372e35f95d0e31031c0884b6ec",
          "0x0000000000000000000000000000000000000000000000000000000000000064"
        ],
        "data": "0x",
        "logIndex": 102,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000007b9bb19911763a372e35f95d0e31031c0884b6ec",
          "0x0000000000000000000000000000000000000000000000000000000000000065"
        ],
        "data": "0x",
        "logIndex": 103,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000007b9bb19911763a372e35f95d0e31031c0884b6ec",
          "0x0000000000000000000000000000000000000000000000000000000000000066"
        ],
        "data": "0x",
        "logIndex": 104,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000007b9bb19911763a372e35f95d0e31031c0884b6ec",
          "0x0000000000000000000000000000000000000000000000000000000000000067"
        ],
        "data": "0x",
        "logIndex": 105,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000007b9bb19911763a372e35f95d0e31031c0884b6ec",
          "0x0000000000000000000000000000000000000000000000000000000000000068"
        ],
        "data": "0x",
        "logIndex": 106,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000007b9bb19911763a372e35f95d0e31031c0884b6ec",
          "0x0000000000000000000000000000000000000000000000000000000000000069"
        ],
        "data": "0x",
        "logIndex": 107,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000007b9bb19911763a372e35f95d0e31031c0884b6ec",
          "0x000000000000000000000000000000000000000000000000000000000000006a"
        ],
        "data": "0x",
        "logIndex": 108,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000007b9bb19911763a372e35f95d0e31031c0884b6ec",
          "0x000000000000000000000000000000000000000000000000000000000000006b"
        ],
        "data": "0x",
        "logIndex": 109,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000404e70a162487c9af8982a89a5453f389d5257b1",
          "0x000000000000000000000000000000000000000000000000000000000000006c"
        ],
        "data": "0x",
        "logIndex": 110,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000404e70a162487c9af8982a89a5453f389d5257b1",
          "0x000000000000000000000000000000000000000000000000000000000000006d"
        ],
        "data": "0x",
        "logIndex": 111,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000404e70a162487c9af8982a89a5453f389d5257b1",
          "0x000000000000000000000000000000000000000000000000000000000000006e"
        ],
        "data": "0x",
        "logIndex": 112,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000404e70a162487c9af8982a89a5453f389d5257b1",
          "0x000000000000000000000000000000000000000000000000000000000000006f"
        ],
        "data": "0x",
        "logIndex": 113,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000404e70a162487c9af8982a89a5453f389d5257b1",
          "0x0000000000000000000000000000000000000000000000000000000000000070"
        ],
        "data": "0x",
        "logIndex": 114,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000404e70a162487c9af8982a89a5453f389d5257b1",
          "0x0000000000000000000000000000000000000000000000000000000000000071"
        ],
        "data": "0x",
        "logIndex": 115,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000007fdb709f97dcd5f5a51054ad84a51107b2c15ef3",
          "0x0000000000000000000000000000000000000000000000000000000000000072"
        ],
        "data": "0x",
        "logIndex": 116,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000007fdb709f97dcd5f5a51054ad84a51107b2c15ef3",
          "0x0000000000000000000000000000000000000000000000000000000000000073"
        ],
        "data": "0x",
        "logIndex": 117,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000007fdb709f97dcd5f5a51054ad84a51107b2c15ef3",
          "0x0000000000000000000000000000000000000000000000000000000000000074"
        ],
        "data": "0x",
        "logIndex": 118,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000007fdb709f97dcd5f5a51054ad84a51107b2c15ef3",
          "0x0000000000000000000000000000000000000000000000000000000000000075"
        ],
        "data": "0x",
        "logIndex": 119,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000007fdb709f97dcd5f5a51054ad84a51107b2c15ef3",
          "0x0000000000000000000000000000000000000000000000000000000000000076"
        ],
        "data": "0x",
        "logIndex": 120,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ae378d2e106d5c3ebdb7d960bd9c9093e23e680f",
          "0x0000000000000000000000000000000000000000000000000000000000000077"
        ],
        "data": "0x",
        "logIndex": 121,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ae378d2e106d5c3ebdb7d960bd9c9093e23e680f",
          "0x0000000000000000000000000000000000000000000000000000000000000078"
        ],
        "data": "0x",
        "logIndex": 122,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ae378d2e106d5c3ebdb7d960bd9c9093e23e680f",
          "0x0000000000000000000000000000000000000000000000000000000000000079"
        ],
        "data": "0x",
        "logIndex": 123,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ae378d2e106d5c3ebdb7d960bd9c9093e23e680f",
          "0x000000000000000000000000000000000000000000000000000000000000007a"
        ],
        "data": "0x",
        "logIndex": 124,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000532bf0916f509883eaa1eca5b270d753e152855",
          "0x000000000000000000000000000000000000000000000000000000000000007b"
        ],
        "data": "0x",
        "logIndex": 125,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000532bf0916f509883eaa1eca5b270d753e152855",
          "0x000000000000000000000000000000000000000000000000000000000000007c"
        ],
        "data": "0x",
        "logIndex": 126,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000532bf0916f509883eaa1eca5b270d753e152855",
          "0x000000000000000000000000000000000000000000000000000000000000007d"
        ],
        "data": "0x",
        "logIndex": 127,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000002772c7df084cbe204576731d711b622234bdd9a7",
          "0x000000000000000000000000000000000000000000000000000000000000007e"
        ],
        "data": "0x",
        "logIndex": 128,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000002772c7df084cbe204576731d711b622234bdd9a7",
          "0x000000000000000000000000000000000000000000000000000000000000007f"
        ],
        "data": "0x",
        "logIndex": 129,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000002772c7df084cbe204576731d711b622234bdd9a7",
          "0x0000000000000000000000000000000000000000000000000000000000000080"
        ],
        "data": "0x",
        "logIndex": 130,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a9ad6c62611884672dfef7e20a115778c4b0bab1",
          "0x0000000000000000000000000000000000000000000000000000000000000081"
        ],
        "data": "0x",
        "logIndex": 131,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a9ad6c62611884672dfef7e20a115778c4b0bab1",
          "0x0000000000000000000000000000000000000000000000000000000000000082"
        ],
        "data": "0x",
        "logIndex": 132,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a9ad6c62611884672dfef7e20a115778c4b0bab1",
          "0x0000000000000000000000000000000000000000000000000000000000000083"
        ],
        "data": "0x",
        "logIndex": 133,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000001441bbbe1564d0b3e489f7c5bcc4f0c5ec4c4cd8",
          "0x0000000000000000000000000000000000000000000000000000000000000084"
        ],
        "data": "0x",
        "logIndex": 134,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000001441bbbe1564d0b3e489f7c5bcc4f0c5ec4c4cd8",
          "0x0000000000000000000000000000000000000000000000000000000000000085"
        ],
        "data": "0x",
        "logIndex": 135,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d634351c0e586ebc0b192d8573c0524aa1bc459f",
          "0x0000000000000000000000000000000000000000000000000000000000000086"
        ],
        "data": "0x",
        "logIndex": 136,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000074bdf046024cdf112f1d881526e6f05d278d35a0",
          "0x0000000000000000000000000000000000000000000000000000000000000087"
        ],
        "data": "0x",
        "logIndex": 137,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000739a5776f98e50bc2a453c0142cff8597b50dea7",
          "0x0000000000000000000000000000000000000000000000000000000000000088"
        ],
        "data": "0x",
        "logIndex": 138,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xF8E3DE55D24D13607A12628E0A113B66BA578bDC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000074bdf046024cdf112f1d881526e6f05d278d35a0",
          "0x0000000000000000000000000000000000000000000000000000000000000089"
        ],
        "data": "0x",
        "logIndex": 139,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 965762,
        "transactionHash": "0x8133b72bdb77dd1009fe2dd65b7ee40d55b87a3d205f9ff32051236548b9dc81",
        "address": "0xAdA897c101918d24d2C424007DdE5AE937DcC02f",
        "topics": [
          "0xab04395d906559e27643e4acf5cd0debe6a355247cd81c101bd0855d87dcc260",
          "0x000000000000000000000000f8e3de55d24d13607a12628e0a113b66ba578bdc",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x",
        "logIndex": 140,
        "blockHash": "0x3bb253ab6823062ae3b35a2b76d511c484f29e27b21bf4d1c7a3f73aa06ecb42"
      }
    ],
    "blockNumber": 965762,
    "cumulativeGasUsed": "3959391",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xE7326B4aE16A8aEE3698992EBf43a476AD199BD8",
    0,
    500,
    true
  ],
  "numDeployments": 1,
  "solcInputHash": "f1f86abe8b4cd825e795deea6bf33db3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_taskAcceptor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_mintReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_matchmakingBps\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_genesisMint\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AcceptedTaskIdsNotSorted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotSelfBreed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidQueryRange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintERC2309QuantityExceedsLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroQuantity\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"TokenId\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"NoSuchToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotListed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotTaskAcceptor\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotTaskHub\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnershipNotInitializedForExtraData\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaymentRequired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SubmisionTaskIdsNotSorted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"URIQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnknownQuantifier\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toTokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"ConsecutiveTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"TokenId\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Delisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"TokenId\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Incubated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"TokenId\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"Listed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"matchmakingBps\",\"type\":\"uint256\"}],\"name\":\"MatchmakingFeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintReward\",\"type\":\"uint256\"}],\"name\":\"MintRewardChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"TokenId\",\"name\":\"left\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"TokenId\",\"name\":\"right\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"TokenId\",\"name\":\"child\",\"type\":\"uint256\"}],\"name\":\"Spawned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"TaskAcceptorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"TaskHubChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_taskIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"_proof\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_report\",\"type\":\"bytes\"}],\"name\":\"acceptTaskResults\",\"outputs\":[{\"components\":[{\"internalType\":\"enum ITaskAcceptorV1.Quantifier\",\"name\":\"quantifier\",\"type\":\"uint8\"},{\"internalType\":\"uint256[]\",\"name\":\"taskIds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct ITaskAcceptorV1.TaskIdSelector\",\"name\":\"sel\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TokenId\",\"name\":\"_left\",\"type\":\"uint256\"},{\"internalType\":\"TokenId\",\"name\":\"_right\",\"type\":\"uint256\"}],\"name\":\"breed\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TokenId\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"delist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"earnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"explicitOwnershipOf\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"startTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"burned\",\"type\":\"bool\"},{\"internalType\":\"uint24\",\"name\":\"extraData\",\"type\":\"uint24\"}],\"internalType\":\"struct IERC721A.TokenOwnership\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"explicitOwnershipsOf\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"startTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"burned\",\"type\":\"bool\"},{\"internalType\":\"uint24\",\"name\":\"extraData\",\"type\":\"uint24\"}],\"internalType\":\"struct IERC721A.TokenOwnership[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"breeder\",\"type\":\"address\"},{\"internalType\":\"TokenId\",\"name\":\"_left\",\"type\":\"uint256\"},{\"internalType\":\"TokenId\",\"name\":\"_right\",\"type\":\"uint256\"}],\"name\":\"getBreedingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"getStuds\",\"outputs\":[{\"components\":[{\"internalType\":\"TokenId\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"internalType\":\"struct NFTrout.Stud[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TokenId\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"list\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"matchmakingBps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TokenId\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"parents\",\"outputs\":[{\"internalType\":\"TokenId\",\"name\":\"left\",\"type\":\"uint256\"},{\"internalType\":\"TokenId\",\"name\":\"right\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_matchBps\",\"type\":\"uint256\"}],\"name\":\"setMatchmakingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintReward\",\"type\":\"uint256\"}],\"name\":\"setMintReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newTaskAcceptor\",\"type\":\"address\"}],\"name\":\"setTaskAcceptor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newTaskHub\",\"type\":\"address\"}],\"name\":\"setTaskHub\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taskAcceptor\",\"outputs\":[{\"internalType\":\"contract ITaskAcceptorV1\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taskHub\",\"outputs\":[{\"internalType\":\"contract ITaskHubV1\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stop\",\"type\":\"uint256\"}],\"name\":\"tokensOfOwnerIn\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"ConsecutiveTransfer(uint256,uint256,address,address)\":{\"details\":\"Emitted when tokens in `fromTokenId` to `toTokenId` (inclusive) is transferred from `from` to `to`, as defined in the [ERC2309](https://eips.ethereum.org/EIPS/eip-2309) standard. See {_mintERC2309} for more details.\"},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"acceptTaskResults(uint256[],bytes,bytes)\":{\"params\":{\"_proof\":\"some proof of having completed the identiied tasks that the acceptor can verify.\",\"_report\":\"some data provided by the submitter that the requester may or may not trust\",\"_taskIds\":\"a sorted set of taskIds completed in this submission\"}},\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in `owner`'s account.\"},\"explicitOwnershipOf(uint256)\":{\"details\":\"Returns the `TokenOwnership` struct at `tokenId` without reverting. If the `tokenId` is out of bounds: - `addr = address(0)` - `startTimestamp = 0` - `burned = false` - `extraData = 0` If the `tokenId` is burned: - `addr = <Address of owner before token was burned>` - `startTimestamp = <Timestamp when token was burned>` - `burned = true` - `extraData = <Extra data when token was burned>` Otherwise: - `addr = <Address of owner>` - `startTimestamp = <Timestamp of start of ownership>` - `burned = false` - `extraData = <Extra data at start of ownership>`\"},\"explicitOwnershipsOf(uint256[])\":{\"details\":\"Returns an array of `TokenOwnership` structs at `tokenIds` in order. See {ERC721AQueryable-explicitOwnershipOf}\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}.\"},\"name()\":{\"details\":\"Returns the token collection name.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified) to learn more about how these ids are created. This function call must use less than 30000 gas.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokensOfOwner(address)\":{\"details\":\"Returns an array of token IDs owned by `owner`. This function scans the ownership mapping and is O(`totalSupply`) in complexity. It is meant to be called off-chain. See {ERC721AQueryable-tokensOfOwnerIn} for splitting the scan into multiple smaller scans if the collection is large enough to cause an out-of-gas error (10K collections should be fine).\"},\"tokensOfOwnerIn(address,uint256,uint256)\":{\"details\":\"Returns an array of token IDs owned by `owner`, in the range [`start`, `stop`) (i.e. `start <= tokenId < stop`). This function allows for tokens to be queried if the collection grows too big for a single call of {ERC721AQueryable-tokensOfOwner}. Requirements: - `start < stop`\"},\"totalSupply()\":{\"details\":\"Returns the total number of tokens in existence. Burned tokens will reduce the count. To get the total number of tokens minted, please see {_totalMinted}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"AcceptedTaskIdsNotSorted()\":[{\"notice\":\"The set of accepted task ids was not sorted.\"}],\"ApprovalCallerNotOwnerNorApproved()\":[{\"notice\":\"The caller must own the token or be an approved operator.\"}],\"ApprovalQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}],\"BalanceQueryForZeroAddress()\":[{\"notice\":\"Cannot query the balance for the zero address.\"}],\"CannotSelfBreed()\":[{\"notice\":\"A trout cannot breed with itself.\"}],\"InvalidQueryRange()\":[{\"notice\":\"Invalid query range (`start` >= `stop`).\"}],\"MintERC2309QuantityExceedsLimit()\":[{\"notice\":\"The `quantity` minted with ERC2309 exceeds the safety limit.\"}],\"MintToZeroAddress()\":[{\"notice\":\"Cannot mint to the zero address.\"}],\"MintZeroQuantity()\":[{\"notice\":\"The quantity of tokens minted must be more than zero.\"}],\"NoSuchToken(uint256)\":[{\"notice\":\"The token does not exist;\"}],\"NotListed()\":[{\"notice\":\"One of the trout you tried to breed is neither owned by you nor listed for public breeding.\"}],\"NotOwner()\":[{\"notice\":\"You are not the owner of the trout;\"}],\"OwnerQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}],\"OwnershipNotInitializedForExtraData()\":[{\"notice\":\"The `extraData` cannot be set on an unintialized ownership slot.\"}],\"PaymentRequired(uint256)\":[{\"notice\":\"Not enough value was sent.\"}],\"SubmisionTaskIdsNotSorted()\":[{\"notice\":\"The input task ids were not sorted.\"}],\"TransferCallerNotOwnerNorApproved()\":[{\"notice\":\"The caller must own the token or be an approved operator.\"}],\"TransferFromIncorrectOwner()\":[{\"notice\":\"The token must be owned by `from`.\"}],\"TransferToNonERC721ReceiverImplementer()\":[{\"notice\":\"Cannot safely transfer to a contract that does not implement the ERC721Receiver interface.\"}],\"TransferToZeroAddress()\":[{\"notice\":\"Cannot transfer to the zero address.\"}],\"URIQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}]},\"events\":{\"Delisted(uint256)\":{\"notice\":\"The trout is no longer breedable.\"},\"Incubated(uint256)\":{\"notice\":\"The trout has finished incubating.\"},\"Listed(uint256,uint256)\":{\"notice\":\"The trout was listed as breedable.\"},\"Spawned(uint256,uint256,uint256)\":{\"notice\":\"A new trouthas been spawned.\"}},\"kind\":\"user\",\"methods\":{\"acceptTaskResults(uint256[],bytes,bytes)\":{\"notice\":\"Accepts one or more elements of a task runner's task results submission, returning the seto tasks that were accepted.\"},\"breed(uint256,uint256)\":{\"notice\":\"Breeds any two trout to produce a third trout that will be owned by the caller. This method must be called with enough value to pay for the two trouts' fees and the minting fee.\"},\"delist(uint256)\":{\"notice\":\"Makes a trout not breedable.\"},\"getBreedingFee(address,uint256,uint256)\":{\"notice\":\"Returns the number of tokens that must be paid to breed the two trout.\"},\"getStuds(uint256,uint256)\":{\"notice\":\"Paginated list of trout listed for breeding.\"},\"list(uint256,uint256)\":{\"notice\":\"Makes a trout breedable.\"},\"mint()\":{\"notice\":\"Transmutes money into trout.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NFTrout.sol\":\"NFTrout\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@escrin/evm/contracts/tasks/acceptor/DelegatedTaskAcceptor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {TaskAcceptorV1Proxy} from \\\"../widgets/TaskAcceptorProxy.sol\\\";\\nimport {TaskAcceptorV1} from \\\"./TaskAcceptor.sol\\\";\\n\\nabstract contract DelegatedTaskAcceptorV1 is TaskAcceptorV1, TaskAcceptorV1Proxy {\\n    constructor(address _upstream) TaskAcceptorV1Proxy(_upstream) {\\n        return;\\n    }\\n\\n    function _acceptTaskResults(\\n        uint256[] calldata,\\n        bytes calldata,\\n        bytes calldata,\\n        address\\n    ) internal virtual override returns (TaskIdSelector memory) {\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory result) = address(taskAcceptor()).delegatecall(msg.data);\\n        if (!success) revert(string(result));\\n        return abi.decode(result, (TaskIdSelector));\\n    }\\n}\\n\",\"keccak256\":\"0xbe738c2a5dbaabe2b5a6b10b703ff4c589210fc30001410dfa7bb23d4b63ecf1\",\"license\":\"MIT\"},\"@escrin/evm/contracts/tasks/acceptor/ITaskAcceptor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nerror UnknownQuantifier();\\n\\ninterface ITaskAcceptorV1 {\\n    struct TaskIdSelector {\\n        Quantifier quantifier;\\n        /// A sorted list identifying subset of submitted tasks that will interpereted per the quantifier.\\n        uint256[] taskIds;\\n    }\\n\\n    enum Quantifier {\\n        Unknown,\\n        All,\\n        None,\\n        Some,\\n        Excluding\\n    }\\n\\n    /// Accepts one or more elements of a task runner's task results submission, returning the seto tasks that were accepted.\\n    /// @param _taskIds a sorted set of taskIds completed in this submission\\n    /// @param _proof some proof of having completed the identiied tasks that the acceptor can verify.\\n    /// @param _report some data provided by the submitter that the requester may or may not trust\\n    function acceptTaskResults(\\n        uint256[] calldata _taskIds,\\n        bytes calldata _proof,\\n        bytes calldata _report\\n    ) external returns (TaskIdSelector memory);\\n}\\n\\n/// An extension to `ITaskAcceptorV1` that helps task runners know where to find details about how to complete the task.\\ninterface ITaskAcceptanceCriteriaV1 is ITaskAcceptorV1 {\\n    /// @return a string that could be a URI or some abi-encoded data\\n    function taskAcceptanceCriteria(uint256 _taskId) external view returns (string calldata);\\n}\\n\\nlibrary TaskIdSelectorOps {\\n    function countSelected(\\n        ITaskAcceptorV1.TaskIdSelector memory _sel,\\n        uint256 _totalCount\\n    ) internal pure returns (uint256 count) {\\n        if (_sel.quantifier == ITaskAcceptorV1.Quantifier.All) return _totalCount;\\n        if (_sel.quantifier == ITaskAcceptorV1.Quantifier.None) return 0;\\n        if (_sel.quantifier == ITaskAcceptorV1.Quantifier.Some) return _sel.taskIds.length;\\n        if (_sel.quantifier == ITaskAcceptorV1.Quantifier.Excluding)\\n            return _totalCount - _sel.taskIds.length;\\n        revert UnknownQuantifier();\\n    }\\n\\n    /// @param _set a sorted set of task ids\\n    function selected(\\n        ITaskAcceptorV1.TaskIdSelector memory _sel,\\n        uint256[] memory _set\\n    ) internal pure returns (uint256[] memory) {\\n        if (_sel.quantifier == ITaskAcceptorV1.Quantifier.All) return _set;\\n        if (_sel.quantifier == ITaskAcceptorV1.Quantifier.None) return new uint256[](0);\\n        if (_sel.quantifier == ITaskAcceptorV1.Quantifier.Some) return _sel.taskIds;\\n        if (_sel.quantifier == ITaskAcceptorV1.Quantifier.Excluding) {\\n            uint256[] memory out = new uint256[](countSelected(_sel, _set.length));\\n            uint256 selPtr;\\n            uint256 outPtr;\\n            for (uint256 setPtr; setPtr < _set.length; ++setPtr) {\\n                if (_set[setPtr] == _sel.taskIds[selPtr]) continue;\\n                out[outPtr] = _set[setPtr];\\n                selPtr++;\\n                outPtr++;\\n            }\\n            return out;\\n        }\\n        revert UnknownQuantifier();\\n    }\\n\\n    function indices(\\n        ITaskAcceptorV1.TaskIdSelector memory _sel,\\n        uint256[] memory _set\\n    ) internal pure returns (uint256[] memory) {\\n        if (_sel.quantifier == ITaskAcceptorV1.Quantifier.All) {\\n            uint256[] memory ixs = new uint256[](_set.length);\\n            for (uint256 i; i < ixs.length; ++i) ixs[i] = i;\\n            return ixs;\\n        }\\n        if (_sel.quantifier == ITaskAcceptorV1.Quantifier.None) return new uint256[](0);\\n        if (_sel.quantifier == ITaskAcceptorV1.Quantifier.Some) {\\n            uint256[] memory ixs = new uint256[](_sel.taskIds.length);\\n            uint256 selPtr;\\n            for (uint256 setPtr; setPtr < _set.length; ++setPtr) {\\n                if (_set[setPtr] != _sel.taskIds[selPtr]) continue;\\n                ixs[selPtr] = setPtr;\\n                selPtr++;\\n            }\\n            return ixs;\\n        }\\n        if (_sel.quantifier == ITaskAcceptorV1.Quantifier.Excluding) {\\n            uint256[] memory ixs = new uint256[](countSelected(_sel, _set.length));\\n            uint256 selPtr;\\n            for (uint256 setPtr; setPtr < _set.length; ++setPtr) {\\n                if (_set[setPtr] == _sel.taskIds[selPtr]) continue;\\n                ixs[selPtr] = setPtr;\\n                selPtr++;\\n            }\\n            return ixs;\\n        }\\n        revert UnknownQuantifier();\\n    }\\n\\n    function pick(\\n        ITaskAcceptorV1.TaskIdSelector memory _sel,\\n        uint256[] memory _set,\\n        uint256[] memory _target\\n    ) internal pure returns (uint256[] memory) {\\n        uint256[] memory ixs = indices(_sel, _set);\\n        uint256[] memory placed = new uint256[](ixs.length);\\n        for (uint256 i; i < ixs.length; ++i) {\\n            placed[i] = _target[ixs[i]];\\n        }\\n        return placed;\\n    }\\n\\n    function all() internal pure returns (ITaskAcceptorV1.TaskIdSelector memory sel) {\\n        sel.quantifier = ITaskAcceptorV1.Quantifier.All;\\n    }\\n\\n    function none() internal pure returns (ITaskAcceptorV1.TaskIdSelector memory sel) {\\n        sel.quantifier = ITaskAcceptorV1.Quantifier.None;\\n    }\\n}\\n\",\"keccak256\":\"0xab0997778ae09156bbd716e9ec93a90177cd938dc6c9f7b136e656ec00d7cb74\",\"license\":\"MIT\"},\"@escrin/evm/contracts/tasks/acceptor/TaskAcceptor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {ITaskAcceptorV1, TaskIdSelectorOps} from \\\"./ITaskAcceptor.sol\\\";\\n\\n/// The input task ids were not sorted.\\nerror SubmisionTaskIdsNotSorted();\\n/// The set of accepted task ids was not sorted.\\nerror AcceptedTaskIdsNotSorted();\\n\\nabstract contract TaskAcceptorV1 is ITaskAcceptorV1 {\\n    using TaskIdSelectorOps for TaskIdSelector;\\n\\n    function acceptTaskResults(\\n        uint256[] calldata _taskIds,\\n        bytes calldata _proof,\\n        bytes calldata _report\\n    ) external virtual returns (TaskIdSelector memory sel) {\\n        if (!_isSortedSet(_taskIds)) revert SubmisionTaskIdsNotSorted();\\n        _beforeTaskResultsAccepted(_taskIds, _proof, _report, msg.sender);\\n        sel = _acceptTaskResults(_taskIds, _proof, _report, msg.sender);\\n        if (!_isSortedSet(sel.taskIds)) revert AcceptedTaskIdsNotSorted();\\n        _afterTaskResultsAccepted(_taskIds, _report, msg.sender, sel);\\n    }\\n\\n    /// Accepts one or more elements of a task runner's task results submission, returning the seto tasks that were accepted.\\n    /// @param _taskIds a sorted set of taskIds completed in this submission\\n    /// @param _proof some proof of having completed the identiied tasks that the acceptor can verify.\\n    /// @param _report Some data provided by the submitter that the requester may or may not trust\\n    /// @param _submitter The account that submitted the task results.\\n    /// @return A selection of the accepted task results, which may be empty.\\n    function _acceptTaskResults(\\n        uint256[] calldata _taskIds,\\n        bytes calldata _proof,\\n        bytes calldata _report,\\n        address _submitter\\n    ) internal virtual returns (TaskIdSelector memory);\\n\\n    /// Runs before tasks are accepted.\\n    function _beforeTaskResultsAccepted(\\n        uint256[] calldata /* _taskIds */,\\n        bytes calldata /* _proof */,\\n        bytes calldata /* _report */,\\n        address /* _submitter */\\n    ) internal virtual {\\n        return;\\n    }\\n\\n    function _afterTaskResultsAccepted(\\n        uint256[] calldata /* _taskIds */,\\n        bytes calldata /* _report */,\\n        address /* _submitter */,\\n        TaskIdSelector memory /* _selected */\\n    ) internal virtual {\\n        return;\\n    }\\n\\n    function _isSortedSet(uint256[] memory _input) internal pure returns (bool) {\\n        for (uint256 i = 1; i < _input.length; ++i) {\\n            if (_input[i] <= _input[i - 1]) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x2b0e2f055a56bf4e2934ecc15b1181bc3faff4c049ea7063985355425e277440\",\"license\":\"MIT\"},\"@escrin/evm/contracts/tasks/hub/ITaskHub.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\ninterface ITaskHubV1 is IERC165 {\\n    event TasksAvailable(address indexed generator, bytes32 indexed context);\\n\\n    /// Alerts any listening task runners that there are new tasks available.\\n    function notify() external;\\n\\n    /// Alerts any listening task runners that there are new tasks available.\\n    /// @param _context Some indexed data to be emitted with the event for listeners to filter on.\\n    function notify(bytes32 _context) external;\\n}\\n\",\"keccak256\":\"0x7d0e005a875af6b09d0700af1c38090b4bcce96fa4cd68ae9a908bcc9e4d3d74\",\"license\":\"MIT\"},\"@escrin/evm/contracts/tasks/hub/TaskHub.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {ERC165} from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\nimport {ITaskHubV1} from \\\"./ITaskHub.sol\\\";\\n\\n/// @dev The methods in this contract are not marked with `override` are not guaranteed to be in the next version of the contract.\\ncontract TaskHubV1 is ITaskHubV1 {\\n    function notify() external override {\\n        emit TasksAvailable(msg.sender, \\\"\\\");\\n    }\\n\\n    function notify(bytes32 _context) external override {\\n        emit TasksAvailable(msg.sender, _context);\\n    }\\n\\n    function supportsInterface(bytes4 _interfaceId) public pure override returns (bool) {\\n        return _interfaceId == type(ITaskHubV1).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xc0e4b9c97e7bd29c061e12168cfc9e53b1f9e4baa77944a409aee564677026ac\",\"license\":\"MIT\"},\"@escrin/evm/contracts/tasks/widgets/TaskAcceptorProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {ERC165Checker} from \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\n\\nimport {ITaskAcceptorV1} from \\\"../acceptor/ITaskAcceptor.sol\\\";\\n\\nerror NotTaskAcceptor();\\n\\ncontract TaskAcceptorV1Proxy {\\n    event TaskAcceptorChanged(address to);\\n\\n    ITaskAcceptorV1 private taskAcceptor_;\\n\\n    constructor(address _taskAcceptor) {\\n        _setTaskAcceptor(_taskAcceptor);\\n    }\\n\\n    function taskAcceptor() public view virtual returns (ITaskAcceptorV1) {\\n        return taskAcceptor_;\\n    }\\n\\n    function _setTaskAcceptor(address _contract) internal {\\n        _requireIsTaskAcceptor(_contract);\\n        taskAcceptor_ = ITaskAcceptorV1(_contract);\\n        emit TaskAcceptorChanged(_contract);\\n    }\\n\\n    function _requireIsTaskAcceptor(address _contract) internal view {\\n        if (!_isTaskAcceptor(_contract)) revert NotTaskAcceptor();\\n    }\\n\\n    function _isTaskAcceptor(address _contract) internal view returns (bool) {\\n        return !ERC165Checker.supportsInterface(_contract, type(ITaskAcceptorV1).interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xc2969620e9326619769dde6df477a073e46a4f6b47f4cf7710defe995d75ae2d\",\"license\":\"MIT\"},\"@escrin/evm/contracts/tasks/widgets/TaskHubNotifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {ERC165Checker} from \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\n\\nimport {ITaskHubV1} from \\\"../hub/ITaskHub.sol\\\";\\nimport {TaskHubV1} from \\\"../hub/TaskHub.sol\\\";\\n\\nerror NotTaskHub();\\n\\ncontract BaseTaskHubV1Notifier {\\n    event TaskHubChanged(address to);\\n\\n    ITaskHubV1 private taskHub_;\\n\\n    modifier notify() {\\n        _;\\n        taskHub_.notify();\\n    }\\n\\n    constructor(address _taskHub) {\\n        _setTaskHub(_taskHub);\\n    }\\n\\n    function taskHub() public view virtual returns (ITaskHubV1) {\\n        return taskHub_;\\n    }\\n\\n    function _setTaskHub(address _contract) internal {\\n        _requireIsTaskHub(_contract);\\n        taskHub_ = ITaskHubV1(_contract);\\n        emit TaskHubChanged(_contract);\\n    }\\n\\n    function _requireIsTaskHub(address _contract) internal view {\\n        if (!_isTaskHub(_contract)) revert NotTaskHub();\\n    }\\n\\n    function _isTaskHub(address _contract) internal view returns (bool) {\\n        return !ERC165Checker.supportsInterface(_contract, type(ITaskHubV1).interfaceId);\\n    }\\n}\\n\\ncontract TaskHubV1Notifier is BaseTaskHubV1Notifier {\\n    constructor() BaseTaskHubV1Notifier(_taskHub()) {\\n        return;\\n    }\\n\\n    function _taskHub() private returns (address) {\\n        uint256 ch = block.chainid;\\n        if (ch == 0x5aff) return 0xAdA897c101918d24d2C424007DdE5AE937DcC02f;\\n        if (ch == 1337 || ch == 31337) return address(new TaskHubV1());\\n        return address(0);\\n    }\\n}\\n\",\"keccak256\":\"0xfacfe3a9aa7daa12da350a7bc5fd54e5b30d06da6d645a12cb539578d3602bfc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.2) (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface.\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            supportsERC165InterfaceUnchecked(account, type(IERC165).interfaceId) &&\\n            !supportsERC165InterfaceUnchecked(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && supportsERC165InterfaceUnchecked(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds)\\n        internal\\n        view\\n        returns (bool[] memory)\\n    {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = supportsERC165InterfaceUnchecked(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!supportsERC165InterfaceUnchecked(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     *\\n     * Some precompiled contracts will falsely indicate support for a given interface, so caution\\n     * should be exercised when using this function.\\n     *\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function supportsERC165InterfaceUnchecked(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // prepare call\\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\\n\\n        // perform static call\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly {\\n            success := staticcall(30000, account, add(encodedParams, 0x20), mload(encodedParams), 0x00, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0x00)\\n        }\\n\\n        return success && returnSize >= 0x20 && returnValue > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x6ac3ebc0fe0ac3a70a561aa19210b49af9aa530b89ebb1cdc8a5901aabf7212e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableMap.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableMap.js.\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Library for managing an enumerable variant of Solidity's\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\n * type.\\n *\\n * Maps have the following properties:\\n *\\n * - Entries are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\\n *\\n *     // Declare a set state variable\\n *     EnumerableMap.UintToAddressMap private myMap;\\n * }\\n * ```\\n *\\n * The following map types are supported:\\n *\\n * - `uint256 -> address` (`UintToAddressMap`) since v3.0.0\\n * - `address -> uint256` (`AddressToUintMap`) since v4.6.0\\n * - `bytes32 -> bytes32` (`Bytes32ToBytes32Map`) since v4.6.0\\n * - `uint256 -> uint256` (`UintToUintMap`) since v4.7.0\\n * - `bytes32 -> uint256` (`Bytes32ToUintMap`) since v4.7.0\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableMap, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableMap.\\n * ====\\n */\\nlibrary EnumerableMap {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Map type with\\n    // bytes32 keys and values.\\n    // The Map implementation uses private functions, and user-facing\\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\\n    // the underlying Map.\\n    // This means that we can only create new EnumerableMaps for types that fit\\n    // in bytes32.\\n\\n    struct Bytes32ToBytes32Map {\\n        // Storage of keys\\n        EnumerableSet.Bytes32Set _keys;\\n        mapping(bytes32 => bytes32) _values;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        Bytes32ToBytes32Map storage map,\\n        bytes32 key,\\n        bytes32 value\\n    ) internal returns (bool) {\\n        map._values[key] = value;\\n        return map._keys.add(key);\\n    }\\n\\n    /**\\n     * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(Bytes32ToBytes32Map storage map, bytes32 key) internal returns (bool) {\\n        delete map._values[key];\\n        return map._keys.remove(key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool) {\\n        return map._keys.contains(key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n    function length(Bytes32ToBytes32Map storage map) internal view returns (uint256) {\\n        return map._keys.length();\\n    }\\n\\n    /**\\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of entries inside the\\n     * array, and it may change when more entries are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32ToBytes32Map storage map, uint256 index) internal view returns (bytes32, bytes32) {\\n        bytes32 key = map._keys.at(index);\\n        return (key, map._values[key]);\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool, bytes32) {\\n        bytes32 value = map._values[key];\\n        if (value == bytes32(0)) {\\n            return (contains(map, key), bytes32(0));\\n        } else {\\n            return (true, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || contains(map, key), \\\"EnumerableMap: nonexistent key\\\");\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        Bytes32ToBytes32Map storage map,\\n        bytes32 key,\\n        string memory errorMessage\\n    ) internal view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || contains(map, key), errorMessage);\\n        return value;\\n    }\\n\\n    // UintToUintMap\\n\\n    struct UintToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        UintToUintMap storage map,\\n        uint256 key,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return set(map._inner, bytes32(key), bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToUintMap storage map, uint256 key) internal returns (bool) {\\n        return remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToUintMap storage map, uint256 key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintToUintMap storage map, uint256 index) internal view returns (uint256, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (uint256(key), uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(UintToUintMap storage map, uint256 key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToUintMap storage map, uint256 key) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(key)));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        UintToUintMap storage map,\\n        uint256 key,\\n        string memory errorMessage\\n    ) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(key), errorMessage));\\n    }\\n\\n    // UintToAddressMap\\n\\n    struct UintToAddressMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        UintToAddressMap storage map,\\n        uint256 key,\\n        address value\\n    ) internal returns (bool) {\\n        return set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\\n        return remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (uint256(key), address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\\n        return (success, address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\\n        return address(uint160(uint256(get(map._inner, bytes32(key)))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        UintToAddressMap storage map,\\n        uint256 key,\\n        string memory errorMessage\\n    ) internal view returns (address) {\\n        return address(uint160(uint256(get(map._inner, bytes32(key), errorMessage))));\\n    }\\n\\n    // AddressToUintMap\\n\\n    struct AddressToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        AddressToUintMap storage map,\\n        address key,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return set(map._inner, bytes32(uint256(uint160(key))), bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(AddressToUintMap storage map, address key) internal returns (bool) {\\n        return remove(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(AddressToUintMap storage map, address key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(AddressToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressToUintMap storage map, uint256 index) internal view returns (address, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (address(uint160(uint256(key))), uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(AddressToUintMap storage map, address key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(uint256(uint160(key))));\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(AddressToUintMap storage map, address key) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(uint256(uint160(key)))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        AddressToUintMap storage map,\\n        address key,\\n        string memory errorMessage\\n    ) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(uint256(uint160(key))), errorMessage));\\n    }\\n\\n    // Bytes32ToUintMap\\n\\n    struct Bytes32ToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        Bytes32ToUintMap storage map,\\n        bytes32 key,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return set(map._inner, key, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(Bytes32ToUintMap storage map, bytes32 key) internal returns (bool) {\\n        return remove(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool) {\\n        return contains(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(Bytes32ToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32ToUintMap storage map, uint256 index) internal view returns (bytes32, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (key, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, key);\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(Bytes32ToUintMap storage map, bytes32 key) internal view returns (uint256) {\\n        return uint256(get(map._inner, key));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        Bytes32ToUintMap storage map,\\n        bytes32 key,\\n        string memory errorMessage\\n    ) internal view returns (uint256) {\\n        return uint256(get(map._inner, key, errorMessage));\\n    }\\n}\\n\",\"keccak256\":\"0x5094b17cb46143943f3206d0738b91a05a7005e979681af7210d534cd3e72f54\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xc3ff3f5c4584e1d9a483ad7ced51ab64523201f4e3d3c65293e4ca8aeb77a961\",\"license\":\"MIT\"},\"contracts/NFTrout.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {TaskAcceptorV1, TaskIdSelectorOps} from \\\"@escrin/evm/contracts/tasks/acceptor/TaskAcceptor.sol\\\";\\nimport {DelegatedTaskAcceptorV1} from \\\"@escrin/evm/contracts/tasks/acceptor/DelegatedTaskAcceptor.sol\\\";\\nimport {TaskHubV1Notifier} from \\\"@escrin/evm/contracts/tasks/widgets/TaskHubNotifier.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {Pausable} from \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport {EnumerableMap} from \\\"@openzeppelin/contracts/utils/structs/EnumerableMap.sol\\\";\\nimport {ERC721A} from \\\"erc721a/contracts/ERC721A.sol\\\";\\nimport {IERC721A} from \\\"erc721a/contracts/IERC721A.sol\\\";\\nimport {ERC721AQueryable} from \\\"erc721a/contracts/extensions/ERC721AQueryable.sol\\\";\\n\\ntype TokenId is uint256;\\n\\n/// You are not the owner of the trout;\\nerror NotOwner(); // 30cd7471 MM10cQ==\\n/// The token does not exist;\\nerror NoSuchToken(TokenId id);\\n/// One of the trout you tried to breed is neither owned by you nor listed for public breeding.\\nerror NotListed(); // 665c1c57 ZlwcVw==\\n/// Not enough value was sent.\\nerror PaymentRequired(uint256 amount); // 8c4fcd93 jE/Nkw=b\\n/// A trout cannot breed with itself.\\nerror CannotSelfBreed(); // 56938583 VpOFgw==\\n\\ncontract NFTrout is\\n    ERC721AQueryable,\\n    Ownable,\\n    Pausable,\\n    TaskHubV1Notifier,\\n    DelegatedTaskAcceptorV1\\n{\\n    using EnumerableMap for EnumerableMap.UintToUintMap;\\n    using TaskIdSelectorOps for TaskIdSelector;\\n\\n    /// The trout was listed as breedable.\\n    event Listed(TokenId indexed tokenId, uint256 fee);\\n    /// The trout is no longer breedable.\\n    event Delisted(TokenId indexed tokenId);\\n    /// A new trouthas been spawned.\\n    event Spawned(TokenId indexed left, TokenId indexed right, TokenId child);\\n    /// The trout has finished incubating.\\n    event Incubated(TokenId indexed tokenId);\\n    event MintRewardChanged(uint256 mintReward);\\n    event MatchmakingFeeChanged(uint256 matchmakingBps);\\n\\n    struct Stud {\\n        TokenId tokenId;\\n        uint256 fee;\\n    }\\n\\n    struct Parents {\\n        TokenId left;\\n        TokenId right;\\n    }\\n\\n    uint256 public mintReward;\\n    uint256 public matchmakingBps;\\n    mapping(address => uint256) public earnings;\\n\\n    mapping(TokenId => Parents) public parents;\\n    /// token id -> fee\\n    EnumerableMap.UintToUintMap private studs;\\n    mapping(TokenId => string) private tokenCids;\\n\\n    modifier onlyTroutOwner(TokenId _tokenId) {\\n        if (msg.sender != _ownerOf(_tokenId)) revert NotOwner();\\n        _;\\n    }\\n\\n    constructor(\\n        address _taskAcceptor,\\n        uint256 _mintReward,\\n        uint256 _matchmakingBps,\\n        bool _genesisMint\\n    ) ERC721A(\\\"NFTrout\\\", \\\"TROUT\\\") TaskHubV1Notifier() DelegatedTaskAcceptorV1(_taskAcceptor) {\\n        mintReward = _mintReward;\\n        matchmakingBps = _matchmakingBps;\\n\\n        if (_genesisMint) {\\n            _safeMint(0xa885B1F77e4185F98b4D4dBe752B212B18b5d551, 36);\\n            _safeMint(0xF29Ac257c03CBA76DA7d3c4A34f2cA14B563260d, 25);\\n            _safeMint(0xEd03EA9c96ec39097548256E428a163E5f524e47, 23);\\n            _safeMint(0xbd34678C8e17d4D6F221B4Cb912D79C3443F8034, 12);\\n            _safeMint(0x7B9Bb19911763A372E35f95d0E31031C0884b6EC, 11);\\n            _safeMint(0x404E70A162487c9Af8982a89a5453f389d5257b1, 6);\\n            _safeMint(0x7Fdb709F97dcd5F5a51054aD84A51107B2C15EF3, 5);\\n            _safeMint(0xAE378d2e106d5C3ebDb7D960BD9c9093e23e680F, 4);\\n            _safeMint(0x0532Bf0916F509883eaA1ECA5b270D753E152855, 3);\\n            _safeMint(0x2772c7DF084Cbe204576731d711B622234BdD9A7, 3);\\n            _safeMint(0xa9ad6C62611884672DfEf7e20a115778C4b0bAb1, 3);\\n            _safeMint(0x1441bbbE1564d0b3e489f7C5bCC4f0c5EC4C4cd8, 2);\\n            _safeMint(0xd634351C0e586ebC0B192D8573c0524AA1bC459F, 1);\\n            _safeMint(0x74BDF046024CDF112F1d881526e6F05d278D35a0, 1);\\n            _safeMint(0x739A5776F98E50bc2a453C0142cff8597b50DEA7, 1);\\n            _safeMint(0x74BDF046024CDF112F1d881526e6F05d278D35a0, 1);\\n            taskHub().notify();\\n        }\\n    }\\n\\n    /// Transmutes money into trout.\\n    function mint() external payable whenNotPaused notify {\\n        if (_pay(address(this), mintReward, 0) != msg.value) revert PaymentRequired(mintReward);\\n        _safeMint(msg.sender, 1);\\n    }\\n\\n    /// Makes a trout breedable.\\n    function list(TokenId _tokenId, uint256 _fee) external onlyTroutOwner(_tokenId) {\\n        studs.set(TokenId.unwrap(_tokenId), _fee);\\n        emit Listed(_tokenId, _fee);\\n    }\\n\\n    /// Makes a trout not breedable.\\n    function delist(TokenId _tokenId) external onlyTroutOwner(_tokenId) {\\n        studs.remove(TokenId.unwrap(_tokenId));\\n        emit Delisted(_tokenId);\\n    }\\n\\n    /// Breeds any two trout to produce a third trout that will be owned by the caller.\\n    /// This method must be called with enough value to pay for the two trouts' fees and the minting fee.\\n    function breed(TokenId _left, TokenId _right) external payable whenNotPaused notify {\\n        if (!_exists(_left)) revert NoSuchToken(_left);\\n        if (!_exists(_right)) revert NoSuchToken(_right);\\n        if (TokenId.unwrap(_left) == TokenId.unwrap(_right)) revert CannotSelfBreed();\\n\\n        uint256 subtotal;\\n        subtotal += mintReward;\\n        subtotal += _pay(_ownerOf(_left), _getBreedingFee(msg.sender, _left), matchmakingBps);\\n        subtotal += _pay(_ownerOf(_right), _getBreedingFee(msg.sender, _right), matchmakingBps);\\n        if (subtotal != msg.value) revert PaymentRequired(subtotal);\\n        TokenId tokenId = TokenId.wrap(_nextTokenId());\\n        parents[tokenId] = Parents({left: _left, right: _right});\\n        _safeMint(msg.sender, 1);\\n    }\\n\\n    function withdraw() external {\\n        uint256 stack = earnings[msg.sender];\\n        earnings[msg.sender] = 0;\\n        payable(msg.sender).transfer(stack);\\n    }\\n\\n    function setMintReward(uint256 _mintReward) external onlyOwner {\\n        mintReward = _mintReward;\\n        emit MintRewardChanged(_mintReward);\\n    }\\n\\n    function setMatchmakingFee(uint256 _matchBps) external onlyOwner {\\n        matchmakingBps = _matchBps;\\n        emit MatchmakingFeeChanged(_matchBps);\\n    }\\n\\n    function setTaskHub(address _newTaskHub) external onlyOwner {\\n        _setTaskHub(_newTaskHub);\\n    }\\n\\n    function setTaskAcceptor(address _newTaskAcceptor) external onlyOwner {\\n        _setTaskAcceptor(_newTaskAcceptor);\\n    }\\n\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    /// Paginated list of trout listed for breeding.\\n    function getStuds(uint256 _offset, uint256 _count) external view returns (Stud[] memory) {\\n        uint256 start = _offset > studs.length() ? studs.length() : _offset;\\n        uint256 end = start + _count;\\n        uint256 n = end > studs.length() ? studs.length() - start : _count;\\n        Stud[] memory studz = new Stud[](n);\\n        for (uint256 i; i < n; ++i) {\\n            (uint256 tokenId, uint256 fee) = studs.at(_offset + i);\\n            studz[i] = Stud({tokenId: TokenId.wrap(tokenId), fee: fee});\\n        }\\n        return studz;\\n    }\\n\\n    function tokenURI(\\n        uint256 _tokenId\\n    ) public view override(IERC721A, ERC721A) returns (string memory) {\\n        return string.concat(\\\"ipfs://\\\", tokenCids[TokenId.wrap(_tokenId)]);\\n    }\\n\\n    /// Returns the number of tokens that must be paid to breed the two trout.\\n    function getBreedingFee(\\n        address breeder,\\n        TokenId _left,\\n        TokenId _right\\n    ) public view returns (uint256 fee) {\\n        fee = mintReward;\\n        fee += _getBreedingFee(breeder, _left);\\n        fee += _getBreedingFee(breeder, _right);\\n    }\\n\\n    function _pay(\\n        address _payee,\\n        uint256 _value,\\n        uint256 _ownerTakeBps\\n    ) internal returns (uint256 value) {\\n        uint256 take = (_value * _ownerTakeBps) / 10_000;\\n        earnings[_payee] += _value - take;\\n        earnings[owner()] += take;\\n        return _value;\\n    }\\n\\n    /// Returns a cost for the payer to breed the trout that is no larger than the list price.\\n    function _getBreedingFee(address _payer, TokenId _tokenId) internal view returns (uint256) {\\n        if (TokenId.unwrap(_tokenId) == 0 || _payer == _ownerOf(_tokenId)) return 0;\\n        (bool exists, uint256 fee) = studs.tryGet(TokenId.unwrap(_tokenId));\\n        if (!exists) revert NotListed();\\n        return fee;\\n    }\\n\\n    function _ownerOf(TokenId _id) internal view returns (address) {\\n        return ownerOf(TokenId.unwrap(_id));\\n    }\\n\\n    function _exists(TokenId _id) internal view returns (bool) {\\n        return _exists(TokenId.unwrap(_id));\\n    }\\n\\n    function _startTokenId() internal pure override returns (uint256) {\\n        return 1;\\n    }\\n\\n    function _afterTaskResultsAccepted(\\n        uint256[] calldata _taskIds,\\n        bytes calldata _report,\\n        address _submitter,\\n        TaskIdSelector memory _sel\\n    ) internal override {\\n        string[] memory cids = abi.decode(_report, (string[]));\\n        uint256[] memory acceptedIxs = _sel.indices(_taskIds);\\n        string[] memory acceptedCids = new string[](acceptedIxs.length);\\n        for (uint256 i; i < acceptedIxs.length; ++i) {\\n            TokenId tokenId = TokenId.wrap(_taskIds[acceptedIxs[i]]);\\n            tokenCids[tokenId] = cids[acceptedIxs[i]];\\n        }\\n        uint256 payout = mintReward * acceptedCids.length;\\n        if (payout > 0) payable(_submitter).transfer(payout);\\n    }\\n}\\n\",\"keccak256\":\"0xe5fcacba8b03caa6967e7669b53ec92d25616daa2702f466b0a728ebaf4c0958\",\"license\":\"MIT\"},\"erc721a/contracts/ERC721A.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.2.3\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport './IERC721A.sol';\\n\\n/**\\n * @dev Interface of ERC721 token receiver.\\n */\\ninterface ERC721A__IERC721Receiver {\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\\n/**\\n * @title ERC721A\\n *\\n * @dev Implementation of the [ERC721](https://eips.ethereum.org/EIPS/eip-721)\\n * Non-Fungible Token Standard, including the Metadata extension.\\n * Optimized for lower gas during batch mints.\\n *\\n * Token IDs are minted in sequential order (e.g. 0, 1, 2, 3, ...)\\n * starting from `_startTokenId()`.\\n *\\n * Assumptions:\\n *\\n * - An owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\\n * - The maximum token ID cannot exceed 2**256 - 1 (max value of uint256).\\n */\\ncontract ERC721A is IERC721A {\\n    // Bypass for a `--via-ir` bug (https://github.com/chiru-labs/ERC721A/pull/364).\\n    struct TokenApprovalRef {\\n        address value;\\n    }\\n\\n    // =============================================================\\n    //                           CONSTANTS\\n    // =============================================================\\n\\n    // Mask of an entry in packed address data.\\n    uint256 private constant _BITMASK_ADDRESS_DATA_ENTRY = (1 << 64) - 1;\\n\\n    // The bit position of `numberMinted` in packed address data.\\n    uint256 private constant _BITPOS_NUMBER_MINTED = 64;\\n\\n    // The bit position of `numberBurned` in packed address data.\\n    uint256 private constant _BITPOS_NUMBER_BURNED = 128;\\n\\n    // The bit position of `aux` in packed address data.\\n    uint256 private constant _BITPOS_AUX = 192;\\n\\n    // Mask of all 256 bits in packed address data except the 64 bits for `aux`.\\n    uint256 private constant _BITMASK_AUX_COMPLEMENT = (1 << 192) - 1;\\n\\n    // The bit position of `startTimestamp` in packed ownership.\\n    uint256 private constant _BITPOS_START_TIMESTAMP = 160;\\n\\n    // The bit mask of the `burned` bit in packed ownership.\\n    uint256 private constant _BITMASK_BURNED = 1 << 224;\\n\\n    // The bit position of the `nextInitialized` bit in packed ownership.\\n    uint256 private constant _BITPOS_NEXT_INITIALIZED = 225;\\n\\n    // The bit mask of the `nextInitialized` bit in packed ownership.\\n    uint256 private constant _BITMASK_NEXT_INITIALIZED = 1 << 225;\\n\\n    // The bit position of `extraData` in packed ownership.\\n    uint256 private constant _BITPOS_EXTRA_DATA = 232;\\n\\n    // Mask of all 256 bits in a packed ownership except the 24 bits for `extraData`.\\n    uint256 private constant _BITMASK_EXTRA_DATA_COMPLEMENT = (1 << 232) - 1;\\n\\n    // The mask of the lower 160 bits for addresses.\\n    uint256 private constant _BITMASK_ADDRESS = (1 << 160) - 1;\\n\\n    // The maximum `quantity` that can be minted with {_mintERC2309}.\\n    // This limit is to prevent overflows on the address data entries.\\n    // For a limit of 5000, a total of 3.689e15 calls to {_mintERC2309}\\n    // is required to cause an overflow, which is unrealistic.\\n    uint256 private constant _MAX_MINT_ERC2309_QUANTITY_LIMIT = 5000;\\n\\n    // The `Transfer` event signature is given by:\\n    // `keccak256(bytes(\\\"Transfer(address,address,uint256)\\\"))`.\\n    bytes32 private constant _TRANSFER_EVENT_SIGNATURE =\\n        0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\\n\\n    // =============================================================\\n    //                            STORAGE\\n    // =============================================================\\n\\n    // The next token ID to be minted.\\n    uint256 private _currentIndex;\\n\\n    // The number of tokens burned.\\n    uint256 private _burnCounter;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to ownership details\\n    // An empty struct value does not necessarily mean the token is unowned.\\n    // See {_packedOwnershipOf} implementation for details.\\n    //\\n    // Bits Layout:\\n    // - [0..159]   `addr`\\n    // - [160..223] `startTimestamp`\\n    // - [224]      `burned`\\n    // - [225]      `nextInitialized`\\n    // - [232..255] `extraData`\\n    mapping(uint256 => uint256) private _packedOwnerships;\\n\\n    // Mapping owner address to address data.\\n    //\\n    // Bits Layout:\\n    // - [0..63]    `balance`\\n    // - [64..127]  `numberMinted`\\n    // - [128..191] `numberBurned`\\n    // - [192..255] `aux`\\n    mapping(address => uint256) private _packedAddressData;\\n\\n    // Mapping from token ID to approved address.\\n    mapping(uint256 => TokenApprovalRef) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // =============================================================\\n    //                          CONSTRUCTOR\\n    // =============================================================\\n\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _currentIndex = _startTokenId();\\n    }\\n\\n    // =============================================================\\n    //                   TOKEN COUNTING OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the starting token ID.\\n     * To change the starting token ID, please override this function.\\n     */\\n    function _startTokenId() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Returns the next token ID to be minted.\\n     */\\n    function _nextTokenId() internal view virtual returns (uint256) {\\n        return _currentIndex;\\n    }\\n\\n    /**\\n     * @dev Returns the total number of tokens in existence.\\n     * Burned tokens will reduce the count.\\n     * To get the total number of tokens minted, please see {_totalMinted}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        // Counter underflow is impossible as _burnCounter cannot be incremented\\n        // more than `_currentIndex - _startTokenId()` times.\\n        unchecked {\\n            return _currentIndex - _burnCounter - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the total amount of tokens minted in the contract.\\n     */\\n    function _totalMinted() internal view virtual returns (uint256) {\\n        // Counter underflow is impossible as `_currentIndex` does not decrement,\\n        // and it is initialized to `_startTokenId()`.\\n        unchecked {\\n            return _currentIndex - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the total number of tokens burned.\\n     */\\n    function _totalBurned() internal view virtual returns (uint256) {\\n        return _burnCounter;\\n    }\\n\\n    // =============================================================\\n    //                    ADDRESS DATA OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the number of tokens in `owner`'s account.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\\n        return _packedAddressData[owner] & _BITMASK_ADDRESS_DATA_ENTRY;\\n    }\\n\\n    /**\\n     * Returns the number of tokens minted by `owner`.\\n     */\\n    function _numberMinted(address owner) internal view returns (uint256) {\\n        return (_packedAddressData[owner] >> _BITPOS_NUMBER_MINTED) & _BITMASK_ADDRESS_DATA_ENTRY;\\n    }\\n\\n    /**\\n     * Returns the number of tokens burned by or on behalf of `owner`.\\n     */\\n    function _numberBurned(address owner) internal view returns (uint256) {\\n        return (_packedAddressData[owner] >> _BITPOS_NUMBER_BURNED) & _BITMASK_ADDRESS_DATA_ENTRY;\\n    }\\n\\n    /**\\n     * Returns the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\\n     */\\n    function _getAux(address owner) internal view returns (uint64) {\\n        return uint64(_packedAddressData[owner] >> _BITPOS_AUX);\\n    }\\n\\n    /**\\n     * Sets the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\\n     * If there are multiple variables, please pack them into a uint64.\\n     */\\n    function _setAux(address owner, uint64 aux) internal virtual {\\n        uint256 packed = _packedAddressData[owner];\\n        uint256 auxCasted;\\n        // Cast `aux` with assembly to avoid redundant masking.\\n        assembly {\\n            auxCasted := aux\\n        }\\n        packed = (packed & _BITMASK_AUX_COMPLEMENT) | (auxCasted << _BITPOS_AUX);\\n        _packedAddressData[owner] = packed;\\n    }\\n\\n    // =============================================================\\n    //                            IERC165\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        // The interface IDs are constants representing the first 4 bytes\\n        // of the XOR of all function selectors in the interface.\\n        // See: [ERC165](https://eips.ethereum.org/EIPS/eip-165)\\n        // (e.g. `bytes4(i.functionA.selector ^ i.functionB.selector ^ ...)`)\\n        return\\n            interfaceId == 0x01ffc9a7 || // ERC165 interface ID for ERC165.\\n            interfaceId == 0x80ac58cd || // ERC165 interface ID for ERC721.\\n            interfaceId == 0x5b5e139f; // ERC165 interface ID for ERC721Metadata.\\n    }\\n\\n    // =============================================================\\n    //                        IERC721Metadata\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, _toString(tokenId))) : '';\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, it can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return '';\\n    }\\n\\n    // =============================================================\\n    //                     OWNERSHIPS OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        return address(uint160(_packedOwnershipOf(tokenId)));\\n    }\\n\\n    /**\\n     * @dev Gas spent here starts off proportional to the maximum mint batch size.\\n     * It gradually moves to O(1) as tokens get transferred around over time.\\n     */\\n    function _ownershipOf(uint256 tokenId) internal view virtual returns (TokenOwnership memory) {\\n        return _unpackedOwnership(_packedOwnershipOf(tokenId));\\n    }\\n\\n    /**\\n     * @dev Returns the unpacked `TokenOwnership` struct at `index`.\\n     */\\n    function _ownershipAt(uint256 index) internal view virtual returns (TokenOwnership memory) {\\n        return _unpackedOwnership(_packedOwnerships[index]);\\n    }\\n\\n    /**\\n     * @dev Initializes the ownership slot minted at `index` for efficiency purposes.\\n     */\\n    function _initializeOwnershipAt(uint256 index) internal virtual {\\n        if (_packedOwnerships[index] == 0) {\\n            _packedOwnerships[index] = _packedOwnershipOf(index);\\n        }\\n    }\\n\\n    /**\\n     * Returns the packed ownership data of `tokenId`.\\n     */\\n    function _packedOwnershipOf(uint256 tokenId) private view returns (uint256) {\\n        uint256 curr = tokenId;\\n\\n        unchecked {\\n            if (_startTokenId() <= curr)\\n                if (curr < _currentIndex) {\\n                    uint256 packed = _packedOwnerships[curr];\\n                    // If not burned.\\n                    if (packed & _BITMASK_BURNED == 0) {\\n                        // Invariant:\\n                        // There will always be an initialized ownership slot\\n                        // (i.e. `ownership.addr != address(0) && ownership.burned == false`)\\n                        // before an unintialized ownership slot\\n                        // (i.e. `ownership.addr == address(0) && ownership.burned == false`)\\n                        // Hence, `curr` will not underflow.\\n                        //\\n                        // We can directly compare the packed value.\\n                        // If the address is zero, packed will be zero.\\n                        while (packed == 0) {\\n                            packed = _packedOwnerships[--curr];\\n                        }\\n                        return packed;\\n                    }\\n                }\\n        }\\n        revert OwnerQueryForNonexistentToken();\\n    }\\n\\n    /**\\n     * @dev Returns the unpacked `TokenOwnership` struct from `packed`.\\n     */\\n    function _unpackedOwnership(uint256 packed) private pure returns (TokenOwnership memory ownership) {\\n        ownership.addr = address(uint160(packed));\\n        ownership.startTimestamp = uint64(packed >> _BITPOS_START_TIMESTAMP);\\n        ownership.burned = packed & _BITMASK_BURNED != 0;\\n        ownership.extraData = uint24(packed >> _BITPOS_EXTRA_DATA);\\n    }\\n\\n    /**\\n     * @dev Packs ownership data into a single uint256.\\n     */\\n    function _packOwnershipData(address owner, uint256 flags) private view returns (uint256 result) {\\n        assembly {\\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n            owner := and(owner, _BITMASK_ADDRESS)\\n            // `owner | (block.timestamp << _BITPOS_START_TIMESTAMP) | flags`.\\n            result := or(owner, or(shl(_BITPOS_START_TIMESTAMP, timestamp()), flags))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the `nextInitialized` flag set if `quantity` equals 1.\\n     */\\n    function _nextInitializedFlag(uint256 quantity) private pure returns (uint256 result) {\\n        // For branchless setting of the `nextInitialized` flag.\\n        assembly {\\n            // `(quantity == 1) << _BITPOS_NEXT_INITIALIZED`.\\n            result := shl(_BITPOS_NEXT_INITIALIZED, eq(quantity, 1))\\n        }\\n    }\\n\\n    // =============================================================\\n    //                      APPROVAL OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the\\n     * zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) public payable virtual override {\\n        address owner = ownerOf(tokenId);\\n\\n        if (_msgSenderERC721A() != owner)\\n            if (!isApprovedForAll(owner, _msgSenderERC721A())) {\\n                revert ApprovalCallerNotOwnerNorApproved();\\n            }\\n\\n        _tokenApprovals[tokenId].value = to;\\n        emit Approval(owner, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\\n\\n        return _tokenApprovals[tokenId].value;\\n    }\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom}\\n     * for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _operatorApprovals[_msgSenderERC721A()][operator] = approved;\\n        emit ApprovalForAll(_msgSenderERC721A(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted. See {_mint}.\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            _startTokenId() <= tokenId &&\\n            tokenId < _currentIndex && // If within bounds,\\n            _packedOwnerships[tokenId] & _BITMASK_BURNED == 0; // and not burned.\\n    }\\n\\n    /**\\n     * @dev Returns whether `msgSender` is equal to `approvedAddress` or `owner`.\\n     */\\n    function _isSenderApprovedOrOwner(\\n        address approvedAddress,\\n        address owner,\\n        address msgSender\\n    ) private pure returns (bool result) {\\n        assembly {\\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n            owner := and(owner, _BITMASK_ADDRESS)\\n            // Mask `msgSender` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n            msgSender := and(msgSender, _BITMASK_ADDRESS)\\n            // `msgSender == owner || msgSender == approvedAddress`.\\n            result := or(eq(msgSender, owner), eq(msgSender, approvedAddress))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the storage slot and value for the approved address of `tokenId`.\\n     */\\n    function _getApprovedSlotAndAddress(uint256 tokenId)\\n        private\\n        view\\n        returns (uint256 approvedAddressSlot, address approvedAddress)\\n    {\\n        TokenApprovalRef storage tokenApproval = _tokenApprovals[tokenId];\\n        // The following is equivalent to `approvedAddress = _tokenApprovals[tokenId].value`.\\n        assembly {\\n            approvedAddressSlot := tokenApproval.slot\\n            approvedAddress := sload(approvedAddressSlot)\\n        }\\n    }\\n\\n    // =============================================================\\n    //                      TRANSFER OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token\\n     * by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public payable virtual override {\\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\\n\\n        if (address(uint160(prevOwnershipPacked)) != from) revert TransferFromIncorrectOwner();\\n\\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(tokenId);\\n\\n        // The nested ifs save around 20+ gas over a compound boolean condition.\\n        if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A()))\\n            if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();\\n\\n        if (to == address(0)) revert TransferToZeroAddress();\\n\\n        _beforeTokenTransfers(from, to, tokenId, 1);\\n\\n        // Clear approvals from the previous owner.\\n        assembly {\\n            if approvedAddress {\\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\\n                sstore(approvedAddressSlot, 0)\\n            }\\n        }\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\\n        unchecked {\\n            // We can directly increment and decrement the balances.\\n            --_packedAddressData[from]; // Updates: `balance -= 1`.\\n            ++_packedAddressData[to]; // Updates: `balance += 1`.\\n\\n            // Updates:\\n            // - `address` to the next owner.\\n            // - `startTimestamp` to the timestamp of transfering.\\n            // - `burned` to `false`.\\n            // - `nextInitialized` to `true`.\\n            _packedOwnerships[tokenId] = _packOwnershipData(\\n                to,\\n                _BITMASK_NEXT_INITIALIZED | _nextExtraData(from, to, prevOwnershipPacked)\\n            );\\n\\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\\n            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\\n                uint256 nextTokenId = tokenId + 1;\\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\\n                if (_packedOwnerships[nextTokenId] == 0) {\\n                    // If the next slot is within bounds.\\n                    if (nextTokenId != _currentIndex) {\\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\\n                    }\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, to, tokenId);\\n        _afterTokenTransfers(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public payable virtual override {\\n        safeTransferFrom(from, to, tokenId, '');\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token\\n     * by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement\\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public payable virtual override {\\n        transferFrom(from, to, tokenId);\\n        if (to.code.length != 0)\\n            if (!_checkContractOnERC721Received(from, to, tokenId, _data)) {\\n                revert TransferToNonERC721ReceiverImplementer();\\n            }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before a set of serially-ordered token IDs\\n     * are about to be transferred. This includes minting.\\n     * And also called before burning one token.\\n     *\\n     * `startTokenId` - the first token ID to be transferred.\\n     * `quantity` - the amount to be transferred.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _beforeTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after a set of serially-ordered token IDs\\n     * have been transferred. This includes minting.\\n     * And also called after one token has been burned.\\n     *\\n     * `startTokenId` - the first token ID to be transferred.\\n     * `quantity` - the amount to be transferred.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` has been minted for `to`.\\n     * - When `to` is zero, `tokenId` has been burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _afterTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target contract.\\n     *\\n     * `from` - Previous owner of the given token ID.\\n     * `to` - Target address that will receive the token.\\n     * `tokenId` - Token ID to be transferred.\\n     * `_data` - Optional data to send along with the call.\\n     *\\n     * Returns whether the call correctly returned the expected magic value.\\n     */\\n    function _checkContractOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        try ERC721A__IERC721Receiver(to).onERC721Received(_msgSenderERC721A(), from, tokenId, _data) returns (\\n            bytes4 retval\\n        ) {\\n            return retval == ERC721A__IERC721Receiver(to).onERC721Received.selector;\\n        } catch (bytes memory reason) {\\n            if (reason.length == 0) {\\n                revert TransferToNonERC721ReceiverImplementer();\\n            } else {\\n                assembly {\\n                    revert(add(32, reason), mload(reason))\\n                }\\n            }\\n        }\\n    }\\n\\n    // =============================================================\\n    //                        MINT OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {Transfer} event for each mint.\\n     */\\n    function _mint(address to, uint256 quantity) internal virtual {\\n        uint256 startTokenId = _currentIndex;\\n        if (quantity == 0) revert MintZeroQuantity();\\n\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n        // Overflows are incredibly unrealistic.\\n        // `balance` and `numberMinted` have a maximum limit of 2**64.\\n        // `tokenId` has a maximum limit of 2**256.\\n        unchecked {\\n            // Updates:\\n            // - `balance += quantity`.\\n            // - `numberMinted += quantity`.\\n            //\\n            // We can directly add to the `balance` and `numberMinted`.\\n            _packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);\\n\\n            // Updates:\\n            // - `address` to the owner.\\n            // - `startTimestamp` to the timestamp of minting.\\n            // - `burned` to `false`.\\n            // - `nextInitialized` to `quantity == 1`.\\n            _packedOwnerships[startTokenId] = _packOwnershipData(\\n                to,\\n                _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\\n            );\\n\\n            uint256 toMasked;\\n            uint256 end = startTokenId + quantity;\\n\\n            // Use assembly to loop and emit the `Transfer` event for gas savings.\\n            // The duplicated `log4` removes an extra check and reduces stack juggling.\\n            // The assembly, together with the surrounding Solidity code, have been\\n            // delicately arranged to nudge the compiler into producing optimized opcodes.\\n            assembly {\\n                // Mask `to` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n                toMasked := and(to, _BITMASK_ADDRESS)\\n                // Emit the `Transfer` event.\\n                log4(\\n                    0, // Start of data (0, since no data).\\n                    0, // End of data (0, since no data).\\n                    _TRANSFER_EVENT_SIGNATURE, // Signature.\\n                    0, // `address(0)`.\\n                    toMasked, // `to`.\\n                    startTokenId // `tokenId`.\\n                )\\n\\n                // The `iszero(eq(,))` check ensures that large values of `quantity`\\n                // that overflows uint256 will make the loop run out of gas.\\n                // The compiler will optimize the `iszero` away for performance.\\n                for {\\n                    let tokenId := add(startTokenId, 1)\\n                } iszero(eq(tokenId, end)) {\\n                    tokenId := add(tokenId, 1)\\n                } {\\n                    // Emit the `Transfer` event. Similar to above.\\n                    log4(0, 0, _TRANSFER_EVENT_SIGNATURE, 0, toMasked, tokenId)\\n                }\\n            }\\n            if (toMasked == 0) revert MintToZeroAddress();\\n\\n            _currentIndex = end;\\n        }\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * This function is intended for efficient minting only during contract creation.\\n     *\\n     * It emits only one {ConsecutiveTransfer} as defined in\\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309),\\n     * instead of a sequence of {Transfer} event(s).\\n     *\\n     * Calling this function outside of contract creation WILL make your contract\\n     * non-compliant with the ERC721 standard.\\n     * For full ERC721 compliance, substituting ERC721 {Transfer} event(s) with the ERC2309\\n     * {ConsecutiveTransfer} event is only permissible during contract creation.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {ConsecutiveTransfer} event.\\n     */\\n    function _mintERC2309(address to, uint256 quantity) internal virtual {\\n        uint256 startTokenId = _currentIndex;\\n        if (to == address(0)) revert MintToZeroAddress();\\n        if (quantity == 0) revert MintZeroQuantity();\\n        if (quantity > _MAX_MINT_ERC2309_QUANTITY_LIMIT) revert MintERC2309QuantityExceedsLimit();\\n\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n        // Overflows are unrealistic due to the above check for `quantity` to be below the limit.\\n        unchecked {\\n            // Updates:\\n            // - `balance += quantity`.\\n            // - `numberMinted += quantity`.\\n            //\\n            // We can directly add to the `balance` and `numberMinted`.\\n            _packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);\\n\\n            // Updates:\\n            // - `address` to the owner.\\n            // - `startTimestamp` to the timestamp of minting.\\n            // - `burned` to `false`.\\n            // - `nextInitialized` to `quantity == 1`.\\n            _packedOwnerships[startTokenId] = _packOwnershipData(\\n                to,\\n                _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\\n            );\\n\\n            emit ConsecutiveTransfer(startTokenId, startTokenId + quantity - 1, address(0), to);\\n\\n            _currentIndex = startTokenId + quantity;\\n        }\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement\\n     * {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * See {_mint}.\\n     *\\n     * Emits a {Transfer} event for each mint.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 quantity,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, quantity);\\n\\n        unchecked {\\n            if (to.code.length != 0) {\\n                uint256 end = _currentIndex;\\n                uint256 index = end - quantity;\\n                do {\\n                    if (!_checkContractOnERC721Received(address(0), to, index++, _data)) {\\n                        revert TransferToNonERC721ReceiverImplementer();\\n                    }\\n                } while (index < end);\\n                // Reentrancy protection.\\n                if (_currentIndex != end) revert();\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Equivalent to `_safeMint(to, quantity, '')`.\\n     */\\n    function _safeMint(address to, uint256 quantity) internal virtual {\\n        _safeMint(to, quantity, '');\\n    }\\n\\n    // =============================================================\\n    //                        BURN OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Equivalent to `_burn(tokenId, false)`.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        _burn(tokenId, false);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId, bool approvalCheck) internal virtual {\\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\\n\\n        address from = address(uint160(prevOwnershipPacked));\\n\\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(tokenId);\\n\\n        if (approvalCheck) {\\n            // The nested ifs save around 20+ gas over a compound boolean condition.\\n            if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A()))\\n                if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();\\n        }\\n\\n        _beforeTokenTransfers(from, address(0), tokenId, 1);\\n\\n        // Clear approvals from the previous owner.\\n        assembly {\\n            if approvedAddress {\\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\\n                sstore(approvedAddressSlot, 0)\\n            }\\n        }\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\\n        unchecked {\\n            // Updates:\\n            // - `balance -= 1`.\\n            // - `numberBurned += 1`.\\n            //\\n            // We can directly decrement the balance, and increment the number burned.\\n            // This is equivalent to `packed -= 1; packed += 1 << _BITPOS_NUMBER_BURNED;`.\\n            _packedAddressData[from] += (1 << _BITPOS_NUMBER_BURNED) - 1;\\n\\n            // Updates:\\n            // - `address` to the last owner.\\n            // - `startTimestamp` to the timestamp of burning.\\n            // - `burned` to `true`.\\n            // - `nextInitialized` to `true`.\\n            _packedOwnerships[tokenId] = _packOwnershipData(\\n                from,\\n                (_BITMASK_BURNED | _BITMASK_NEXT_INITIALIZED) | _nextExtraData(from, address(0), prevOwnershipPacked)\\n            );\\n\\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\\n            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\\n                uint256 nextTokenId = tokenId + 1;\\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\\n                if (_packedOwnerships[nextTokenId] == 0) {\\n                    // If the next slot is within bounds.\\n                    if (nextTokenId != _currentIndex) {\\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\\n                    }\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, address(0), tokenId);\\n        _afterTokenTransfers(from, address(0), tokenId, 1);\\n\\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\\n        unchecked {\\n            _burnCounter++;\\n        }\\n    }\\n\\n    // =============================================================\\n    //                     EXTRA DATA OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Directly sets the extra data for the ownership data `index`.\\n     */\\n    function _setExtraDataAt(uint256 index, uint24 extraData) internal virtual {\\n        uint256 packed = _packedOwnerships[index];\\n        if (packed == 0) revert OwnershipNotInitializedForExtraData();\\n        uint256 extraDataCasted;\\n        // Cast `extraData` with assembly to avoid redundant masking.\\n        assembly {\\n            extraDataCasted := extraData\\n        }\\n        packed = (packed & _BITMASK_EXTRA_DATA_COMPLEMENT) | (extraDataCasted << _BITPOS_EXTRA_DATA);\\n        _packedOwnerships[index] = packed;\\n    }\\n\\n    /**\\n     * @dev Called during each token transfer to set the 24bit `extraData` field.\\n     * Intended to be overridden by the cosumer contract.\\n     *\\n     * `previousExtraData` - the value of `extraData` before transfer.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _extraData(\\n        address from,\\n        address to,\\n        uint24 previousExtraData\\n    ) internal view virtual returns (uint24) {}\\n\\n    /**\\n     * @dev Returns the next extra data for the packed ownership data.\\n     * The returned result is shifted into position.\\n     */\\n    function _nextExtraData(\\n        address from,\\n        address to,\\n        uint256 prevOwnershipPacked\\n    ) private view returns (uint256) {\\n        uint24 extraData = uint24(prevOwnershipPacked >> _BITPOS_EXTRA_DATA);\\n        return uint256(_extraData(from, to, extraData)) << _BITPOS_EXTRA_DATA;\\n    }\\n\\n    // =============================================================\\n    //                       OTHER OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the message sender (defaults to `msg.sender`).\\n     *\\n     * If you are writing GSN compatible contracts, you need to override this function.\\n     */\\n    function _msgSenderERC721A() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    /**\\n     * @dev Converts a uint256 to its ASCII string decimal representation.\\n     */\\n    function _toString(uint256 value) internal pure virtual returns (string memory str) {\\n        assembly {\\n            // The maximum value of a uint256 contains 78 digits (1 byte per digit), but\\n            // we allocate 0xa0 bytes to keep the free memory pointer 32-byte word aligned.\\n            // We will need 1 word for the trailing zeros padding, 1 word for the length,\\n            // and 3 words for a maximum of 78 digits. Total: 5 * 0x20 = 0xa0.\\n            let m := add(mload(0x40), 0xa0)\\n            // Update the free memory pointer to allocate.\\n            mstore(0x40, m)\\n            // Assign the `str` to the end.\\n            str := sub(m, 0x20)\\n            // Zeroize the slot after the string.\\n            mstore(str, 0)\\n\\n            // Cache the end of the memory to calculate the length later.\\n            let end := str\\n\\n            // We write the string from rightmost digit to leftmost digit.\\n            // The following is essentially a do-while loop that also handles the zero case.\\n            // prettier-ignore\\n            for { let temp := value } 1 {} {\\n                str := sub(str, 1)\\n                // Write the character to the pointer.\\n                // The ASCII index of the '0' character is 48.\\n                mstore8(str, add(48, mod(temp, 10)))\\n                // Keep dividing `temp` until zero.\\n                temp := div(temp, 10)\\n                // prettier-ignore\\n                if iszero(temp) { break }\\n            }\\n\\n            let length := sub(end, str)\\n            // Move the pointer 32 bytes leftwards to make room for the length.\\n            str := sub(str, 0x20)\\n            // Store the length.\\n            mstore(str, length)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x23116c16976b7d8c0c714ba1b38ae6b16c16fc90ec69b568fb1ebf1bc063e01c\",\"license\":\"MIT\"},\"erc721a/contracts/IERC721A.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.2.3\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Interface of ERC721A.\\n */\\ninterface IERC721A {\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error ApprovalCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error ApprovalQueryForNonexistentToken();\\n\\n    /**\\n     * Cannot query the balance for the zero address.\\n     */\\n    error BalanceQueryForZeroAddress();\\n\\n    /**\\n     * Cannot mint to the zero address.\\n     */\\n    error MintToZeroAddress();\\n\\n    /**\\n     * The quantity of tokens minted must be more than zero.\\n     */\\n    error MintZeroQuantity();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error OwnerQueryForNonexistentToken();\\n\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error TransferCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token must be owned by `from`.\\n     */\\n    error TransferFromIncorrectOwner();\\n\\n    /**\\n     * Cannot safely transfer to a contract that does not implement the\\n     * ERC721Receiver interface.\\n     */\\n    error TransferToNonERC721ReceiverImplementer();\\n\\n    /**\\n     * Cannot transfer to the zero address.\\n     */\\n    error TransferToZeroAddress();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error URIQueryForNonexistentToken();\\n\\n    /**\\n     * The `quantity` minted with ERC2309 exceeds the safety limit.\\n     */\\n    error MintERC2309QuantityExceedsLimit();\\n\\n    /**\\n     * The `extraData` cannot be set on an unintialized ownership slot.\\n     */\\n    error OwnershipNotInitializedForExtraData();\\n\\n    // =============================================================\\n    //                            STRUCTS\\n    // =============================================================\\n\\n    struct TokenOwnership {\\n        // The address of the owner.\\n        address addr;\\n        // Stores the start time of ownership with minimal overhead for tokenomics.\\n        uint64 startTimestamp;\\n        // Whether the token has been burned.\\n        bool burned;\\n        // Arbitrary data similar to `startTimestamp` that can be set via {_extraData}.\\n        uint24 extraData;\\n    }\\n\\n    // =============================================================\\n    //                         TOKEN COUNTERS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the total number of tokens in existence.\\n     * Burned tokens will reduce the count.\\n     * To get the total number of tokens minted, please see {_totalMinted}.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    // =============================================================\\n    //                            IERC165\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n\\n    // =============================================================\\n    //                            IERC721\\n    // =============================================================\\n\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables\\n     * (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in `owner`'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`,\\n     * checking first that contract recipients are aware of the ERC721 protocol\\n     * to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move\\n     * this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement\\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external payable;\\n\\n    /**\\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom}\\n     * whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token\\n     * by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the\\n     * zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external payable;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom}\\n     * for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    // =============================================================\\n    //                        IERC721Metadata\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n\\n    // =============================================================\\n    //                           IERC2309\\n    // =============================================================\\n\\n    /**\\n     * @dev Emitted when tokens in `fromTokenId` to `toTokenId`\\n     * (inclusive) is transferred from `from` to `to`, as defined in the\\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309) standard.\\n     *\\n     * See {_mintERC2309} for more details.\\n     */\\n    event ConsecutiveTransfer(uint256 indexed fromTokenId, uint256 toTokenId, address indexed from, address indexed to);\\n}\\n\",\"keccak256\":\"0xa31dfe2635a25f899e279befef27ffcc02fd16e636c58d4c251a303f2355f7ad\",\"license\":\"MIT\"},\"erc721a/contracts/extensions/ERC721AQueryable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.2.3\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport './IERC721AQueryable.sol';\\nimport '../ERC721A.sol';\\n\\n/**\\n * @title ERC721AQueryable.\\n *\\n * @dev ERC721A subclass with convenience query functions.\\n */\\nabstract contract ERC721AQueryable is ERC721A, IERC721AQueryable {\\n    /**\\n     * @dev Returns the `TokenOwnership` struct at `tokenId` without reverting.\\n     *\\n     * If the `tokenId` is out of bounds:\\n     *\\n     * - `addr = address(0)`\\n     * - `startTimestamp = 0`\\n     * - `burned = false`\\n     * - `extraData = 0`\\n     *\\n     * If the `tokenId` is burned:\\n     *\\n     * - `addr = <Address of owner before token was burned>`\\n     * - `startTimestamp = <Timestamp when token was burned>`\\n     * - `burned = true`\\n     * - `extraData = <Extra data when token was burned>`\\n     *\\n     * Otherwise:\\n     *\\n     * - `addr = <Address of owner>`\\n     * - `startTimestamp = <Timestamp of start of ownership>`\\n     * - `burned = false`\\n     * - `extraData = <Extra data at start of ownership>`\\n     */\\n    function explicitOwnershipOf(uint256 tokenId) public view virtual override returns (TokenOwnership memory) {\\n        TokenOwnership memory ownership;\\n        if (tokenId < _startTokenId() || tokenId >= _nextTokenId()) {\\n            return ownership;\\n        }\\n        ownership = _ownershipAt(tokenId);\\n        if (ownership.burned) {\\n            return ownership;\\n        }\\n        return _ownershipOf(tokenId);\\n    }\\n\\n    /**\\n     * @dev Returns an array of `TokenOwnership` structs at `tokenIds` in order.\\n     * See {ERC721AQueryable-explicitOwnershipOf}\\n     */\\n    function explicitOwnershipsOf(uint256[] calldata tokenIds)\\n        external\\n        view\\n        virtual\\n        override\\n        returns (TokenOwnership[] memory)\\n    {\\n        unchecked {\\n            uint256 tokenIdsLength = tokenIds.length;\\n            TokenOwnership[] memory ownerships = new TokenOwnership[](tokenIdsLength);\\n            for (uint256 i; i != tokenIdsLength; ++i) {\\n                ownerships[i] = explicitOwnershipOf(tokenIds[i]);\\n            }\\n            return ownerships;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an array of token IDs owned by `owner`,\\n     * in the range [`start`, `stop`)\\n     * (i.e. `start <= tokenId < stop`).\\n     *\\n     * This function allows for tokens to be queried if the collection\\n     * grows too big for a single call of {ERC721AQueryable-tokensOfOwner}.\\n     *\\n     * Requirements:\\n     *\\n     * - `start < stop`\\n     */\\n    function tokensOfOwnerIn(\\n        address owner,\\n        uint256 start,\\n        uint256 stop\\n    ) external view virtual override returns (uint256[] memory) {\\n        unchecked {\\n            if (start >= stop) revert InvalidQueryRange();\\n            uint256 tokenIdsIdx;\\n            uint256 stopLimit = _nextTokenId();\\n            // Set `start = max(start, _startTokenId())`.\\n            if (start < _startTokenId()) {\\n                start = _startTokenId();\\n            }\\n            // Set `stop = min(stop, stopLimit)`.\\n            if (stop > stopLimit) {\\n                stop = stopLimit;\\n            }\\n            uint256 tokenIdsMaxLength = balanceOf(owner);\\n            // Set `tokenIdsMaxLength = min(balanceOf(owner), stop - start)`,\\n            // to cater for cases where `balanceOf(owner)` is too big.\\n            if (start < stop) {\\n                uint256 rangeLength = stop - start;\\n                if (rangeLength < tokenIdsMaxLength) {\\n                    tokenIdsMaxLength = rangeLength;\\n                }\\n            } else {\\n                tokenIdsMaxLength = 0;\\n            }\\n            uint256[] memory tokenIds = new uint256[](tokenIdsMaxLength);\\n            if (tokenIdsMaxLength == 0) {\\n                return tokenIds;\\n            }\\n            // We need to call `explicitOwnershipOf(start)`,\\n            // because the slot at `start` may not be initialized.\\n            TokenOwnership memory ownership = explicitOwnershipOf(start);\\n            address currOwnershipAddr;\\n            // If the starting slot exists (i.e. not burned), initialize `currOwnershipAddr`.\\n            // `ownership.address` will not be zero, as `start` is clamped to the valid token ID range.\\n            if (!ownership.burned) {\\n                currOwnershipAddr = ownership.addr;\\n            }\\n            for (uint256 i = start; i != stop && tokenIdsIdx != tokenIdsMaxLength; ++i) {\\n                ownership = _ownershipAt(i);\\n                if (ownership.burned) {\\n                    continue;\\n                }\\n                if (ownership.addr != address(0)) {\\n                    currOwnershipAddr = ownership.addr;\\n                }\\n                if (currOwnershipAddr == owner) {\\n                    tokenIds[tokenIdsIdx++] = i;\\n                }\\n            }\\n            // Downsize the array to fit.\\n            assembly {\\n                mstore(tokenIds, tokenIdsIdx)\\n            }\\n            return tokenIds;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an array of token IDs owned by `owner`.\\n     *\\n     * This function scans the ownership mapping and is O(`totalSupply`) in complexity.\\n     * It is meant to be called off-chain.\\n     *\\n     * See {ERC721AQueryable-tokensOfOwnerIn} for splitting the scan into\\n     * multiple smaller scans if the collection is large enough to cause\\n     * an out-of-gas error (10K collections should be fine).\\n     */\\n    function tokensOfOwner(address owner) external view virtual override returns (uint256[] memory) {\\n        unchecked {\\n            uint256 tokenIdsIdx;\\n            address currOwnershipAddr;\\n            uint256 tokenIdsLength = balanceOf(owner);\\n            uint256[] memory tokenIds = new uint256[](tokenIdsLength);\\n            TokenOwnership memory ownership;\\n            for (uint256 i = _startTokenId(); tokenIdsIdx != tokenIdsLength; ++i) {\\n                ownership = _ownershipAt(i);\\n                if (ownership.burned) {\\n                    continue;\\n                }\\n                if (ownership.addr != address(0)) {\\n                    currOwnershipAddr = ownership.addr;\\n                }\\n                if (currOwnershipAddr == owner) {\\n                    tokenIds[tokenIdsIdx++] = i;\\n                }\\n            }\\n            return tokenIds;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xad83a36e9758f044317e9a5e2903bc49730b6d5de8fbe9a61b2f91fb4c2148c7\",\"license\":\"MIT\"},\"erc721a/contracts/extensions/IERC721AQueryable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.2.3\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport '../IERC721A.sol';\\n\\n/**\\n * @dev Interface of ERC721AQueryable.\\n */\\ninterface IERC721AQueryable is IERC721A {\\n    /**\\n     * Invalid query range (`start` >= `stop`).\\n     */\\n    error InvalidQueryRange();\\n\\n    /**\\n     * @dev Returns the `TokenOwnership` struct at `tokenId` without reverting.\\n     *\\n     * If the `tokenId` is out of bounds:\\n     *\\n     * - `addr = address(0)`\\n     * - `startTimestamp = 0`\\n     * - `burned = false`\\n     * - `extraData = 0`\\n     *\\n     * If the `tokenId` is burned:\\n     *\\n     * - `addr = <Address of owner before token was burned>`\\n     * - `startTimestamp = <Timestamp when token was burned>`\\n     * - `burned = true`\\n     * - `extraData = <Extra data when token was burned>`\\n     *\\n     * Otherwise:\\n     *\\n     * - `addr = <Address of owner>`\\n     * - `startTimestamp = <Timestamp of start of ownership>`\\n     * - `burned = false`\\n     * - `extraData = <Extra data at start of ownership>`\\n     */\\n    function explicitOwnershipOf(uint256 tokenId) external view returns (TokenOwnership memory);\\n\\n    /**\\n     * @dev Returns an array of `TokenOwnership` structs at `tokenIds` in order.\\n     * See {ERC721AQueryable-explicitOwnershipOf}\\n     */\\n    function explicitOwnershipsOf(uint256[] memory tokenIds) external view returns (TokenOwnership[] memory);\\n\\n    /**\\n     * @dev Returns an array of token IDs owned by `owner`,\\n     * in the range [`start`, `stop`)\\n     * (i.e. `start <= tokenId < stop`).\\n     *\\n     * This function allows for tokens to be queried if the collection\\n     * grows too big for a single call of {ERC721AQueryable-tokensOfOwner}.\\n     *\\n     * Requirements:\\n     *\\n     * - `start < stop`\\n     */\\n    function tokensOfOwnerIn(\\n        address owner,\\n        uint256 start,\\n        uint256 stop\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Returns an array of token IDs owned by `owner`.\\n     *\\n     * This function scans the ownership mapping and is O(`totalSupply`) in complexity.\\n     * It is meant to be called off-chain.\\n     *\\n     * See {ERC721AQueryable-tokensOfOwnerIn} for splitting the scan into\\n     * multiple smaller scans if the collection is large enough to cause\\n     * an out-of-gas error (10K collections should be fine).\\n     */\\n    function tokensOfOwner(address owner) external view returns (uint256[] memory);\\n}\\n\",\"keccak256\":\"0xc14fc938aecdccee7edbd3a3ce60b6171cdc3da3345cfa6d288c268983c48942\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052346200006b5760806200511c8038038091620000208262000086565b8339126200006b576080516001600160a01b03811681036200006b5760a05160c05160e0519182151583036200006b576200005b936200019f565b604051612eb69081620021048239f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b6080601f91909101601f19168101906001600160401b03821190821017620000ad57604052565b62000070565b6001600160401b038111620000ad57604052565b604081019081106001600160401b03821117620000ad57604052565b606081019081106001600160401b03821117620000ad57604052565b602081019081106001600160401b03821117620000ad57604052565b601f909101601f19168101906001600160401b03821190821017620000ad57604052565b604051906200014e82620000c7565b60078252661391951c9bdd5d60ca1b6020830152565b604051906200017382620000c7565b6005825264151493d55560da1b6020830152565b60009103126200006b57565b6040513d6000823e3d90fd5b620001d39291620001c9620001ce92620001b86200013f565b620001c262000164565b91620002d5565b600b55565b600c55565b620001da57565b620001e462000957565b620001ee62000a8f565b620001f862000bad565b6200020262000ccb565b6200020c62000de9565b6200021662000f07565b6200022062001025565b6200022a62001143565b620002346200127a565b6200023e62001398565b62000248620014b6565b62000252620015d4565b6200025c620016f2565b6200026662001825565b6200027062001958565b6200027a62001825565b6009546001600160a01b0316803b156200006b5760008091600460405180948193631133eb1360e31b83525af18015620002cf57620002b65750565b80620002c6620002cd92620000b3565b8062000187565b565b62000193565b91620002e062000800565b825190926001600160401b038211620000ad576200030b82620003056002546200042a565b62000467565b60209081601f84116001146200038e57509282620002cd96959362000353936200037c9660009262000382575b50508160011b916000199060031b1c19161760025562000519565b6200035e6001600055565b620003693362000881565b6008805460ff60a01b1916905562000706565b6200060c565b01519050388062000338565b60026000529190601f1984167f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace936000905b828210620004115750509362000353936200037c969360019383620002cd9b9a9810620003f7575b505050811b0160025562000519565b015160001960f88460031b161c19169055388080620003e8565b80600186978294978701518155019601940190620003c0565b90600182811c921680156200045c575b60208310146200044657565b634e487b7160e01b600052602260045260246000fd5b91607f16916200043a565b601f811162000474575050565b6000906002825260208220906020601f850160051c83019410620004b5575b601f0160051c01915b828110620004a957505050565b8181556001016200049c565b909250829062000493565b601f8111620004cd575050565b6000906003825260208220906020601f850160051c830194106200050e575b601f0160051c01915b8281106200050257505050565b818155600101620004f5565b9092508290620004ec565b80519091906001600160401b038111620000ad5762000545816200053f6003546200042a565b620004c0565b602080601f831160011462000584575081929360009262000578575b50508160011b916000199060031b1c191617600355565b01519050388062000561565b6003600052601f198316949091907fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b926000905b878210620005f3575050836001959610620005d9575b505050811b01600355565b015160001960f88460031b161c19169055388080620005ce565b80600185968294968601518155019501930190620005b8565b6200061781620008ca565b80620006f3575b8062000688575b6200067657600a80546001600160a01b0319166001600160a01b0390921691821790556040519081527f5041ed14511e2a28b160ee5bf9eeb9b93e4759285a91383d3b7500179a64809190602090a1565b60405163df61025d60e01b8152600490fd5b5060206000604051828101906301ffc9a760e01b8252634e22db3760e11b602482015260248152620006ba81620000e3565b519084617530fa6000513d82620006e6575b5081620006db575b5062000625565b9050151538620006d4565b60201115915038620006cc565b50620006ff8162000925565b156200061e565b6200071181620008ca565b80620007ed575b8062000782575b6200077057600980546001600160a01b0319166001600160a01b0390921691821790556040519081527fa1aa4d60fb784cbf55501f9d7ee58929d85455763666d5aeebe93ae500c6cd3590602090a1565b60405163a304e33f60e01b8152600490fd5b5060206000604051828101906301ffc9a760e01b8252632685120760e21b602482015260248152620007b481620000e3565b519084617530fa6000513d82620007e0575b5081620007d5575b506200071f565b9050151538620007ce565b60201115915038620007c6565b50620007f98162000925565b1562000718565b615aff46146200086957610539461480156200085d575b6200082157600090565b6040516101428082016001600160401b03811183821017620000ad57829162004fba833903906000f08015620002cf576001600160a01b031690565b50617a69461462000817565b73ada897c101918d24d2c424007dde5ae937dcc02f90565b600880546001600160a01b039283166001600160a01b0319821681179092559091167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3565b6000602091604051838101906301ffc9a760e01b808352602482015260248152620008f581620000e3565b5191617530fa6000513d8262000918575b508162000911575090565b9050151590565b6020111591503862000906565b6000602091604051838101906301ffc9a760e01b825263ffffffff60e01b602482015260248152620008f581620000e3565b604080516200096681620000ff565b600080825280547f39055f4d349408b2a13e070167ad7f3c9b4d85e406c5b7008488a22b0c4e0ad680546824000000000000002401905580825260046020526040822091939092909173a885b1f77e4185f98b4d4dbe752b212b18b5d551904260a01b821790556024840193600080516020620050fc83398151915291818188858180a4600192838084015b88810362000a7f575050508587553b62000a0f575b505050505050565b9080805b62000a34575b505050505081540362000a3157808080808062000a07565b80fd5b1562000a70575b8562000a5362000a4f858486019562001b57565b1590565b62000a5f578162000a13565b84516368d2bf6b60e11b8152600490fd5b84821062000a3b578062000a19565b80848b858180a4018490620009f2565b6040805162000a9e81620000ff565b600080825280547f8317322cec822f870672cc8cead77936d6ebc3818a3333f0d8353f457b10024a80546819000000000000001901905580825260046020526040822091939092909173f29ac257c03cba76da7d3c4a34f2ca14b563260d904260a01b821790556019840193600080516020620050fc83398151915291818188858180a4600192838084015b88810362000b9d575050508587553b62000b4657505050505050565b9080805b62000b6757505050505081540362000a3157808080808062000a07565b1562000b8e575b8562000b8262000a4f858486019562001c17565b62000a5f578162000b4a565b84821062000b6e578062000a19565b80848b858180a401849062000b2a565b6040805162000bbc81620000ff565b600080825280547f929963f08634d4662481489e211d777da857d7ee32af7404e05e0a19af0fd3c080546817000000000000001701905580825260046020526040822091939092909173ed03ea9c96ec39097548256e428a163e5f524e47904260a01b821790556017840193600080516020620050fc83398151915291818188858180a4600192838084015b88810362000cbb575050508587553b62000c6457505050505050565b9080805b62000c8557505050505081540362000a3157808080808062000a07565b1562000cac575b8562000ca062000a4f858486019562001c71565b62000a5f578162000c68565b84821062000c8c578062000a19565b80848b858180a401849062000c48565b6040805162000cda81620000ff565b600080825280547fd6743412165899e91abf2325f6ba995adbae93841fb2071edf06b80abb66b9398054680c000000000000000c01905580825260046020526040822091939092909173bd34678c8e17d4d6f221b4cb912d79c3443f8034904260a01b82179055600c840193600080516020620050fc83398151915291818188858180a4600192838084015b88810362000dd9575050508587553b62000d8257505050505050565b9080805b62000da357505050505081540362000a3157808080808062000a07565b1562000dca575b8562000dbe62000a4f858486019562001ccb565b62000a5f578162000d86565b84821062000daa578062000a19565b80848b858180a401849062000d66565b6040805162000df881620000ff565b600080825280547f0c7b5aa6de72a08ba93e0cce3b1e0db91f460a5ca66045b45a5ef7f050b33df18054680b000000000000000b019055808252600460205260408220919390929091737b9bb19911763a372e35f95d0e31031c0884b6ec904260a01b82179055600b840193600080516020620050fc83398151915291818188858180a4600192838084015b88810362000ef7575050508587553b62000ea057505050505050565b9080805b62000ec157505050505081540362000a3157808080808062000a07565b1562000ee8575b8562000edc62000a4f858486019562001d25565b62000a5f578162000ea4565b84821062000ec8578062000a19565b80848b858180a401849062000e84565b6040805162000f1681620000ff565b600080825280547fc241c0fe920ae0d5183555425bc6fb9015630a1d1cd7a091c747eb70aabe440880546806000000000000000601905580825260046020526040822091939092909173404e70a162487c9af8982a89a5453f389d5257b1904260a01b821790556006840193600080516020620050fc83398151915291818188858180a4600192838084015b88810362001015575050508587553b62000fbe57505050505050565b9080805b62000fdf57505050505081540362000a3157808080808062000a07565b1562001006575b8562000ffa62000a4f858486019562001d7f565b62000a5f578162000fc2565b84821062000fe6578062000a19565b80848b858180a401849062000fa2565b604080516200103481620000ff565b600080825280547fada54af4a358146a41124a22ce53e90b6235681b902ee6aca13c632e20a03e15805468050000000000000005019055808252600460205260408220919390929091737fdb709f97dcd5f5a51054ad84a51107b2c15ef3904260a01b821790556005840193600080516020620050fc83398151915291818188858180a4600192838084015b88810362001133575050508587553b620010dc57505050505050565b9080805b620010fd57505050505081540362000a3157808080808062000a07565b1562001124575b856200111862000a4f858486019562001dd9565b62000a5f5781620010e0565b84821062001104578062000a19565b80848b858180a4018490620010c0565b60408051906200115382620000ff565b600080835280547f610de4d67d839321860f8090f800e5417cd941f50968c24eba8e2858492a12af8054680400000000000000040190558082526004602052604082209193909273ae378d2e106d5c3ebdb7d960bd9c9093e23e680f929091904260a01b8417905560049283850194600080516020620050fc83398151915291818189858180a4600192838084015b8981036200126a575050508688553b62001200575b50505050505050565b9080805b62001224575b50505050505081540362000a3157808080808080620011f7565b156200125b575b866200123f62000a4f858486019562001e33565b6200124b578162001204565b84516368d2bf6b60e11b81528690fd5b8582106200122b57806200120a565b80848c858180a4018490620011e2565b604080516200128981620000ff565b600080825280547fe3dec0a5e98b84143f10ea1fafec05f5d2bc620d1436af718df2fb71fdfa8333805468030000000000000003019055808252600460205260408220919390929091730532bf0916f509883eaa1eca5b270d753e152855904260a01b821790556003840193600080516020620050fc83398151915291818188858180a4600192838084015b88810362001388575050508587553b6200133157505050505050565b9080805b6200135257505050505081540362000a3157808080808062000a07565b1562001379575b856200136d62000a4f858486019562001e8d565b62000a5f578162001335565b84821062001359578062000a19565b80848b858180a401849062001315565b60408051620013a781620000ff565b600080825280547f534b4d387993e11d317d303619fa9f8c30b45cf2e8d220949786b33f01455e81805468030000000000000003019055808252600460205260408220919390929091732772c7df084cbe204576731d711b622234bdd9a7904260a01b821790556003840193600080516020620050fc83398151915291818188858180a4600192838084015b888103620014a6575050508587553b6200144f57505050505050565b9080805b6200147057505050505081540362000a3157808080808062000a07565b1562001497575b856200148b62000a4f858486019562001ee7565b62000a5f578162001453565b84821062001477578062000a19565b80848b858180a401849062001433565b60408051620014c581620000ff565b600080825280547f86d765f5d6731ced4f0b772902573a51c5cee95f4ca7fcc1d990697e8aa485ff80546803000000000000000301905580825260046020526040822091939092909173a9ad6c62611884672dfef7e20a115778c4b0bab1904260a01b821790556003840193600080516020620050fc83398151915291818188858180a4600192838084015b888103620015c4575050508587553b6200156d57505050505050565b9080805b6200158e57505050505081540362000a3157808080808062000a07565b15620015b5575b85620015a962000a4f858486019562001f41565b62000a5f578162001571565b84821062001595578062000a19565b80848b858180a401849062001551565b60408051620015e381620000ff565b600080825280547f903a8535fdb250cbd06a1e1a196ac7f1fb1314b2705381ed3e5246ac09f69288805468020000000000000002019055808252600460205260408220919390929091731441bbbe1564d0b3e489f7c5bcc4f0c5ec4c4cd8904260a01b821790556002840193600080516020620050fc83398151915291818188858180a4600192838084015b888103620016e2575050508587553b6200168b57505050505050565b9080805b620016ac57505050505081540362000a3157808080808062000a07565b15620016d3575b85620016c762000a4f858486019562001f9b565b62000a5f57816200168f565b848210620016b3578062000a19565b80848b858180a40184906200166f565b604080516200170181620000ff565b600080825280547fef51cb0926747d696ea341f8e3319935f84e6250a3372509d0d4373cff40f4a58054680100000000000000010190558082526004602052604082207c020000000000000000d634351c0e586ebc0b192d8573c0524aa1bc459f4260a01b1790559092600180830193919273d634351c0e586ebc0b192d8573c0524aa1bc459f600080516020620050fc833981519152828289838180a483875b88810362001815575050508587553b620017be57505050505050565b9080805b620017df57505050505081540362000a3157808080808062000a07565b1562001806575b85620017fa62000a4f858486019562001ff5565b62000a5f5781620017c2565b848210620017e6578062000a19565b80848b858180a4018490620017a2565b604080516200183481620000ff565b600080825280547f99241f70fc35711d6273dbfde1733ac85b41986b2f5fcd7d9beee8ed5c6820e88054680100000000000000010190558082526004602052604082207c02000000000000000074bdf046024cdf112f1d881526e6f05d278d35a04260a01b179055909260018083019391927374bdf046024cdf112f1d881526e6f05d278d35a0600080516020620050fc833981519152828289838180a483875b88810362001948575050508587553b620018f157505050505050565b9080805b6200191257505050505081540362000a3157808080808062000a07565b1562001939575b856200192d62000a4f85848601956200204f565b62000a5f5781620018f5565b84821062001919578062000a19565b80848b858180a4018490620018d5565b604080516200196781620000ff565b600080825280547fee6ad47f38977ca8e161e7bf12dfdb23d01a055fb1f0ae1819f3e71380ed65338054680100000000000000010190558082526004602052604082207c020000000000000000739a5776f98e50bc2a453c0142cff8597b50dea74260a01b1790559092600180830193919273739a5776f98e50bc2a453c0142cff8597b50dea7600080516020620050fc833981519152828289838180a483875b88810362001a7b575050508587553b62001a2457505050505050565b9080805b62001a4557505050505081540362000a3157808080808062000a07565b1562001a6c575b8562001a6062000a4f8584860195620020a9565b62000a5f578162001a28565b84821062001a4c578062000a19565b80848b858180a401849062001a08565b908160209103126200006b57516001600160e01b0319811681036200006b5790565b9193929060018060a01b0316825260209360008584015260408301526080606083015280519081608084015260005b82811062001aff57505060a09293506000838284010152601f8019910116010190565b81810186015184820160a00152850162001adc565b3d1562001b52573d906001600160401b038211620000ad576040519162001b46601f8201601f1916602001846200011b565b82523d6000602084013e565b606090565b90602062001b7d9160405180938192630a85bd0160e11b96878452336004850162001aad565b0381600073a885b1f77e4185f98b4d4dbe752b212b18b5d5515af16000918162001be0575b5062001bd25762001bb262001b14565b8051908162001bcd576040516368d2bf6b60e11b8152600490fd5b602001fd5b6001600160e01b0319161490565b62001c0791925060203d811162001c0f575b62001bfe81836200011b565b81019062001a8b565b903862001ba2565b503d62001bf2565b90602062001c3d9160405180938192630a85bd0160e11b96878452336004850162001aad565b0381600073f29ac257c03cba76da7d3c4a34f2ca14b563260d5af16000918162001be0575062001bd25762001bb262001b14565b90602062001c979160405180938192630a85bd0160e11b96878452336004850162001aad565b0381600073ed03ea9c96ec39097548256e428a163e5f524e475af16000918162001be0575062001bd25762001bb262001b14565b90602062001cf19160405180938192630a85bd0160e11b96878452336004850162001aad565b0381600073bd34678c8e17d4d6f221b4cb912d79c3443f80345af16000918162001be0575062001bd25762001bb262001b14565b90602062001d4b9160405180938192630a85bd0160e11b96878452336004850162001aad565b03816000737b9bb19911763a372e35f95d0e31031c0884b6ec5af16000918162001be0575062001bd25762001bb262001b14565b90602062001da59160405180938192630a85bd0160e11b96878452336004850162001aad565b0381600073404e70a162487c9af8982a89a5453f389d5257b15af16000918162001be0575062001bd25762001bb262001b14565b90602062001dff9160405180938192630a85bd0160e11b96878452336004850162001aad565b03816000737fdb709f97dcd5f5a51054ad84a51107b2c15ef35af16000918162001be0575062001bd25762001bb262001b14565b90602062001e599160405180938192630a85bd0160e11b96878452336004850162001aad565b0381600073ae378d2e106d5c3ebdb7d960bd9c9093e23e680f5af16000918162001be0575062001bd25762001bb262001b14565b90602062001eb39160405180938192630a85bd0160e11b96878452336004850162001aad565b03816000730532bf0916f509883eaa1eca5b270d753e1528555af16000918162001be0575062001bd25762001bb262001b14565b90602062001f0d9160405180938192630a85bd0160e11b96878452336004850162001aad565b03816000732772c7df084cbe204576731d711b622234bdd9a75af16000918162001be0575062001bd25762001bb262001b14565b90602062001f679160405180938192630a85bd0160e11b96878452336004850162001aad565b0381600073a9ad6c62611884672dfef7e20a115778c4b0bab15af16000918162001be0575062001bd25762001bb262001b14565b90602062001fc19160405180938192630a85bd0160e11b96878452336004850162001aad565b03816000731441bbbe1564d0b3e489f7c5bcc4f0c5ec4c4cd85af16000918162001be0575062001bd25762001bb262001b14565b9060206200201b9160405180938192630a85bd0160e11b96878452336004850162001aad565b0381600073d634351c0e586ebc0b192d8573c0524aa1bc459f5af16000918162001be0575062001bd25762001bb262001b14565b906020620020759160405180938192630a85bd0160e11b96878452336004850162001aad565b038160007374bdf046024cdf112f1d881526e6f05d278d35a05af16000918162001be0575062001bd25762001bb262001b14565b906020620020cf9160405180938192630a85bd0160e11b96878452336004850162001aad565b0381600073739a5776f98e50bc2a453c0142cff8597b50dea75af16000918162001be0575062001bd25762001bb262001b1456fe6080604052600436101561001257600080fd5b60003560e01c806301ffc9a7146102b757806306fdde03146102b2578063081812fc146102ad578063095ea7b3146102a85780631249c58b146102a3578063174f57af1461029e57806318160ddd146102995780631e8f50f31461029457806323b872dd1461028f5780633ccfd60b1461028a5780633f4ba83a146102855780633fab39c01461028057806342842e0e1461027b57806350fd736714610276578063543fd313146102715780635bbb21771461026c5780635c975abb146102675780635fcea21f1461026257806363429a391461025d5780636352211e1461025857806370a0823114610253578063715018a61461024e57806380e801ba146102495780638456cb59146102445780638462151c1461023f578063898572a61461023a5780638da5cb5b1461023557806395d89b4114610230578063964bc33f1461022b57806399a2557a146102265780639c45b66e146102215780639ce3b2961461021c578063a22cb46514610217578063b88d4fde14610212578063c23dc68f1461020d578063c87b56dd14610208578063d6d7b3ec14610203578063d9ecad7b146101fe578063da4fef6a146101f9578063e48828ba146101f4578063e985e9c5146101ef5763f2fde38b146101ea57600080fd5b611966565b611909565b6118e0565b611829565b61169d565b6115e6565b6114c2565b61145f565b611405565b611276565b6111bf565b610fd1565b610f17565b610ea9565b610e02565b610dd9565b610da4565b610cf0565b610c49565b610bfd565b610b9f565b610b74565b610b45565b610af9565b610ad0565b610aaa565b6109e4565b6108fc565b610875565b610852565b6107fa565b61075e565b61071b565b610707565b6106b4565b61068d565b61066f565b6105bc565b610505565b610485565b6103a0565b6102d3565b6001600160e01b03198116036102ce57565b600080fd5b346102ce5760203660031901126102ce5760206004356102f2816102bc565b63ffffffff60e01b166301ffc9a760e01b8114908115610330575b811561031f575b506040519015158152f35b635b5e139f60e01b14905038610314565b6380ac58cd60e01b8114915061030d565b60009103126102ce57565b919082519283825260005b848110610378575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201610357565b90602061039d92818152019061034c565b90565b346102ce576000806003193601126104825760405190806002546103c381611f9c565b8085529160019180831690811561045857506001146103fd575b6103f9856103ed81870382611383565b6040519182918261038c565b0390f35b9250600283527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace5b8284106104405750505081016020016103ed826103f96103dd565b80546020858701810191909152909301928101610425565b8695506103f9969350602092506103ed94915060ff191682840152151560051b82010192936103dd565b80fd5b346102ce5760203660031901126102ce576004356104a281612778565b156104c7576000526006602052602060018060a01b0360406000205416604051908152f35b6040516333d1c03960e21b8152600490fd5b600435906001600160a01b03821682036102ce57565b602435906001600160a01b03821682036102ce57565b60403660031901126102ce576105196104d9565b6024356001600160a01b038061052e83612700565b1690813303610589575b600083815260066020526040812080546001600160a01b0319166001600160a01b0387161790559316907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258480a480f35b600082815260076020908152604080832033845290915290205460ff16610538576040516367d9dca160e11b8152600490fd5b600080600319360112610482576105d1611c00565b6105dd600b5430611fe9565b3403610655576105ec33612b08565b600954819061060b906001600160a01b03165b6001600160a01b031690565b803b15610652578190600460405180948193631133eb1360e31b83525af1801561064d57610637575080f35b8061064461064a9261131a565b80610341565b80f35b611bf4565b50fd5b6024600b5460405190638c4fcd9360e01b82526004820152fd5b346102ce5760003660031901126102ce576020600b54604051908152f35b346102ce5760003660031901126102ce576000546001546040519103600019018152602090f35b346102ce5760003660031901126102ce576020600c54604051908152f35b60609060031901126102ce576001600160a01b039060043582811681036102ce579160243590811681036102ce579060443590565b610719610713366106d2565b916127b3565b005b346102ce5760008060031936011261048257338152600d60205280808080604081208181549155818115610755575b3390f11561064d5780f35b506108fc61074a565b346102ce5760003660031901126102ce57610777611b9c565b60085460ff8160a01c16156107be5760ff60a01b19166008556040513381527f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa90602090a1005b60405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606490fd5b346102ce5760603660031901126102ce576108136104d9565b600b5490610823602435826120a2565b820180921161084d5761083990604435906120a2565b810180911161084d57602090604051908152f35b611ade565b61071961085e366106d2565b906040519261086c8461134d565b60008452612981565b346102ce5760403660031901126102ce576004356024356001600160a01b0361089d83612700565b1633036108ea5760207f1ea45e30b31292f9d7c5d37d275b2feca555f13f47dce0fdea2f47e8852ecd78918360005260118252806040600020556108e084611c7e565b50604051908152a2005b6040516330cd747160e01b8152600490fd5b346102ce5760203660031901126102ce576001600160a01b0361091d6104d9565b16600052600d6020526020604060002054604051908152f35b9181601f840112156102ce578235916001600160401b0383116102ce576020808501948460051b0101116102ce57565b6020908160408183019282815285518094520193019160005b82811061098d575050505090565b90919293826080826109d8600194895162ffffff6060809260018060a01b0381511685526001600160401b036020820151166020860152604081015115156040860152015116910152565b0195019392910161097f565b346102ce576020806003193601126102ce576004356001600160401b0381116102ce57610a15903690600401610936565b610a1e81611a49565b92610a2c6040519485611383565b818452601f19610a3b83611a49565b0160005b818110610a945750505060005b818103610a6157604051806103f98682610966565b80610a78610a726001938587612216565b35612c76565b610a828287611b19565b52610a8d8186611b19565b5001610a4c565b8290610a9e612c41565b82828901015201610a3f565b346102ce5760003660031901126102ce57602060ff60085460a01c166040519015158152f35b346102ce5760003660031901126102ce57600a546040516001600160a01b039091168152602090f35b346102ce5760203660031901126102ce577f2a18cf32a22f3e27f6b620a8fd31a7319aadf62731615198e0d1f4da50def4d76020600435610b38611b9c565b80600c55604051908152a1005b346102ce5760203660031901126102ce5760206001600160a01b03610b6b600435612700565b16604051908152f35b346102ce5760203660031901126102ce576020610b97610b926104d9565b6126c5565b604051908152f35b346102ce5760008060031936011261048257610bb9611b9c565b600880546001600160a01b0319811690915581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b346102ce5760203660031901126102ce577f30c2bd04e6b0aae4de29a47be440f71b5ecfb151e2074b25097bda3ea66332706020600435610c3c611b9c565b80600b55604051908152a1005b346102ce5760003660031901126102ce57610c62611b9c565b610c6a611c00565b6008805460ff60a01b1916600160a01b1790556040513381527f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25890602090a1005b90815180825260208080930193019160005b828110610ccb575050505090565b835185529381019392810192600101610cbd565b90602061039d928181520190610cab565b346102ce5760203660031901126102ce57610d096104d9565b60008091610d16816126c5565b610d1f81612446565b92610d28612c41565b506001926001600160a01b0390811690845b848403610d4f57604051806103f98982610cdf565b81610d5982612cd0565b876040820151610d9b5750511680610d93575b50859083838a1614610d7f575b01610d3a565b80610d8d838701968a611b19565b52610d79565b975085610d6c565b92915050610d79565b346102ce5760203660031901126102ce57600435600052600e6020526040806000206001815491015482519182526020820152f35b346102ce5760003660031901126102ce576008546040516001600160a01b039091168152602090f35b346102ce57600080600319360112610482576040519080600354610e2581611f9c565b808552916001918083169081156104585750600114610e4e576103f9856103ed81870382611383565b9250600383527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b5b828410610e915750505081016020016103ed826103f96103dd565b80546020858701810191909152909301928101610e76565b346102ce5760203660031901126102ce576004356001600160a01b03610ece82612700565b1633036108ea576000908082526011602052816040812055610eef81611d56565b507fc40fdc946efe80191c467f60727c4abc08254a056035d467a4516a86005ab7638280a280f35b346102ce5760603660031901126102ce576103f9610f43610f366104d9565b6044359060243590612d2e565b604051918291602083526020830190610cab565b9181601f840112156102ce578235916001600160401b0383116102ce57602083818601950101116102ce57565b60051115610f8e57565b634e487b7160e01b600052602160045260246000fd5b602081528151916005831015610f8e57602060609161039d94828501520151916040808201520190610cab565b346102ce5760603660031901126102ce5760046001600160401b0381358181116102ce576110029036908401610936565b6024939193358381116102ce5761101c9036908401610f57565b50506044358381116102ce576110359036908401610f57565b9161103e611a2f565b5061105261104d368389611a60565b611b3f565b156111ae5761105f611a2f565b5060018060a01b03600a5416936040948551600080928192368382378036810184815203915af49661108f611aae565b9715611192578751880197602091828a019183818c031261118a57838101519082821161118e57908a9101809b0312611186578851996110ce8b611332565b83810151600581101561118e578b528981015191821161118a570181603f8201121561118657828101519061110282611a49565b9461110f8b519687611383565b8286528a8587019360051b83010193841161048257508901905b828210611177575050508161114892611144928a0152611b3f565b1590565b61116957509461115f9285926103f9973393612348565b5191829182610fa4565b8451635a35cf2d60e01b8152fd5b81518152908301908301611129565b8380fd5b8480fd5b8580fd5b865162461bcd60e51b8152806111aa8a82870161038c565b0390fd5b6040516309f6a85760e11b81528490fd5b346102ce5760203660031901126102ce576111d86104d9565b6111e0611b9c565b6111e981611e15565b80611266575b80611257575b61124557600980546001600160a01b0319166001600160a01b0390921691821790556040519081527fa1aa4d60fb784cbf55501f9d7ee58929d85455763666d5aeebe93ae500c6cd3590602090a1005b60405163a304e33f60e01b8152600490fd5b5061126181611e9b565b6111f5565b5061127081611e6b565b156111ef565b346102ce5760403660031901126102ce5761128f6104d9565b602435908115158092036102ce573360009081526007602090815260408083206001600160a01b0385168452909152902060ff1981541660ff841617905560405191825260018060a01b0316907f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3160203392a3005b634e487b7160e01b600052604160045260246000fd5b6001600160401b03811161132d57604052565b611304565b604081019081106001600160401b0382111761132d57604052565b602081019081106001600160401b0382111761132d57604052565b606081019081106001600160401b0382111761132d57604052565b90601f801991011681019081106001600160401b0382111761132d57604052565b604051906113b182611332565b565b6001600160401b03811161132d57601f01601f191660200190565b9291926113da826113b3565b916113e86040519384611383565b8294818452818301116102ce578281602093846000960137010152565b60803660031901126102ce576114196104d9565b6114216104ef565b606435916001600160401b0383116102ce57366023840112156102ce576114556107199336906024816004013591016113ce565b9160443591612981565b346102ce5760203660031901126102ce57608061147d600435612c76565b6114c0604051809262ffffff6060809260018060a01b0381511685526001600160401b036020820151166020860152604081015115156040860152015116910152565bf35b346102ce576020806003193601126102ce576000600435815260128252604081206040519266697066733a2f2f60c81b8185015282825461150281611f9c565b9360019180831690811561156e5750600114611530575b6103f9876103ed818903601f198101835282611383565b90918093949550528282205b84831061155a575050505081016027016103ed826103f93880611519565b80548684016027015291830191810161153c565b9150508695506103f9969350602792506103ed94915060ff1916828401528015150282010192933880611519565b60208082019080835283518092528060408094019401926000905b8382106115c657505050505090565b8451805187528301518684015294850194938201936001909101906115b7565b346102ce5760403660031901126102ce57600435602435600f5480831160001461169657805b82820180831161084d5781101561168f576116279250611b32565b61163081611efb565b9160005b82811061164957604051806103f9868261159c565b8061165f61165a61168a9385611e08565b611f5c565b6116676113a4565b91825260208201526116798287611b19565b526116848186611b19565b50611af4565b611634565b5050611627565b829061160c565b6040806003193601126102ce576004803591602435916116bb611c00565b6116c761114485612778565b61180e576116d761114484612778565b6117f2578284146117e457600b54611734906001600160a01b03906117199061171f9082846117058b612700565b166117108b336120a2565b600c5491612032565b90611e08565b9161172987612700565b1661171087336120a2565b3481036117c8575061177c61176b9460009586958654906117536113a4565b9384526020840152600052600e602052604060002090565b906020600191805184550151910155565b61178533612b08565b60095461179a906001600160a01b03166105ff565b90813b156117c35783925180948193631133eb1360e31b83525af1801561064d57610637575080f35b505050fd5b9151638c4fcd9360e01b81529081019182529081906020010390fd5b9051635693858360e01b8152fd5b90516303ff20ff60e31b81529081019182529081906020010390fd5b90516303ff20ff60e31b815290810183815281906020010390fd5b346102ce5760203660031901126102ce576118426104d9565b61184a611b9c565b61185381611e15565b806118d0575b806118c1575b6118af57600a80546001600160a01b0319166001600160a01b0390921691821790556040519081527f5041ed14511e2a28b160ee5bf9eeb9b93e4759285a91383d3b7500179a64809190602090a1005b60405163df61025d60e01b8152600490fd5b506118cb81611ecb565b61185f565b506118da81611e6b565b15611859565b346102ce5760003660031901126102ce576009546040516001600160a01b039091168152602090f35b346102ce5760403660031901126102ce57602060ff61195a6119296104d9565b6119316104ef565b6001600160a01b0391821660009081526007865260408082209290931681526020919091522090565b54166040519015158152f35b346102ce5760203660031901126102ce5761197f6104d9565b611987611b9c565b6001600160a01b039081169081156119db57600854826bffffffffffffffffffffffff60a01b821617600855167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3005b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b60405190611a3c82611332565b6060602083600081520152565b6001600160401b03811161132d5760051b60200190565b9291611a6b82611a49565b91611a796040519384611383565b829481845260208094019160051b81019283116102ce57905b828210611a9f5750505050565b81358152908301908301611a92565b3d15611ad9573d90611abf826113b3565b91611acd6040519384611383565b82523d6000602084013e565b606090565b634e487b7160e01b600052601160045260246000fd5b600019811461084d5760010190565b634e487b7160e01b600052603260045260246000fd5b8051821015611b2d5760209160051b010190565b611b03565b9190820391821161084d57565b60018091815b611b4e57505090565b8051821015611b9757611b618282611b19565b51600019830183811161084d57611b789083611b19565b511015611b8f57611b898392611af4565b91611b45565b505050600090565b505090565b6008546001600160a01b03163303611bb057565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b6040513d6000823e3d90fd5b60ff60085460a01c16611c0f57565b60405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606490fd5b600f54811015611b2d57600f6000527f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac8020190600090565b80600052601060205260406000205415600014611cf457600f546801000000000000000081101561132d576001810180600f55811015611b2d5781907f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac8020155600f54906000526010602052604060002055600190565b50600090565b600f548015611d405760001981019080821015611b2d577f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac801600091600f83520155600f55565b634e487b7160e01b600052603160045260246000fd5b6000818152601060205260409020548015611e0157600019918183019180831161084d57600f5493840193841161084d578383611db19460009603611db7575b505050611da1611cfa565b6000526010602052604060002090565b55600190565b611da1611ddf91611dd7611dcd611df895611c47565b90549060031b1c90565b928391611c47565b90919082549060031b91821b91600019901b1916179055565b55388080611d96565b5050600090565b9190820180921161084d57565b6000602091604051838101906301ffc9a760e01b808352602482015260248152611e3e81611368565b5191617530fa6000513d82611e5f575b5081611e58575090565b9050151590565b60201115915038611e4e565b6000602091604051838101906301ffc9a760e01b825263ffffffff60e01b602482015260248152611e3e81611368565b6000602091604051838101906301ffc9a760e01b8252632685120760e21b602482015260248152611e3e81611368565b6000602091604051838101906301ffc9a760e01b8252634e22db3760e11b602482015260248152611e3e81611368565b90611f0582611a49565b604090611f1482519182611383565b8381528093611f25601f1991611a49565b0191600090815b848110611f3a575050505050565b6020908251611f4881611332565b848152828581830152828701015201611f2c565b600f54811015611b2d577f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac80201549081600052601160205260406000205490565b90600182811c92168015611fcc575b6020831014611fb657565b634e487b7160e01b600052602260045260246000fd5b91607f1691611fab565b8181029291811591840414171561084d57565b60018215171561084d5760018060a01b03809116600052600d602052604060002090815483810180911161084d57909155600854166001600160a01b0316600052600d60205290565b90916120416127109184611fd6565b04908183039083821161084d576001600160a01b039081166000908152600d6020526040902080549092810190811061084d57909155600854166001600160a01b03166000908152600d60205260409020805491820180921161084d575590565b81159081156120d5575b50611cf4576120ba906120f3565b90156120c35790565b60405163665c1c5760e01b8152600490fd5b90506001600160a01b03806120e984612700565b16911614386120ac565b6000526011602052604060002054801560001461211e57506010602052604060002054151590600090565b600191565b9060209081838203126102ce5782356001600160401b03938482116102ce57019080601f830112156102ce57813561215a81611a49565b9460409061216a82519788611383565b828752858088019360051b860101948486116102ce57868101935b86851061219757505050505050505090565b84358381116102ce57820186603f820112156102ce5788916121c1888388868096013591016113ce565b815201940193612185565b906121d682611a49565b6121e36040519182611383565b82815280926121f4601f1991611a49565b019060005b82811061220557505050565b8060606020809385010152016121f9565b9190811015611b2d5760051b0190565b90601f811161223457505050565b600091825260208220906020601f850160051c83019410612270575b601f0160051c01915b82811061226557505050565b818155600101612259565b9092508290612250565b91909182516001600160401b03811161132d576122a18161229b8454611f9c565b84612226565b602080601f83116001146122dd5750819293946000926122d2575b50508160011b916000199060031b1c1916179055565b0151905038806122bc565b90601f198316956122f385600052602060002090565b926000905b88821061233057505083600195969710612317575b505050811b019055565b015160001960f88460031b161c1916905538808061230d565b806001859682949686015181550195019301906122f8565b9261236f919261235d91969596810190612123565b93612369368486611a60565b90612478565b9461237a86516121cc565b9460005b87518110156123de57806123d4896123cf6123bd6123b6856123af8c8c6123a86123d99b89611b19565b5191612216565b3594611b19565b518b611b19565b51916000526012602052604060002090565b61227a565b611af4565b61237e565b509492509450506123f59150600b54905190611fd6565b8015801561240257505050565b6000928392839283928391612424575b6001600160a01b031690f11561064d57565b6108fc9150612412565b60405161243a8161134d565b60008152906000368137565b9061245082611a49565b61245d6040519182611383565b828152809261246e601f1991611a49565b0190602036910137565b805161248381610f84565b61248c81610f84565b60018091146125f157600282516124a281610f84565b6124ab81610f84565b146125e657600382516124bd81610f84565b6124c681610f84565b1461257b57600482516124d881610f84565b6124e181610f84565b146124f8576040516332aed2cf60e21b8152600490fd5b8061250c612507855185612629565b612446565b93600080925b61251f575b505050505090565b8151831015612576576125328383611b19565b51612541826020880151611b19565b511461256c5761255f8184612559612565948a611b19565b52611af4565b92611af4565b9183612512565b9161256590611af4565b612517565b90602001908061258c835151612446565b93600080925b61259e57505050505090565b8151831015612576576125b18383611b19565b516125bd828751611b19565b51036125dc5761255f81846125596125d5948a611b19565b9183612592565b916125d590611af4565b50505061039d61242e565b916125fd915051612446565b906000815b61260b57505090565b8251811015611b975780806125596126239386611b19565b81612602565b906001825161263781610f84565b61264081610f84565b146126c0576002825161265281610f84565b61265b81610f84565b14611e01576003825161266d81610f84565b61267681610f84565b146126b7576004825161268881610f84565b61269181610f84565b146126a8576040516332aed2cf60e21b8152600490fd5b602061039d9201515190611b32565b50602001515190565b905090565b6001600160a01b031680156126ee5760005260056020526001600160401b036040600020541690565b6040516323d3ad8160e21b8152600490fd5b600081806001111561271f575b604051636f96cda160e11b8152600490fd5b815481101561270d5781526004906020918083526040928383205494600160e01b86161561274f5750505061270d565b93929190935b851561276357505050505090565b60001901808352818552838320549550612755565b806001111590816127a7575b8161278d575090565b90506000526004602052600160e01b604060002054161590565b60005481109150612784565b906127bd83612700565b6001600160a01b0383811692828216849003612970576000868152600660205260409020805490926127fe6001600160a01b03881633908114908414171590565b612915575b82169586156129035761285693612834926128f9575b506001600160a01b0316600090815260056020526040902090565b80546000190190556001600160a01b0316600090815260056020526040902090565b80546001019055600160e11b804260a01b85171761287e866000526004602052604060002090565b558116156128af575b507fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600080a4565b600184016128c7816000526004602052604060002090565b54156128d4575b50612887565b60005481146128ce576128f1906000526004602052604060002090565b5538806128ce565b6000905538612819565b604051633a954ecd60e21b8152600490fd5b6129596111446129523361293b8b60018060a01b03166000526007602052604060002090565b9060018060a01b0316600052602052604060002090565b5460ff1690565b1561280357604051632ce44b5f60e11b8152600490fd5b60405162a1148160e81b8152600490fd5b92919061298f8282866127b3565b803b61299c575b50505050565b6129a593612adf565b156129b35738808080612996565b6040516368d2bf6b60e11b8152600490fd5b908160209103126102ce575161039d816102bc565b61039d939260809260018060a01b03168252600060208301526040820152816060820152019061034c565b6001600160a01b03918216815291166020820152604081019190915260806060820181905261039d9291019061034c565b612a5f60209160009394604051948580948193630a85bd0160e11b998a845233600485016129da565b03926001600160a01b03165af160009181612aaf575b50612aa157612a82611aae565b80519081612a9c576040516368d2bf6b60e11b8152600490fd5b602001fd5b6001600160e01b0319161490565b612ad191925060203d8111612ad8575b612ac98183611383565b8101906129c5565b9038612a75565b503d612abf565b92602091612a5f936000604051809681958294630a85bd0160e11b9a8b85523360048601612a05565b604090815191612b178361134d565b600080845280546001600160a01b038416825260056020526040822091949180546801000000000000000101905560008181526004602052604090206001600160a01b03851694904260a01b8617600160e11b179055600191828101957fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef82828a838180a484885b898103612c325750505015612c2257858755813b612bc1575b50505050505050565b9180805b612be2575b50505050505081540361048257808080808080612bb8565b15612c15575b86612bfa611144868487019686612a36565b612c045781612bc5565b85516368d2bf6b60e11b8152600490fd5b858310612be85780612bca565b8451622e076360e81b8152600490fd5b80848c858180a4018590612b9f565b60405190608082018281106001600160401b0382111761132d5760405260006060838281528260208201528260408201520152565b612c7e612c41565b50612c87612c41565b600182108015612cc4575b6126c05750612ca081612cd0565b60408101516126c05750612cbf61039d91612cb9612c41565b50612700565b612ceb565b50600054821015612c92565b612cd8612c41565b50600052600460205261039d6040600020545b90612cf4612c41565b6001600160a01b038316815260a083901c6001600160401b03166020820152600160e01b83161515604082015260e89290921c6060830152565b9082811015612e6e57600091825491600192838210612e66575b808611612e5e575b50612d5a826126c5565b9185821015612e5657818603838110612e4e575b505b612d7983612446565b958315612e45578493612d8b84612c76565b918794604093612da061114486830151151590565b612e33575b50955b612db9575b50505050505050815290565b8086141580612e29575b15612e24578686612dd48298612cd0565b80860151612e1e57516001600160a01b0390811680612e16575b5080871690881614612e02575b0195612da8565b80612e10838c019b8d611b19565b52612dfb565b975038612dee565b50612dfb565b612dad565b5081881415612dc3565b516001600160a01b0316955038612da5565b50505050505090565b925038612d6e565b849250612d70565b945038612d50565b839150612d48565b604051631960ccad60e11b8152600490fdfea264697066735822122072c309f6972688bc4f6ddefa359d9980f7007bf4ed21b72029a6d41df4e1a1a264736f6c634300081200336080806040523461001657610126908161001c8239f35b600080fdfe6080806040526004361015601257600080fd5b600090813560e01c90816301ffc9a71460b357508063138b10841460785763899f589814603e57600080fd5b346075578060031936011260755780337fab04395d906559e27643e4acf5cd0debe6a355247cd81c101bd0855d87dcc2608280a380f35b80fd5b50346075576020366003190112607557600435337fab04395d906559e27643e4acf5cd0debe6a355247cd81c101bd0855d87dcc2608380a380f35b90503460ec57602036600319011260ec5760043563ffffffff60e01b811680910360e857632685120760e21b14815260209150f35b8280fd5b5080fdfea2646970667358221220be4ef58d45f304b2a5fe9f203506a4614ad1cb5436c3a45e55cd02039da4bcbd64736f6c63430008120033ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
  "deployedBytecode": "0x6080604052600436101561001257600080fd5b60003560e01c806301ffc9a7146102b757806306fdde03146102b2578063081812fc146102ad578063095ea7b3146102a85780631249c58b146102a3578063174f57af1461029e57806318160ddd146102995780631e8f50f31461029457806323b872dd1461028f5780633ccfd60b1461028a5780633f4ba83a146102855780633fab39c01461028057806342842e0e1461027b57806350fd736714610276578063543fd313146102715780635bbb21771461026c5780635c975abb146102675780635fcea21f1461026257806363429a391461025d5780636352211e1461025857806370a0823114610253578063715018a61461024e57806380e801ba146102495780638456cb59146102445780638462151c1461023f578063898572a61461023a5780638da5cb5b1461023557806395d89b4114610230578063964bc33f1461022b57806399a2557a146102265780639c45b66e146102215780639ce3b2961461021c578063a22cb46514610217578063b88d4fde14610212578063c23dc68f1461020d578063c87b56dd14610208578063d6d7b3ec14610203578063d9ecad7b146101fe578063da4fef6a146101f9578063e48828ba146101f4578063e985e9c5146101ef5763f2fde38b146101ea57600080fd5b611966565b611909565b6118e0565b611829565b61169d565b6115e6565b6114c2565b61145f565b611405565b611276565b6111bf565b610fd1565b610f17565b610ea9565b610e02565b610dd9565b610da4565b610cf0565b610c49565b610bfd565b610b9f565b610b74565b610b45565b610af9565b610ad0565b610aaa565b6109e4565b6108fc565b610875565b610852565b6107fa565b61075e565b61071b565b610707565b6106b4565b61068d565b61066f565b6105bc565b610505565b610485565b6103a0565b6102d3565b6001600160e01b03198116036102ce57565b600080fd5b346102ce5760203660031901126102ce5760206004356102f2816102bc565b63ffffffff60e01b166301ffc9a760e01b8114908115610330575b811561031f575b506040519015158152f35b635b5e139f60e01b14905038610314565b6380ac58cd60e01b8114915061030d565b60009103126102ce57565b919082519283825260005b848110610378575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201610357565b90602061039d92818152019061034c565b90565b346102ce576000806003193601126104825760405190806002546103c381611f9c565b8085529160019180831690811561045857506001146103fd575b6103f9856103ed81870382611383565b6040519182918261038c565b0390f35b9250600283527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace5b8284106104405750505081016020016103ed826103f96103dd565b80546020858701810191909152909301928101610425565b8695506103f9969350602092506103ed94915060ff191682840152151560051b82010192936103dd565b80fd5b346102ce5760203660031901126102ce576004356104a281612778565b156104c7576000526006602052602060018060a01b0360406000205416604051908152f35b6040516333d1c03960e21b8152600490fd5b600435906001600160a01b03821682036102ce57565b602435906001600160a01b03821682036102ce57565b60403660031901126102ce576105196104d9565b6024356001600160a01b038061052e83612700565b1690813303610589575b600083815260066020526040812080546001600160a01b0319166001600160a01b0387161790559316907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258480a480f35b600082815260076020908152604080832033845290915290205460ff16610538576040516367d9dca160e11b8152600490fd5b600080600319360112610482576105d1611c00565b6105dd600b5430611fe9565b3403610655576105ec33612b08565b600954819061060b906001600160a01b03165b6001600160a01b031690565b803b15610652578190600460405180948193631133eb1360e31b83525af1801561064d57610637575080f35b8061064461064a9261131a565b80610341565b80f35b611bf4565b50fd5b6024600b5460405190638c4fcd9360e01b82526004820152fd5b346102ce5760003660031901126102ce576020600b54604051908152f35b346102ce5760003660031901126102ce576000546001546040519103600019018152602090f35b346102ce5760003660031901126102ce576020600c54604051908152f35b60609060031901126102ce576001600160a01b039060043582811681036102ce579160243590811681036102ce579060443590565b610719610713366106d2565b916127b3565b005b346102ce5760008060031936011261048257338152600d60205280808080604081208181549155818115610755575b3390f11561064d5780f35b506108fc61074a565b346102ce5760003660031901126102ce57610777611b9c565b60085460ff8160a01c16156107be5760ff60a01b19166008556040513381527f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa90602090a1005b60405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606490fd5b346102ce5760603660031901126102ce576108136104d9565b600b5490610823602435826120a2565b820180921161084d5761083990604435906120a2565b810180911161084d57602090604051908152f35b611ade565b61071961085e366106d2565b906040519261086c8461134d565b60008452612981565b346102ce5760403660031901126102ce576004356024356001600160a01b0361089d83612700565b1633036108ea5760207f1ea45e30b31292f9d7c5d37d275b2feca555f13f47dce0fdea2f47e8852ecd78918360005260118252806040600020556108e084611c7e565b50604051908152a2005b6040516330cd747160e01b8152600490fd5b346102ce5760203660031901126102ce576001600160a01b0361091d6104d9565b16600052600d6020526020604060002054604051908152f35b9181601f840112156102ce578235916001600160401b0383116102ce576020808501948460051b0101116102ce57565b6020908160408183019282815285518094520193019160005b82811061098d575050505090565b90919293826080826109d8600194895162ffffff6060809260018060a01b0381511685526001600160401b036020820151166020860152604081015115156040860152015116910152565b0195019392910161097f565b346102ce576020806003193601126102ce576004356001600160401b0381116102ce57610a15903690600401610936565b610a1e81611a49565b92610a2c6040519485611383565b818452601f19610a3b83611a49565b0160005b818110610a945750505060005b818103610a6157604051806103f98682610966565b80610a78610a726001938587612216565b35612c76565b610a828287611b19565b52610a8d8186611b19565b5001610a4c565b8290610a9e612c41565b82828901015201610a3f565b346102ce5760003660031901126102ce57602060ff60085460a01c166040519015158152f35b346102ce5760003660031901126102ce57600a546040516001600160a01b039091168152602090f35b346102ce5760203660031901126102ce577f2a18cf32a22f3e27f6b620a8fd31a7319aadf62731615198e0d1f4da50def4d76020600435610b38611b9c565b80600c55604051908152a1005b346102ce5760203660031901126102ce5760206001600160a01b03610b6b600435612700565b16604051908152f35b346102ce5760203660031901126102ce576020610b97610b926104d9565b6126c5565b604051908152f35b346102ce5760008060031936011261048257610bb9611b9c565b600880546001600160a01b0319811690915581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b346102ce5760203660031901126102ce577f30c2bd04e6b0aae4de29a47be440f71b5ecfb151e2074b25097bda3ea66332706020600435610c3c611b9c565b80600b55604051908152a1005b346102ce5760003660031901126102ce57610c62611b9c565b610c6a611c00565b6008805460ff60a01b1916600160a01b1790556040513381527f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25890602090a1005b90815180825260208080930193019160005b828110610ccb575050505090565b835185529381019392810192600101610cbd565b90602061039d928181520190610cab565b346102ce5760203660031901126102ce57610d096104d9565b60008091610d16816126c5565b610d1f81612446565b92610d28612c41565b506001926001600160a01b0390811690845b848403610d4f57604051806103f98982610cdf565b81610d5982612cd0565b876040820151610d9b5750511680610d93575b50859083838a1614610d7f575b01610d3a565b80610d8d838701968a611b19565b52610d79565b975085610d6c565b92915050610d79565b346102ce5760203660031901126102ce57600435600052600e6020526040806000206001815491015482519182526020820152f35b346102ce5760003660031901126102ce576008546040516001600160a01b039091168152602090f35b346102ce57600080600319360112610482576040519080600354610e2581611f9c565b808552916001918083169081156104585750600114610e4e576103f9856103ed81870382611383565b9250600383527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b5b828410610e915750505081016020016103ed826103f96103dd565b80546020858701810191909152909301928101610e76565b346102ce5760203660031901126102ce576004356001600160a01b03610ece82612700565b1633036108ea576000908082526011602052816040812055610eef81611d56565b507fc40fdc946efe80191c467f60727c4abc08254a056035d467a4516a86005ab7638280a280f35b346102ce5760603660031901126102ce576103f9610f43610f366104d9565b6044359060243590612d2e565b604051918291602083526020830190610cab565b9181601f840112156102ce578235916001600160401b0383116102ce57602083818601950101116102ce57565b60051115610f8e57565b634e487b7160e01b600052602160045260246000fd5b602081528151916005831015610f8e57602060609161039d94828501520151916040808201520190610cab565b346102ce5760603660031901126102ce5760046001600160401b0381358181116102ce576110029036908401610936565b6024939193358381116102ce5761101c9036908401610f57565b50506044358381116102ce576110359036908401610f57565b9161103e611a2f565b5061105261104d368389611a60565b611b3f565b156111ae5761105f611a2f565b5060018060a01b03600a5416936040948551600080928192368382378036810184815203915af49661108f611aae565b9715611192578751880197602091828a019183818c031261118a57838101519082821161118e57908a9101809b0312611186578851996110ce8b611332565b83810151600581101561118e578b528981015191821161118a570181603f8201121561118657828101519061110282611a49565b9461110f8b519687611383565b8286528a8587019360051b83010193841161048257508901905b828210611177575050508161114892611144928a0152611b3f565b1590565b61116957509461115f9285926103f9973393612348565b5191829182610fa4565b8451635a35cf2d60e01b8152fd5b81518152908301908301611129565b8380fd5b8480fd5b8580fd5b865162461bcd60e51b8152806111aa8a82870161038c565b0390fd5b6040516309f6a85760e11b81528490fd5b346102ce5760203660031901126102ce576111d86104d9565b6111e0611b9c565b6111e981611e15565b80611266575b80611257575b61124557600980546001600160a01b0319166001600160a01b0390921691821790556040519081527fa1aa4d60fb784cbf55501f9d7ee58929d85455763666d5aeebe93ae500c6cd3590602090a1005b60405163a304e33f60e01b8152600490fd5b5061126181611e9b565b6111f5565b5061127081611e6b565b156111ef565b346102ce5760403660031901126102ce5761128f6104d9565b602435908115158092036102ce573360009081526007602090815260408083206001600160a01b0385168452909152902060ff1981541660ff841617905560405191825260018060a01b0316907f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3160203392a3005b634e487b7160e01b600052604160045260246000fd5b6001600160401b03811161132d57604052565b611304565b604081019081106001600160401b0382111761132d57604052565b602081019081106001600160401b0382111761132d57604052565b606081019081106001600160401b0382111761132d57604052565b90601f801991011681019081106001600160401b0382111761132d57604052565b604051906113b182611332565b565b6001600160401b03811161132d57601f01601f191660200190565b9291926113da826113b3565b916113e86040519384611383565b8294818452818301116102ce578281602093846000960137010152565b60803660031901126102ce576114196104d9565b6114216104ef565b606435916001600160401b0383116102ce57366023840112156102ce576114556107199336906024816004013591016113ce565b9160443591612981565b346102ce5760203660031901126102ce57608061147d600435612c76565b6114c0604051809262ffffff6060809260018060a01b0381511685526001600160401b036020820151166020860152604081015115156040860152015116910152565bf35b346102ce576020806003193601126102ce576000600435815260128252604081206040519266697066733a2f2f60c81b8185015282825461150281611f9c565b9360019180831690811561156e5750600114611530575b6103f9876103ed818903601f198101835282611383565b90918093949550528282205b84831061155a575050505081016027016103ed826103f93880611519565b80548684016027015291830191810161153c565b9150508695506103f9969350602792506103ed94915060ff1916828401528015150282010192933880611519565b60208082019080835283518092528060408094019401926000905b8382106115c657505050505090565b8451805187528301518684015294850194938201936001909101906115b7565b346102ce5760403660031901126102ce57600435602435600f5480831160001461169657805b82820180831161084d5781101561168f576116279250611b32565b61163081611efb565b9160005b82811061164957604051806103f9868261159c565b8061165f61165a61168a9385611e08565b611f5c565b6116676113a4565b91825260208201526116798287611b19565b526116848186611b19565b50611af4565b611634565b5050611627565b829061160c565b6040806003193601126102ce576004803591602435916116bb611c00565b6116c761114485612778565b61180e576116d761114484612778565b6117f2578284146117e457600b54611734906001600160a01b03906117199061171f9082846117058b612700565b166117108b336120a2565b600c5491612032565b90611e08565b9161172987612700565b1661171087336120a2565b3481036117c8575061177c61176b9460009586958654906117536113a4565b9384526020840152600052600e602052604060002090565b906020600191805184550151910155565b61178533612b08565b60095461179a906001600160a01b03166105ff565b90813b156117c35783925180948193631133eb1360e31b83525af1801561064d57610637575080f35b505050fd5b9151638c4fcd9360e01b81529081019182529081906020010390fd5b9051635693858360e01b8152fd5b90516303ff20ff60e31b81529081019182529081906020010390fd5b90516303ff20ff60e31b815290810183815281906020010390fd5b346102ce5760203660031901126102ce576118426104d9565b61184a611b9c565b61185381611e15565b806118d0575b806118c1575b6118af57600a80546001600160a01b0319166001600160a01b0390921691821790556040519081527f5041ed14511e2a28b160ee5bf9eeb9b93e4759285a91383d3b7500179a64809190602090a1005b60405163df61025d60e01b8152600490fd5b506118cb81611ecb565b61185f565b506118da81611e6b565b15611859565b346102ce5760003660031901126102ce576009546040516001600160a01b039091168152602090f35b346102ce5760403660031901126102ce57602060ff61195a6119296104d9565b6119316104ef565b6001600160a01b0391821660009081526007865260408082209290931681526020919091522090565b54166040519015158152f35b346102ce5760203660031901126102ce5761197f6104d9565b611987611b9c565b6001600160a01b039081169081156119db57600854826bffffffffffffffffffffffff60a01b821617600855167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3005b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b60405190611a3c82611332565b6060602083600081520152565b6001600160401b03811161132d5760051b60200190565b9291611a6b82611a49565b91611a796040519384611383565b829481845260208094019160051b81019283116102ce57905b828210611a9f5750505050565b81358152908301908301611a92565b3d15611ad9573d90611abf826113b3565b91611acd6040519384611383565b82523d6000602084013e565b606090565b634e487b7160e01b600052601160045260246000fd5b600019811461084d5760010190565b634e487b7160e01b600052603260045260246000fd5b8051821015611b2d5760209160051b010190565b611b03565b9190820391821161084d57565b60018091815b611b4e57505090565b8051821015611b9757611b618282611b19565b51600019830183811161084d57611b789083611b19565b511015611b8f57611b898392611af4565b91611b45565b505050600090565b505090565b6008546001600160a01b03163303611bb057565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b6040513d6000823e3d90fd5b60ff60085460a01c16611c0f57565b60405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606490fd5b600f54811015611b2d57600f6000527f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac8020190600090565b80600052601060205260406000205415600014611cf457600f546801000000000000000081101561132d576001810180600f55811015611b2d5781907f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac8020155600f54906000526010602052604060002055600190565b50600090565b600f548015611d405760001981019080821015611b2d577f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac801600091600f83520155600f55565b634e487b7160e01b600052603160045260246000fd5b6000818152601060205260409020548015611e0157600019918183019180831161084d57600f5493840193841161084d578383611db19460009603611db7575b505050611da1611cfa565b6000526010602052604060002090565b55600190565b611da1611ddf91611dd7611dcd611df895611c47565b90549060031b1c90565b928391611c47565b90919082549060031b91821b91600019901b1916179055565b55388080611d96565b5050600090565b9190820180921161084d57565b6000602091604051838101906301ffc9a760e01b808352602482015260248152611e3e81611368565b5191617530fa6000513d82611e5f575b5081611e58575090565b9050151590565b60201115915038611e4e565b6000602091604051838101906301ffc9a760e01b825263ffffffff60e01b602482015260248152611e3e81611368565b6000602091604051838101906301ffc9a760e01b8252632685120760e21b602482015260248152611e3e81611368565b6000602091604051838101906301ffc9a760e01b8252634e22db3760e11b602482015260248152611e3e81611368565b90611f0582611a49565b604090611f1482519182611383565b8381528093611f25601f1991611a49565b0191600090815b848110611f3a575050505050565b6020908251611f4881611332565b848152828581830152828701015201611f2c565b600f54811015611b2d577f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac80201549081600052601160205260406000205490565b90600182811c92168015611fcc575b6020831014611fb657565b634e487b7160e01b600052602260045260246000fd5b91607f1691611fab565b8181029291811591840414171561084d57565b60018215171561084d5760018060a01b03809116600052600d602052604060002090815483810180911161084d57909155600854166001600160a01b0316600052600d60205290565b90916120416127109184611fd6565b04908183039083821161084d576001600160a01b039081166000908152600d6020526040902080549092810190811061084d57909155600854166001600160a01b03166000908152600d60205260409020805491820180921161084d575590565b81159081156120d5575b50611cf4576120ba906120f3565b90156120c35790565b60405163665c1c5760e01b8152600490fd5b90506001600160a01b03806120e984612700565b16911614386120ac565b6000526011602052604060002054801560001461211e57506010602052604060002054151590600090565b600191565b9060209081838203126102ce5782356001600160401b03938482116102ce57019080601f830112156102ce57813561215a81611a49565b9460409061216a82519788611383565b828752858088019360051b860101948486116102ce57868101935b86851061219757505050505050505090565b84358381116102ce57820186603f820112156102ce5788916121c1888388868096013591016113ce565b815201940193612185565b906121d682611a49565b6121e36040519182611383565b82815280926121f4601f1991611a49565b019060005b82811061220557505050565b8060606020809385010152016121f9565b9190811015611b2d5760051b0190565b90601f811161223457505050565b600091825260208220906020601f850160051c83019410612270575b601f0160051c01915b82811061226557505050565b818155600101612259565b9092508290612250565b91909182516001600160401b03811161132d576122a18161229b8454611f9c565b84612226565b602080601f83116001146122dd5750819293946000926122d2575b50508160011b916000199060031b1c1916179055565b0151905038806122bc565b90601f198316956122f385600052602060002090565b926000905b88821061233057505083600195969710612317575b505050811b019055565b015160001960f88460031b161c1916905538808061230d565b806001859682949686015181550195019301906122f8565b9261236f919261235d91969596810190612123565b93612369368486611a60565b90612478565b9461237a86516121cc565b9460005b87518110156123de57806123d4896123cf6123bd6123b6856123af8c8c6123a86123d99b89611b19565b5191612216565b3594611b19565b518b611b19565b51916000526012602052604060002090565b61227a565b611af4565b61237e565b509492509450506123f59150600b54905190611fd6565b8015801561240257505050565b6000928392839283928391612424575b6001600160a01b031690f11561064d57565b6108fc9150612412565b60405161243a8161134d565b60008152906000368137565b9061245082611a49565b61245d6040519182611383565b828152809261246e601f1991611a49565b0190602036910137565b805161248381610f84565b61248c81610f84565b60018091146125f157600282516124a281610f84565b6124ab81610f84565b146125e657600382516124bd81610f84565b6124c681610f84565b1461257b57600482516124d881610f84565b6124e181610f84565b146124f8576040516332aed2cf60e21b8152600490fd5b8061250c612507855185612629565b612446565b93600080925b61251f575b505050505090565b8151831015612576576125328383611b19565b51612541826020880151611b19565b511461256c5761255f8184612559612565948a611b19565b52611af4565b92611af4565b9183612512565b9161256590611af4565b612517565b90602001908061258c835151612446565b93600080925b61259e57505050505090565b8151831015612576576125b18383611b19565b516125bd828751611b19565b51036125dc5761255f81846125596125d5948a611b19565b9183612592565b916125d590611af4565b50505061039d61242e565b916125fd915051612446565b906000815b61260b57505090565b8251811015611b975780806125596126239386611b19565b81612602565b906001825161263781610f84565b61264081610f84565b146126c0576002825161265281610f84565b61265b81610f84565b14611e01576003825161266d81610f84565b61267681610f84565b146126b7576004825161268881610f84565b61269181610f84565b146126a8576040516332aed2cf60e21b8152600490fd5b602061039d9201515190611b32565b50602001515190565b905090565b6001600160a01b031680156126ee5760005260056020526001600160401b036040600020541690565b6040516323d3ad8160e21b8152600490fd5b600081806001111561271f575b604051636f96cda160e11b8152600490fd5b815481101561270d5781526004906020918083526040928383205494600160e01b86161561274f5750505061270d565b93929190935b851561276357505050505090565b60001901808352818552838320549550612755565b806001111590816127a7575b8161278d575090565b90506000526004602052600160e01b604060002054161590565b60005481109150612784565b906127bd83612700565b6001600160a01b0383811692828216849003612970576000868152600660205260409020805490926127fe6001600160a01b03881633908114908414171590565b612915575b82169586156129035761285693612834926128f9575b506001600160a01b0316600090815260056020526040902090565b80546000190190556001600160a01b0316600090815260056020526040902090565b80546001019055600160e11b804260a01b85171761287e866000526004602052604060002090565b558116156128af575b507fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600080a4565b600184016128c7816000526004602052604060002090565b54156128d4575b50612887565b60005481146128ce576128f1906000526004602052604060002090565b5538806128ce565b6000905538612819565b604051633a954ecd60e21b8152600490fd5b6129596111446129523361293b8b60018060a01b03166000526007602052604060002090565b9060018060a01b0316600052602052604060002090565b5460ff1690565b1561280357604051632ce44b5f60e11b8152600490fd5b60405162a1148160e81b8152600490fd5b92919061298f8282866127b3565b803b61299c575b50505050565b6129a593612adf565b156129b35738808080612996565b6040516368d2bf6b60e11b8152600490fd5b908160209103126102ce575161039d816102bc565b61039d939260809260018060a01b03168252600060208301526040820152816060820152019061034c565b6001600160a01b03918216815291166020820152604081019190915260806060820181905261039d9291019061034c565b612a5f60209160009394604051948580948193630a85bd0160e11b998a845233600485016129da565b03926001600160a01b03165af160009181612aaf575b50612aa157612a82611aae565b80519081612a9c576040516368d2bf6b60e11b8152600490fd5b602001fd5b6001600160e01b0319161490565b612ad191925060203d8111612ad8575b612ac98183611383565b8101906129c5565b9038612a75565b503d612abf565b92602091612a5f936000604051809681958294630a85bd0160e11b9a8b85523360048601612a05565b604090815191612b178361134d565b600080845280546001600160a01b038416825260056020526040822091949180546801000000000000000101905560008181526004602052604090206001600160a01b03851694904260a01b8617600160e11b179055600191828101957fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef82828a838180a484885b898103612c325750505015612c2257858755813b612bc1575b50505050505050565b9180805b612be2575b50505050505081540361048257808080808080612bb8565b15612c15575b86612bfa611144868487019686612a36565b612c045781612bc5565b85516368d2bf6b60e11b8152600490fd5b858310612be85780612bca565b8451622e076360e81b8152600490fd5b80848c858180a4018590612b9f565b60405190608082018281106001600160401b0382111761132d5760405260006060838281528260208201528260408201520152565b612c7e612c41565b50612c87612c41565b600182108015612cc4575b6126c05750612ca081612cd0565b60408101516126c05750612cbf61039d91612cb9612c41565b50612700565b612ceb565b50600054821015612c92565b612cd8612c41565b50600052600460205261039d6040600020545b90612cf4612c41565b6001600160a01b038316815260a083901c6001600160401b03166020820152600160e01b83161515604082015260e89290921c6060830152565b9082811015612e6e57600091825491600192838210612e66575b808611612e5e575b50612d5a826126c5565b9185821015612e5657818603838110612e4e575b505b612d7983612446565b958315612e45578493612d8b84612c76565b918794604093612da061114486830151151590565b612e33575b50955b612db9575b50505050505050815290565b8086141580612e29575b15612e24578686612dd48298612cd0565b80860151612e1e57516001600160a01b0390811680612e16575b5080871690881614612e02575b0195612da8565b80612e10838c019b8d611b19565b52612dfb565b975038612dee565b50612dfb565b612dad565b5081881415612dc3565b516001600160a01b0316955038612da5565b50505050505090565b925038612d6e565b849250612d70565b945038612d50565b839150612d48565b604051631960ccad60e11b8152600490fdfea264697066735822122072c309f6972688bc4f6ddefa359d9980f7007bf4ed21b72029a6d41df4e1a1a264736f6c63430008120033",
  "devdoc": {
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
      },
      "ApprovalForAll(address,address,bool)": {
        "details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
      },
      "ConsecutiveTransfer(uint256,uint256,address,address)": {
        "details": "Emitted when tokens in `fromTokenId` to `toTokenId` (inclusive) is transferred from `from` to `to`, as defined in the [ERC2309](https://eips.ethereum.org/EIPS/eip-2309) standard. See {_mintERC2309} for more details."
      },
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `tokenId` token is transferred from `from` to `to`."
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "acceptTaskResults(uint256[],bytes,bytes)": {
        "params": {
          "_proof": "some proof of having completed the identiied tasks that the acceptor can verify.",
          "_report": "some data provided by the submitter that the requester may or may not trust",
          "_taskIds": "a sorted set of taskIds completed in this submission"
        }
      },
      "approve(address,uint256)": {
        "details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
      },
      "balanceOf(address)": {
        "details": "Returns the number of tokens in `owner`'s account."
      },
      "explicitOwnershipOf(uint256)": {
        "details": "Returns the `TokenOwnership` struct at `tokenId` without reverting. If the `tokenId` is out of bounds: - `addr = address(0)` - `startTimestamp = 0` - `burned = false` - `extraData = 0` If the `tokenId` is burned: - `addr = <Address of owner before token was burned>` - `startTimestamp = <Timestamp when token was burned>` - `burned = true` - `extraData = <Extra data when token was burned>` Otherwise: - `addr = <Address of owner>` - `startTimestamp = <Timestamp of start of ownership>` - `burned = false` - `extraData = <Extra data at start of ownership>`"
      },
      "explicitOwnershipsOf(uint256[])": {
        "details": "Returns an array of `TokenOwnership` structs at `tokenIds` in order. See {ERC721AQueryable-explicitOwnershipOf}"
      },
      "getApproved(uint256)": {
        "details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
      },
      "isApprovedForAll(address,address)": {
        "details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}."
      },
      "name()": {
        "details": "Returns the token collection name."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "Equivalent to `safeTransferFrom(from, to, tokenId, '')`."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
      },
      "setApprovalForAll(address,bool)": {
        "details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified) to learn more about how these ids are created. This function call must use less than 30000 gas."
      },
      "symbol()": {
        "details": "Returns the token collection symbol."
      },
      "tokensOfOwner(address)": {
        "details": "Returns an array of token IDs owned by `owner`. This function scans the ownership mapping and is O(`totalSupply`) in complexity. It is meant to be called off-chain. See {ERC721AQueryable-tokensOfOwnerIn} for splitting the scan into multiple smaller scans if the collection is large enough to cause an out-of-gas error (10K collections should be fine)."
      },
      "tokensOfOwnerIn(address,uint256,uint256)": {
        "details": "Returns an array of token IDs owned by `owner`, in the range [`start`, `stop`) (i.e. `start <= tokenId < stop`). This function allows for tokens to be queried if the collection grows too big for a single call of {ERC721AQueryable-tokensOfOwner}. Requirements: - `start < stop`"
      },
      "totalSupply()": {
        "details": "Returns the total number of tokens in existence. Burned tokens will reduce the count. To get the total number of tokens minted, please see {_totalMinted}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "Transfers `tokenId` from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "AcceptedTaskIdsNotSorted()": [
        {
          "notice": "The set of accepted task ids was not sorted."
        }
      ],
      "ApprovalCallerNotOwnerNorApproved()": [
        {
          "notice": "The caller must own the token or be an approved operator."
        }
      ],
      "ApprovalQueryForNonexistentToken()": [
        {
          "notice": "The token does not exist."
        }
      ],
      "BalanceQueryForZeroAddress()": [
        {
          "notice": "Cannot query the balance for the zero address."
        }
      ],
      "CannotSelfBreed()": [
        {
          "notice": "A trout cannot breed with itself."
        }
      ],
      "InvalidQueryRange()": [
        {
          "notice": "Invalid query range (`start` >= `stop`)."
        }
      ],
      "MintERC2309QuantityExceedsLimit()": [
        {
          "notice": "The `quantity` minted with ERC2309 exceeds the safety limit."
        }
      ],
      "MintToZeroAddress()": [
        {
          "notice": "Cannot mint to the zero address."
        }
      ],
      "MintZeroQuantity()": [
        {
          "notice": "The quantity of tokens minted must be more than zero."
        }
      ],
      "NoSuchToken(uint256)": [
        {
          "notice": "The token does not exist;"
        }
      ],
      "NotListed()": [
        {
          "notice": "One of the trout you tried to breed is neither owned by you nor listed for public breeding."
        }
      ],
      "NotOwner()": [
        {
          "notice": "You are not the owner of the trout;"
        }
      ],
      "OwnerQueryForNonexistentToken()": [
        {
          "notice": "The token does not exist."
        }
      ],
      "OwnershipNotInitializedForExtraData()": [
        {
          "notice": "The `extraData` cannot be set on an unintialized ownership slot."
        }
      ],
      "PaymentRequired(uint256)": [
        {
          "notice": "Not enough value was sent."
        }
      ],
      "SubmisionTaskIdsNotSorted()": [
        {
          "notice": "The input task ids were not sorted."
        }
      ],
      "TransferCallerNotOwnerNorApproved()": [
        {
          "notice": "The caller must own the token or be an approved operator."
        }
      ],
      "TransferFromIncorrectOwner()": [
        {
          "notice": "The token must be owned by `from`."
        }
      ],
      "TransferToNonERC721ReceiverImplementer()": [
        {
          "notice": "Cannot safely transfer to a contract that does not implement the ERC721Receiver interface."
        }
      ],
      "TransferToZeroAddress()": [
        {
          "notice": "Cannot transfer to the zero address."
        }
      ],
      "URIQueryForNonexistentToken()": [
        {
          "notice": "The token does not exist."
        }
      ]
    },
    "events": {
      "Delisted(uint256)": {
        "notice": "The trout is no longer breedable."
      },
      "Incubated(uint256)": {
        "notice": "The trout has finished incubating."
      },
      "Listed(uint256,uint256)": {
        "notice": "The trout was listed as breedable."
      },
      "Spawned(uint256,uint256,uint256)": {
        "notice": "A new trouthas been spawned."
      }
    },
    "kind": "user",
    "methods": {
      "acceptTaskResults(uint256[],bytes,bytes)": {
        "notice": "Accepts one or more elements of a task runner's task results submission, returning the seto tasks that were accepted."
      },
      "breed(uint256,uint256)": {
        "notice": "Breeds any two trout to produce a third trout that will be owned by the caller. This method must be called with enough value to pay for the two trouts' fees and the minting fee."
      },
      "delist(uint256)": {
        "notice": "Makes a trout not breedable."
      },
      "getBreedingFee(address,uint256,uint256)": {
        "notice": "Returns the number of tokens that must be paid to breed the two trout."
      },
      "getStuds(uint256,uint256)": {
        "notice": "Paginated list of trout listed for breeding."
      },
      "list(uint256,uint256)": {
        "notice": "Makes a trout breedable."
      },
      "mint()": {
        "notice": "Transmutes money into trout."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4279,
        "contract": "contracts/NFTrout.sol:NFTrout",
        "label": "_currentIndex",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 4281,
        "contract": "contracts/NFTrout.sol:NFTrout",
        "label": "_burnCounter",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 4283,
        "contract": "contracts/NFTrout.sol:NFTrout",
        "label": "_name",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 4285,
        "contract": "contracts/NFTrout.sol:NFTrout",
        "label": "_symbol",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 4289,
        "contract": "contracts/NFTrout.sol:NFTrout",
        "label": "_packedOwnerships",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 4293,
        "contract": "contracts/NFTrout.sol:NFTrout",
        "label": "_packedAddressData",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4298,
        "contract": "contracts/NFTrout.sol:NFTrout",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_struct(TokenApprovalRef)4211_storage)"
      },
      {
        "astId": 4304,
        "contract": "contracts/NFTrout.sol:NFTrout",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1036,
        "contract": "contracts/NFTrout.sol:NFTrout",
        "label": "_owner",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 1159,
        "contract": "contracts/NFTrout.sol:NFTrout",
        "label": "_paused",
        "offset": 20,
        "slot": "8",
        "type": "t_bool"
      },
      {
        "astId": 897,
        "contract": "contracts/NFTrout.sol:NFTrout",
        "label": "taskHub_",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(ITaskHubV1)743"
      },
      {
        "astId": 808,
        "contract": "contracts/NFTrout.sol:NFTrout",
        "label": "taskAcceptor_",
        "offset": 0,
        "slot": "10",
        "type": "t_contract(ITaskAcceptorV1)101"
      },
      {
        "astId": 3352,
        "contract": "contracts/NFTrout.sol:NFTrout",
        "label": "mintReward",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 3354,
        "contract": "contracts/NFTrout.sol:NFTrout",
        "label": "matchmakingBps",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 3358,
        "contract": "contracts/NFTrout.sol:NFTrout",
        "label": "earnings",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3364,
        "contract": "contracts/NFTrout.sol:NFTrout",
        "label": "parents",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_userDefinedValueType(TokenId)3259,t_struct(Parents)3350_storage)"
      },
      {
        "astId": 3368,
        "contract": "contracts/NFTrout.sol:NFTrout",
        "label": "studs",
        "offset": 0,
        "slot": "15",
        "type": "t_struct(UintToUintMap)1747_storage"
      },
      {
        "astId": 3373,
        "contract": "contracts/NFTrout.sol:NFTrout",
        "label": "tokenCids",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_userDefinedValueType(TokenId)3259,t_string_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ITaskAcceptorV1)101": {
        "encoding": "inplace",
        "label": "contract ITaskAcceptorV1",
        "numberOfBytes": "20"
      },
      "t_contract(ITaskHubV1)743": {
        "encoding": "inplace",
        "label": "contract ITaskHubV1",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(TokenApprovalRef)4211_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ERC721A.TokenApprovalRef)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenApprovalRef)4211_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_userDefinedValueType(TokenId)3259,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_userDefinedValueType(TokenId)3259",
        "label": "mapping(TokenId => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_userDefinedValueType(TokenId)3259,t_struct(Parents)3350_storage)": {
        "encoding": "mapping",
        "key": "t_userDefinedValueType(TokenId)3259",
        "label": "mapping(TokenId => struct NFTrout.Parents)",
        "numberOfBytes": "32",
        "value": "t_struct(Parents)3350_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Bytes32Set)2828_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Bytes32Set",
        "members": [
          {
            "astId": 2827,
            "contract": "contracts/NFTrout.sol:NFTrout",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)2634_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Bytes32ToBytes32Map)1517_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableMap.Bytes32ToBytes32Map",
        "members": [
          {
            "astId": 1512,
            "contract": "contracts/NFTrout.sol:NFTrout",
            "label": "_keys",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Bytes32Set)2828_storage"
          },
          {
            "astId": 1516,
            "contract": "contracts/NFTrout.sol:NFTrout",
            "label": "_values",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_bytes32,t_bytes32)"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Parents)3350_storage": {
        "encoding": "inplace",
        "label": "struct NFTrout.Parents",
        "members": [
          {
            "astId": 3346,
            "contract": "contracts/NFTrout.sol:NFTrout",
            "label": "left",
            "offset": 0,
            "slot": "0",
            "type": "t_userDefinedValueType(TokenId)3259"
          },
          {
            "astId": 3349,
            "contract": "contracts/NFTrout.sol:NFTrout",
            "label": "right",
            "offset": 0,
            "slot": "1",
            "type": "t_userDefinedValueType(TokenId)3259"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)2634_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 2629,
            "contract": "contracts/NFTrout.sol:NFTrout",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 2633,
            "contract": "contracts/NFTrout.sol:NFTrout",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(TokenApprovalRef)4211_storage": {
        "encoding": "inplace",
        "label": "struct ERC721A.TokenApprovalRef",
        "members": [
          {
            "astId": 4210,
            "contract": "contracts/NFTrout.sol:NFTrout",
            "label": "value",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(UintToUintMap)1747_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableMap.UintToUintMap",
        "members": [
          {
            "astId": 1746,
            "contract": "contracts/NFTrout.sol:NFTrout",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Bytes32ToBytes32Map)1517_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_userDefinedValueType(TokenId)3259": {
        "encoding": "inplace",
        "label": "TokenId",
        "numberOfBytes": "32"
      }
    }
  }
}