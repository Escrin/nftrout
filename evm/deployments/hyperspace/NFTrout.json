{
  "address": "0x0E9B0116C9E649ae26070F3CCc702798099b8303",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract LilypadEvents",
          "name": "_lilypadEvents",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_mintFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_matchmakingBps",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_genesisMint",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ApprovalCallerNotOwnerNorApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApprovalQueryForNonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BalanceQueryForZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CannotSelfBreed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidQueryRange",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintERC2309QuantityExceedsLimit",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintZeroQuantity",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "TokenId",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "NoSuchToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotLilypad",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotListed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OwnerQueryForNonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OwnershipNotInitializedForExtraData",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PaymentRequired",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferCallerNotOwnerNorApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferFromIncorrectOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferToNonERC721ReceiverImplementer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "URIQueryForNonexistentToken",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fromTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "toTokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "ConsecutiveTransfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "TokenId",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Delisted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "mintFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "matchmakingBps",
          "type": "uint256"
        }
      ],
      "name": "FeesChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "TokenId",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "Listed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "TokenId",
          "name": "left",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "TokenId",
          "name": "right",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "JobId",
          "name": "job",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "TokenId",
          "name": "child",
          "type": "uint256"
        }
      ],
      "name": "Spawned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "TokenId",
          "name": "_left",
          "type": "uint256"
        },
        {
          "internalType": "TokenId",
          "name": "_right",
          "type": "uint256"
        }
      ],
      "name": "breed",
      "outputs": [
        {
          "internalType": "TokenId",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "TokenId",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "delist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "earnings",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "explicitOwnershipOf",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "startTimestamp",
              "type": "uint64"
            },
            {
              "internalType": "bool",
              "name": "burned",
              "type": "bool"
            },
            {
              "internalType": "uint24",
              "name": "extraData",
              "type": "uint24"
            }
          ],
          "internalType": "struct IERC721A.TokenOwnership",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "explicitOwnershipsOf",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "startTimestamp",
              "type": "uint64"
            },
            {
              "internalType": "bool",
              "name": "burned",
              "type": "bool"
            },
            {
              "internalType": "uint24",
              "name": "extraData",
              "type": "uint24"
            }
          ],
          "internalType": "struct IERC721A.TokenOwnership[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "TokenId",
          "name": "_left",
          "type": "uint256"
        },
        {
          "internalType": "TokenId",
          "name": "_right",
          "type": "uint256"
        }
      ],
      "name": "getBreedingFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_offset",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_count",
          "type": "uint256"
        }
      ],
      "name": "getStuds",
      "outputs": [
        {
          "components": [
            {
              "internalType": "TokenId",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fee",
              "type": "uint256"
            }
          ],
          "internalType": "struct NFTrout.Stud[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_jobId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "lilypadCancelled",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lilypadEvents",
      "outputs": [
        {
          "internalType": "contract LilypadEvents",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_jobId",
          "type": "uint256"
        },
        {
          "internalType": "enum LilypadResultType",
          "name": "_resultType",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "_result",
          "type": "string"
        }
      ],
      "name": "lilypadFulfilled",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "TokenId",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "list",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "matchmakingBps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mint",
      "outputs": [
        {
          "components": [
            {
              "internalType": "TokenId",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "TokenId",
              "name": "left",
              "type": "uint256"
            },
            {
              "internalType": "TokenId",
              "name": "right",
              "type": "uint256"
            },
            {
              "internalType": "JobId",
              "name": "jobId",
              "type": "uint256"
            }
          ],
          "internalType": "struct NFTrout.Receipt",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "TokenId",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "receipts",
      "outputs": [
        {
          "internalType": "TokenId",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "TokenId",
          "name": "left",
          "type": "uint256"
        },
        {
          "internalType": "TokenId",
          "name": "right",
          "type": "uint256"
        },
        {
          "internalType": "JobId",
          "name": "jobId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mintFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_matchBps",
          "type": "uint256"
        }
      ],
      "name": "setFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract LilypadEvents",
          "name": "_lilypadEvents",
          "type": "address"
        }
      ],
      "name": "setLilypadEvents",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "tokensOfOwner",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stop",
          "type": "uint256"
        }
      ],
      "name": "tokensOfOwnerIn",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x656064710eed2c65489be7115e9b1d8bc1580251ce66c34bb26b7e961875c8d7",
  "receipt": {
    "to": null,
    "from": "0x013e84e68AF747DE29F224747011a9c7f8828f08",
    "contractAddress": "0x0E9B0116C9E649ae26070F3CCc702798099b8303",
    "transactionIndex": 0,
    "gasUsed": "110892263",
    "logsBloom": "0xb4fb74f15e5f7ab94d4588e7bd902ff1ce34afe9a27503fb6799a89a96aa4db8fb726360f935de0fe9c24720e67e84c50edf59d06e5496a0afb54f791a7efff85739fff8fff9bfcef8145f2e47be43b6bbcbbe752f7f75e8ecfe3135f4fbf5f6dfd9e0611fcf5f2c30aa2f7f3f51dce3661fafa5d0fc2ecffb85b6f9f76de1fcca9dce6fc5507957dbe7b0527fe079fe9d6abfd9f58ffefcda711c75e7d3b8107efd5e47a36b32bf2ebfafbe7eec2df30766f21d19c4bd68d9fb7c5ce6b54f3acc7635f2b85574d9464cbb8b9b7fd32fcbe6ed08d57dbb34fdd3fd3a7f4ff2bab393f5ceadedbed9ff9b86d76a0dfb9c34758d8301b3fdf6df7f3ae9df2cbfc1",
    "blockHash": "0x577620d9bdb466fe5ce7664840e90069eb50159f8a4d9fb3d7c11d18223ef27a",
    "transactionHash": "0x656064710eed2c65489be7115e9b1d8bc1580251ce66c34bb26b7e961875c8d7",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 240032,
        "transactionHash": "0x656064710eed2c65489be7115e9b1d8bc1580251ce66c34bb26b7e961875c8d7",
        "address": "0x0E9B0116C9E649ae26070F3CCc702798099b8303",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000013e84e68af747de29f224747011a9c7f8828f08"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x577620d9bdb466fe5ce7664840e90069eb50159f8a4d9fb3d7c11d18223ef27a"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 240032,
        "transactionHash": "0x656064710eed2c65489be7115e9b1d8bc1580251ce66c34bb26b7e961875c8d7",
        "address": "0x0E9B0116C9E649ae26070F3CCc702798099b8303",
        "topics": [
          "0xdeaa91b6123d068f5821d0fb0678463d1a8a6079fe8af5de3ce5e896dcf9133d",
          "0x0000000000000000000000000000000000000000000000000000000000000001",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a885b1f77e4185f98b4d4dbe752b212b18b5d551"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000024",
        "logIndex": 1,
        "blockHash": "0x577620d9bdb466fe5ce7664840e90069eb50159f8a4d9fb3d7c11d18223ef27a"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 240032,
        "transactionHash": "0x656064710eed2c65489be7115e9b1d8bc1580251ce66c34bb26b7e961875c8d7",
        "address": "0x0E9B0116C9E649ae26070F3CCc702798099b8303",
        "topics": [
          "0xdeaa91b6123d068f5821d0fb0678463d1a8a6079fe8af5de3ce5e896dcf9133d",
          "0x0000000000000000000000000000000000000000000000000000000000000025",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000056e5f834f88f9f7631e9d6a43254e173478ce06a"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000047",
        "logIndex": 2,
        "blockHash": "0x577620d9bdb466fe5ce7664840e90069eb50159f8a4d9fb3d7c11d18223ef27a"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 240032,
        "transactionHash": "0x656064710eed2c65489be7115e9b1d8bc1580251ce66c34bb26b7e961875c8d7",
        "address": "0x0E9B0116C9E649ae26070F3CCc702798099b8303",
        "topics": [
          "0xdeaa91b6123d068f5821d0fb0678463d1a8a6079fe8af5de3ce5e896dcf9133d",
          "0x0000000000000000000000000000000000000000000000000000000000000048",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f29ac257c03cba76da7d3c4a34f2ca14b563260d"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000060",
        "logIndex": 3,
        "blockHash": "0x577620d9bdb466fe5ce7664840e90069eb50159f8a4d9fb3d7c11d18223ef27a"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 240032,
        "transactionHash": "0x656064710eed2c65489be7115e9b1d8bc1580251ce66c34bb26b7e961875c8d7",
        "address": "0x0E9B0116C9E649ae26070F3CCc702798099b8303",
        "topics": [
          "0xdeaa91b6123d068f5821d0fb0678463d1a8a6079fe8af5de3ce5e896dcf9133d",
          "0x0000000000000000000000000000000000000000000000000000000000000061",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000bd34678c8e17d4d6f221b4cb912d79c3443f8034"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000006c",
        "logIndex": 4,
        "blockHash": "0x577620d9bdb466fe5ce7664840e90069eb50159f8a4d9fb3d7c11d18223ef27a"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 240032,
        "transactionHash": "0x656064710eed2c65489be7115e9b1d8bc1580251ce66c34bb26b7e961875c8d7",
        "address": "0x0E9B0116C9E649ae26070F3CCc702798099b8303",
        "topics": [
          "0xdeaa91b6123d068f5821d0fb0678463d1a8a6079fe8af5de3ce5e896dcf9133d",
          "0x000000000000000000000000000000000000000000000000000000000000006d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000007b9bb19911763a372e35f95d0e31031c0884b6ec"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000077",
        "logIndex": 5,
        "blockHash": "0x577620d9bdb466fe5ce7664840e90069eb50159f8a4d9fb3d7c11d18223ef27a"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 240032,
        "transactionHash": "0x656064710eed2c65489be7115e9b1d8bc1580251ce66c34bb26b7e961875c8d7",
        "address": "0x0E9B0116C9E649ae26070F3CCc702798099b8303",
        "topics": [
          "0xdeaa91b6123d068f5821d0fb0678463d1a8a6079fe8af5de3ce5e896dcf9133d",
          "0x0000000000000000000000000000000000000000000000000000000000000078",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ed03ea9c96ec39097548256e428a163e5f524e47"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000080",
        "logIndex": 6,
        "blockHash": "0x577620d9bdb466fe5ce7664840e90069eb50159f8a4d9fb3d7c11d18223ef27a"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 240032,
        "transactionHash": "0x656064710eed2c65489be7115e9b1d8bc1580251ce66c34bb26b7e961875c8d7",
        "address": "0x0E9B0116C9E649ae26070F3CCc702798099b8303",
        "topics": [
          "0xdeaa91b6123d068f5821d0fb0678463d1a8a6079fe8af5de3ce5e896dcf9133d",
          "0x0000000000000000000000000000000000000000000000000000000000000081",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000404e70a162487c9af8982a89a5453f389d5257b1"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000086",
        "logIndex": 7,
        "blockHash": "0x577620d9bdb466fe5ce7664840e90069eb50159f8a4d9fb3d7c11d18223ef27a"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 240032,
        "transactionHash": "0x656064710eed2c65489be7115e9b1d8bc1580251ce66c34bb26b7e961875c8d7",
        "address": "0x0E9B0116C9E649ae26070F3CCc702798099b8303",
        "topics": [
          "0xdeaa91b6123d068f5821d0fb0678463d1a8a6079fe8af5de3ce5e896dcf9133d",
          "0x0000000000000000000000000000000000000000000000000000000000000087",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000007fdb709f97dcd5f5a51054ad84a51107b2c15ef3"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000008b",
        "logIndex": 8,
        "blockHash": "0x577620d9bdb466fe5ce7664840e90069eb50159f8a4d9fb3d7c11d18223ef27a"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 240032,
        "transactionHash": "0x656064710eed2c65489be7115e9b1d8bc1580251ce66c34bb26b7e961875c8d7",
        "address": "0x0E9B0116C9E649ae26070F3CCc702798099b8303",
        "topics": [
          "0xdeaa91b6123d068f5821d0fb0678463d1a8a6079fe8af5de3ce5e896dcf9133d",
          "0x000000000000000000000000000000000000000000000000000000000000008c",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ae378d2e106d5c3ebdb7d960bd9c9093e23e680f"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000008f",
        "logIndex": 9,
        "blockHash": "0x577620d9bdb466fe5ce7664840e90069eb50159f8a4d9fb3d7c11d18223ef27a"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 240032,
        "transactionHash": "0x656064710eed2c65489be7115e9b1d8bc1580251ce66c34bb26b7e961875c8d7",
        "address": "0x0E9B0116C9E649ae26070F3CCc702798099b8303",
        "topics": [
          "0xdeaa91b6123d068f5821d0fb0678463d1a8a6079fe8af5de3ce5e896dcf9133d",
          "0x0000000000000000000000000000000000000000000000000000000000000090",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000532bf0916f509883eaa1eca5b270d753e152855"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000092",
        "logIndex": 10,
        "blockHash": "0x577620d9bdb466fe5ce7664840e90069eb50159f8a4d9fb3d7c11d18223ef27a"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 240032,
        "transactionHash": "0x656064710eed2c65489be7115e9b1d8bc1580251ce66c34bb26b7e961875c8d7",
        "address": "0x0E9B0116C9E649ae26070F3CCc702798099b8303",
        "topics": [
          "0xdeaa91b6123d068f5821d0fb0678463d1a8a6079fe8af5de3ce5e896dcf9133d",
          "0x0000000000000000000000000000000000000000000000000000000000000093",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000002772c7df084cbe204576731d711b622234bdd9a7"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000095",
        "logIndex": 11,
        "blockHash": "0x577620d9bdb466fe5ce7664840e90069eb50159f8a4d9fb3d7c11d18223ef27a"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 240032,
        "transactionHash": "0x656064710eed2c65489be7115e9b1d8bc1580251ce66c34bb26b7e961875c8d7",
        "address": "0x0E9B0116C9E649ae26070F3CCc702798099b8303",
        "topics": [
          "0xdeaa91b6123d068f5821d0fb0678463d1a8a6079fe8af5de3ce5e896dcf9133d",
          "0x0000000000000000000000000000000000000000000000000000000000000096",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a9ad6c62611884672dfef7e20a115778c4b0bab1"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000096",
        "logIndex": 12,
        "blockHash": "0x577620d9bdb466fe5ce7664840e90069eb50159f8a4d9fb3d7c11d18223ef27a"
      }
    ],
    "blockNumber": 240032,
    "cumulativeGasUsed": "0",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x11C61690d308f89217D296318818713aa055b412",
    "1000000000000000000",
    500,
    true
  ],
  "numDeployments": 7,
  "solcInputHash": "e66aca37f74045796f124e3e1722a108",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract LilypadEvents\",\"name\":\"_lilypadEvents\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_mintFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_matchmakingBps\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_genesisMint\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ApprovalCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotSelfBreed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidQueryRange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintERC2309QuantityExceedsLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroQuantity\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"TokenId\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"NoSuchToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotLilypad\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotListed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnershipNotInitializedForExtraData\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaymentRequired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"URIQueryForNonexistentToken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toTokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"ConsecutiveTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"TokenId\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Delisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"matchmakingBps\",\"type\":\"uint256\"}],\"name\":\"FeesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"TokenId\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"Listed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"TokenId\",\"name\":\"left\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"TokenId\",\"name\":\"right\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"JobId\",\"name\":\"job\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"TokenId\",\"name\":\"child\",\"type\":\"uint256\"}],\"name\":\"Spawned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TokenId\",\"name\":\"_left\",\"type\":\"uint256\"},{\"internalType\":\"TokenId\",\"name\":\"_right\",\"type\":\"uint256\"}],\"name\":\"breed\",\"outputs\":[{\"internalType\":\"TokenId\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TokenId\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"delist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"earnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"explicitOwnershipOf\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"startTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"burned\",\"type\":\"bool\"},{\"internalType\":\"uint24\",\"name\":\"extraData\",\"type\":\"uint24\"}],\"internalType\":\"struct IERC721A.TokenOwnership\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"explicitOwnershipsOf\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"startTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"burned\",\"type\":\"bool\"},{\"internalType\":\"uint24\",\"name\":\"extraData\",\"type\":\"uint24\"}],\"internalType\":\"struct IERC721A.TokenOwnership[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TokenId\",\"name\":\"_left\",\"type\":\"uint256\"},{\"internalType\":\"TokenId\",\"name\":\"_right\",\"type\":\"uint256\"}],\"name\":\"getBreedingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"getStuds\",\"outputs\":[{\"components\":[{\"internalType\":\"TokenId\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"internalType\":\"struct NFTrout.Stud[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_jobId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"lilypadCancelled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lilypadEvents\",\"outputs\":[{\"internalType\":\"contract LilypadEvents\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_jobId\",\"type\":\"uint256\"},{\"internalType\":\"enum LilypadResultType\",\"name\":\"_resultType\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"_result\",\"type\":\"string\"}],\"name\":\"lilypadFulfilled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TokenId\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"list\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"matchmakingBps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mint\",\"outputs\":[{\"components\":[{\"internalType\":\"TokenId\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"TokenId\",\"name\":\"left\",\"type\":\"uint256\"},{\"internalType\":\"TokenId\",\"name\":\"right\",\"type\":\"uint256\"},{\"internalType\":\"JobId\",\"name\":\"jobId\",\"type\":\"uint256\"}],\"internalType\":\"struct NFTrout.Receipt\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TokenId\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"receipts\",\"outputs\":[{\"internalType\":\"TokenId\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"TokenId\",\"name\":\"left\",\"type\":\"uint256\"},{\"internalType\":\"TokenId\",\"name\":\"right\",\"type\":\"uint256\"},{\"internalType\":\"JobId\",\"name\":\"jobId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_matchBps\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract LilypadEvents\",\"name\":\"_lilypadEvents\",\"type\":\"address\"}],\"name\":\"setLilypadEvents\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stop\",\"type\":\"uint256\"}],\"name\":\"tokensOfOwnerIn\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"ConsecutiveTransfer(uint256,uint256,address,address)\":{\"details\":\"Emitted when tokens in `fromTokenId` to `toTokenId` (inclusive) is transferred from `from` to `to`, as defined in the [ERC2309](https://eips.ethereum.org/EIPS/eip-2309) standard. See {_mintERC2309} for more details.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in `owner`'s account.\"},\"explicitOwnershipOf(uint256)\":{\"details\":\"Returns the `TokenOwnership` struct at `tokenId` without reverting. If the `tokenId` is out of bounds: - `addr = address(0)` - `startTimestamp = 0` - `burned = false` - `extraData = 0` If the `tokenId` is burned: - `addr = <Address of owner before token was burned>` - `startTimestamp = <Timestamp when token was burned>` - `burned = true` - `extraData = <Extra data when token was burned>` Otherwise: - `addr = <Address of owner>` - `startTimestamp = <Timestamp of start of ownership>` - `burned = false` - `extraData = <Extra data at start of ownership>`\"},\"explicitOwnershipsOf(uint256[])\":{\"details\":\"Returns an array of `TokenOwnership` structs at `tokenIds` in order. See {ERC721AQueryable-explicitOwnershipOf}\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}.\"},\"name()\":{\"details\":\"Returns the token collection name.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified) to learn more about how these ids are created. This function call must use less than 30000 gas.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokensOfOwner(address)\":{\"details\":\"Returns an array of token IDs owned by `owner`. This function scans the ownership mapping and is O(`totalSupply`) in complexity. It is meant to be called off-chain. See {ERC721AQueryable-tokensOfOwnerIn} for splitting the scan into multiple smaller scans if the collection is large enough to cause an out-of-gas error (10K collections should be fine).\"},\"tokensOfOwnerIn(address,uint256,uint256)\":{\"details\":\"Returns an array of token IDs owned by `owner`, in the range [`start`, `stop`) (i.e. `start <= tokenId < stop`). This function allows for tokens to be queried if the collection grows too big for a single call of {ERC721AQueryable-tokensOfOwner}. Requirements: - `start < stop`\"},\"totalSupply()\":{\"details\":\"Returns the total number of tokens in existence. Burned tokens will reduce the count. To get the total number of tokens minted, please see {_totalMinted}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"ApprovalCallerNotOwnerNorApproved()\":[{\"notice\":\"The caller must own the token or be an approved operator.\"}],\"ApprovalQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}],\"BalanceQueryForZeroAddress()\":[{\"notice\":\"Cannot query the balance for the zero address.\"}],\"CannotSelfBreed()\":[{\"notice\":\"A trout cannot breed with itself.\"}],\"InvalidQueryRange()\":[{\"notice\":\"Invalid query range (`start` >= `stop`).\"}],\"MintERC2309QuantityExceedsLimit()\":[{\"notice\":\"The `quantity` minted with ERC2309 exceeds the safety limit.\"}],\"MintToZeroAddress()\":[{\"notice\":\"Cannot mint to the zero address.\"}],\"MintZeroQuantity()\":[{\"notice\":\"The quantity of tokens minted must be more than zero.\"}],\"NoSuchToken(uint256)\":[{\"notice\":\"The token does not exist;\"}],\"NotLilypad()\":[{\"notice\":\"The caller must be lilypad.\"}],\"NotListed()\":[{\"notice\":\"One of the trout you tried to breed is neither owned by you nor listed for public breeding.\"}],\"NotOwner()\":[{\"notice\":\"You are not the owner of the trout;\"}],\"OwnerQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}],\"OwnershipNotInitializedForExtraData()\":[{\"notice\":\"The `extraData` cannot be set on an unintialized ownership slot.\"}],\"PaymentRequired(uint256)\":[{\"notice\":\"Not enough value was sent.\"}],\"TransferCallerNotOwnerNorApproved()\":[{\"notice\":\"The caller must own the token or be an approved operator.\"}],\"TransferFromIncorrectOwner()\":[{\"notice\":\"The token must be owned by `from`.\"}],\"TransferToNonERC721ReceiverImplementer()\":[{\"notice\":\"Cannot safely transfer to a contract that does not implement the ERC721Receiver interface.\"}],\"TransferToZeroAddress()\":[{\"notice\":\"Cannot transfer to the zero address.\"}],\"URIQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}]},\"events\":{\"Delisted(uint256)\":{\"notice\":\"The trout is no longer breedable.\"},\"Listed(uint256,uint256)\":{\"notice\":\"The trout was listed as breedable.\"},\"Spawned(uint256,uint256,uint256,uint256)\":{\"notice\":\"Two trouts have bred to produce a new trout.\"}},\"kind\":\"user\",\"methods\":{\"breed(uint256,uint256)\":{\"notice\":\"Breeds any two trout to produce a third trout that will be owned by the caller. This method must be called with enough value to pay for the two trouts' fees and the minting fee.\"},\"delist(uint256)\":{\"notice\":\"Makes a trout not breedable.\"},\"getBreedingFee(uint256,uint256)\":{\"notice\":\"Returns the number of tokens that must be paid to breed the two trout. This is also the minting fee when the parents are unset.\"},\"getStuds(uint256,uint256)\":{\"notice\":\"Paginated list of trout listed for breeding.\"},\"list(uint256,uint256)\":{\"notice\":\"Makes a trout breedable.\"},\"mint()\":{\"notice\":\"Transmutes money into trout.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NFTrout.sol\":\"NFTrout\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableMap.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableMap.js.\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Library for managing an enumerable variant of Solidity's\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\n * type.\\n *\\n * Maps have the following properties:\\n *\\n * - Entries are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\\n *\\n *     // Declare a set state variable\\n *     EnumerableMap.UintToAddressMap private myMap;\\n * }\\n * ```\\n *\\n * The following map types are supported:\\n *\\n * - `uint256 -> address` (`UintToAddressMap`) since v3.0.0\\n * - `address -> uint256` (`AddressToUintMap`) since v4.6.0\\n * - `bytes32 -> bytes32` (`Bytes32ToBytes32Map`) since v4.6.0\\n * - `uint256 -> uint256` (`UintToUintMap`) since v4.7.0\\n * - `bytes32 -> uint256` (`Bytes32ToUintMap`) since v4.7.0\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableMap, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableMap.\\n * ====\\n */\\nlibrary EnumerableMap {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Map type with\\n    // bytes32 keys and values.\\n    // The Map implementation uses private functions, and user-facing\\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\\n    // the underlying Map.\\n    // This means that we can only create new EnumerableMaps for types that fit\\n    // in bytes32.\\n\\n    struct Bytes32ToBytes32Map {\\n        // Storage of keys\\n        EnumerableSet.Bytes32Set _keys;\\n        mapping(bytes32 => bytes32) _values;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        Bytes32ToBytes32Map storage map,\\n        bytes32 key,\\n        bytes32 value\\n    ) internal returns (bool) {\\n        map._values[key] = value;\\n        return map._keys.add(key);\\n    }\\n\\n    /**\\n     * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(Bytes32ToBytes32Map storage map, bytes32 key) internal returns (bool) {\\n        delete map._values[key];\\n        return map._keys.remove(key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool) {\\n        return map._keys.contains(key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n    function length(Bytes32ToBytes32Map storage map) internal view returns (uint256) {\\n        return map._keys.length();\\n    }\\n\\n    /**\\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of entries inside the\\n     * array, and it may change when more entries are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32ToBytes32Map storage map, uint256 index) internal view returns (bytes32, bytes32) {\\n        bytes32 key = map._keys.at(index);\\n        return (key, map._values[key]);\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool, bytes32) {\\n        bytes32 value = map._values[key];\\n        if (value == bytes32(0)) {\\n            return (contains(map, key), bytes32(0));\\n        } else {\\n            return (true, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || contains(map, key), \\\"EnumerableMap: nonexistent key\\\");\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        Bytes32ToBytes32Map storage map,\\n        bytes32 key,\\n        string memory errorMessage\\n    ) internal view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || contains(map, key), errorMessage);\\n        return value;\\n    }\\n\\n    // UintToUintMap\\n\\n    struct UintToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        UintToUintMap storage map,\\n        uint256 key,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return set(map._inner, bytes32(key), bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToUintMap storage map, uint256 key) internal returns (bool) {\\n        return remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToUintMap storage map, uint256 key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintToUintMap storage map, uint256 index) internal view returns (uint256, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (uint256(key), uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(UintToUintMap storage map, uint256 key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToUintMap storage map, uint256 key) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(key)));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        UintToUintMap storage map,\\n        uint256 key,\\n        string memory errorMessage\\n    ) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(key), errorMessage));\\n    }\\n\\n    // UintToAddressMap\\n\\n    struct UintToAddressMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        UintToAddressMap storage map,\\n        uint256 key,\\n        address value\\n    ) internal returns (bool) {\\n        return set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\\n        return remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (uint256(key), address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\\n        return (success, address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\\n        return address(uint160(uint256(get(map._inner, bytes32(key)))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        UintToAddressMap storage map,\\n        uint256 key,\\n        string memory errorMessage\\n    ) internal view returns (address) {\\n        return address(uint160(uint256(get(map._inner, bytes32(key), errorMessage))));\\n    }\\n\\n    // AddressToUintMap\\n\\n    struct AddressToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        AddressToUintMap storage map,\\n        address key,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return set(map._inner, bytes32(uint256(uint160(key))), bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(AddressToUintMap storage map, address key) internal returns (bool) {\\n        return remove(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(AddressToUintMap storage map, address key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(AddressToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressToUintMap storage map, uint256 index) internal view returns (address, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (address(uint160(uint256(key))), uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(AddressToUintMap storage map, address key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(uint256(uint160(key))));\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(AddressToUintMap storage map, address key) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(uint256(uint160(key)))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        AddressToUintMap storage map,\\n        address key,\\n        string memory errorMessage\\n    ) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(uint256(uint160(key))), errorMessage));\\n    }\\n\\n    // Bytes32ToUintMap\\n\\n    struct Bytes32ToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        Bytes32ToUintMap storage map,\\n        bytes32 key,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return set(map._inner, key, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(Bytes32ToUintMap storage map, bytes32 key) internal returns (bool) {\\n        return remove(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool) {\\n        return contains(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(Bytes32ToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32ToUintMap storage map, uint256 index) internal view returns (bytes32, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (key, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, key);\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(Bytes32ToUintMap storage map, bytes32 key) internal view returns (uint256) {\\n        return uint256(get(map._inner, key));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        Bytes32ToUintMap storage map,\\n        bytes32 key,\\n        string memory errorMessage\\n    ) internal view returns (uint256) {\\n        return uint256(get(map._inner, key, errorMessage));\\n    }\\n}\\n\",\"keccak256\":\"0x5094b17cb46143943f3206d0738b91a05a7005e979681af7210d534cd3e72f54\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xc3ff3f5c4584e1d9a483ad7ced51ab64523201f4e3d3c65293e4ca8aeb77a961\",\"license\":\"MIT\"},\"contracts/NFTrout.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport {EnumerableMap} from \\\"@openzeppelin/contracts/utils/structs/EnumerableMap.sol\\\";\\nimport {ERC721A} from \\\"erc721a/contracts/ERC721A.sol\\\";\\nimport {IERC721A} from \\\"erc721a/contracts/IERC721A.sol\\\";\\nimport {ERC721AQueryable} from \\\"erc721a/contracts/extensions/ERC721AQueryable.sol\\\";\\n\\nimport {LilypadEvents} from \\\"./lilypad/LilypadEvents.sol\\\";\\nimport {LilypadCallerInterface, LilypadResultType} from \\\"./lilypad/LilypadCallerInterface.sol\\\";\\n\\ntype JobId is uint256;\\ntype TokenId is uint256;\\n\\n/// The caller must be lilypad.\\nerror NotLilypad();\\n/// You are not the owner of the trout;\\nerror NotOwner(); // 30cd7471\\n/// The token does not exist;\\nerror NoSuchToken(TokenId id);\\n/// One of the trout you tried to breed is neither owned by you nor listed for public breeding.\\nerror NotListed();\\n/// Not enough value was sent.\\nerror PaymentRequired(uint256 amount); // 8c4fcd93\\n/// A trout cannot breed with itself.\\nerror CannotSelfBreed(); // 56938583\\n\\ncontract NFTrout is ERC721A, ERC721AQueryable, LilypadCallerInterface, Ownable {\\n    using EnumerableMap for EnumerableMap.UintToUintMap;\\n\\n    /// The trout was listed as breedable.\\n    event Listed(TokenId indexed tokenId, uint256 fee);\\n    /// The trout is no longer breedable.\\n    event Delisted(TokenId indexed tokenId);\\n    /// Two trouts have bred to produce a new trout.\\n    event Spawned(TokenId indexed left, TokenId indexed right, JobId job, TokenId child);\\n    event FeesChanged(uint256 mintFee, uint256 matchmakingBps);\\n\\n    struct Receipt {\\n        TokenId tokenId;\\n        TokenId left;\\n        TokenId right;\\n        JobId jobId;\\n    }\\n\\n    struct Stud {\\n        TokenId tokenId;\\n        uint256 fee;\\n    }\\n\\n    uint256 public mintFee;\\n    uint256 public matchmakingBps;\\n    mapping(address => uint256) public earnings;\\n    mapping(TokenId => Receipt) public receipts;\\n    LilypadEvents public lilypadEvents;\\n\\n    /// token id -> fee\\n    EnumerableMap.UintToUintMap private studs;\\n    mapping(TokenId => string) private tokenCids;\\n    mapping(JobId => TokenId) private tokensByJob;\\n\\n    modifier onlyLilypadEvents() {\\n        if (msg.sender != address(lilypadEvents)) revert NotLilypad();\\n        _;\\n    }\\n\\n    modifier onlyTroutOwner(TokenId _tokenId) {\\n        if (msg.sender != _ownerOf(_tokenId)) revert NotOwner();\\n        _;\\n    }\\n\\n    constructor(\\n        LilypadEvents _lilypadEvents,\\n        uint256 _mintFee,\\n        uint256 _matchmakingBps,\\n        bool _genesisMint\\n    ) ERC721A(\\\"NFTrout Gen 1\\\", \\\"TROUT1\\\") {\\n        lilypadEvents = _lilypadEvents;\\n        mintFee = _mintFee;\\n        matchmakingBps = _matchmakingBps;\\n\\n        if (_genesisMint) {\\n            _mintERC2309(0xa885B1F77e4185F98b4D4dBe752B212B18b5d551, 36);\\n            _mintERC2309(0x56e5F834F88F9f7631E9d6a43254e173478cE06a, 35);\\n            _mintERC2309(0xF29Ac257c03CBA76DA7d3c4A34f2cA14B563260d, 25);\\n            _mintERC2309(0xbd34678C8e17d4D6F221B4Cb912D79C3443F8034, 12);\\n            _mintERC2309(0x7B9Bb19911763A372E35f95d0E31031C0884b6EC, 11);\\n            _mintERC2309(0xEd03EA9c96ec39097548256E428a163E5f524e47, 9);\\n            _mintERC2309(0x404E70A162487c9Af8982a89a5453f389d5257b1, 6);\\n            _mintERC2309(0x7Fdb709F97dcd5F5a51054aD84A51107B2C15EF3, 5);\\n            _mintERC2309(0xAE378d2e106d5C3ebDb7D960BD9c9093e23e680F, 4);\\n            _mintERC2309(0x0532Bf0916F509883eaA1ECA5b270D753E152855, 3);\\n            _mintERC2309(0x2772c7DF084Cbe204576731d711B622234BdD9A7, 3);\\n            _mintERC2309(0xa9ad6C62611884672DfEf7e20a115778C4b0bAb1, 1);\\n        }\\n    }\\n\\n    /// Transmutes money into trout.\\n    function mint() external payable returns (Receipt memory) {\\n        uint256 fee = _getMintFee(msg.sender);\\n        if (_pay(owner(), fee, 0) != msg.value) revert PaymentRequired(mintFee);\\n        TokenId tokenId = _mint(msg.sender);\\n        TokenId z = TokenId.wrap(0);\\n        return _spawn(tokenId, z, z);\\n    }\\n\\n    /// Makes a trout breedable.\\n    function list(TokenId _tokenId, uint256 _fee) external onlyTroutOwner(_tokenId) {\\n        studs.set(TokenId.unwrap(_tokenId), _fee);\\n        emit Listed(_tokenId, _fee);\\n    }\\n\\n    /// Makes a trout not breedable.\\n    function delist(TokenId _tokenId) external onlyTroutOwner(_tokenId) {\\n        studs.remove(TokenId.unwrap(_tokenId));\\n        emit Delisted(_tokenId);\\n    }\\n\\n    /// Breeds any two trout to produce a third trout that will be owned by the caller.\\n    /// This method must be called with enough value to pay for the two trouts' fees and the minting fee.\\n    function breed(TokenId _left, TokenId _right) external payable returns (TokenId tokenId) {\\n        if (!_exists(_left)) revert NoSuchToken(_left);\\n        if (!_exists(_right)) revert NoSuchToken(_right);\\n        if (TokenId.unwrap(_left) == TokenId.unwrap(_right)) revert CannotSelfBreed();\\n\\n        uint256 subtotal;\\n        subtotal += _pay(owner(), _getMintFee(msg.sender), 0);\\n        subtotal += _pay(_ownerOf(_left), _getBreedingFee(msg.sender, _left), matchmakingBps);\\n        subtotal += _pay(_ownerOf(_right), _getBreedingFee(msg.sender, _right), matchmakingBps);\\n        if (subtotal != msg.value) revert PaymentRequired(subtotal);\\n        tokenId = _mint(msg.sender);\\n        _spawn(tokenId, _left, _right);\\n    }\\n\\n    function withdraw() external {\\n        uint256 stack = earnings[msg.sender];\\n        earnings[msg.sender] = 0;\\n        payable(msg.sender).transfer(stack);\\n    }\\n\\n    function setLilypadEvents(LilypadEvents _lilypadEvents) external onlyOwner {\\n        lilypadEvents = _lilypadEvents;\\n    }\\n\\n    function setFees(uint256 _mintFee, uint256 _matchBps) external onlyOwner {\\n        mintFee = _mintFee;\\n        matchmakingBps = _matchBps;\\n        emit FeesChanged(_mintFee, _matchBps);\\n    }\\n\\n    function lilypadFulfilled(\\n        address,\\n        uint256 _jobId,\\n        LilypadResultType _resultType,\\n        string calldata _result\\n    ) external onlyLilypadEvents {\\n        if (_resultType != LilypadResultType.CID) return;\\n        JobId jobId = JobId.wrap(_jobId);\\n        TokenId tokenId = tokensByJob[jobId];\\n        if (!_exists(tokenId)) return;\\n        tokenCids[tokenId] = _result;\\n    }\\n\\n    function lilypadCancelled(address, uint256 _jobId, string calldata) external onlyLilypadEvents {\\n        JobId jobId = JobId.wrap(_jobId);\\n        Receipt memory receipt = receipts[tokensByJob[jobId]];\\n        _doSpawn(receipt.tokenId, receipt.left, receipt.right);\\n    }\\n\\n    /// Paginated list of trout listed for breeding.\\n    function getStuds(uint256 _offset, uint256 _count) external view returns (Stud[] memory) {\\n        uint256 start = _offset > studs.length() ? studs.length() : _offset;\\n        uint256 end = start + _count;\\n        uint256 n = end > studs.length() ? studs.length() - start : _count;\\n        Stud[] memory studz = new Stud[](n);\\n        for (uint256 i; i < n; ++i) {\\n            (uint256 tokenId, uint256 fee) = studs.at(_offset + i);\\n            studz[i] = Stud({tokenId: TokenId.wrap(tokenId), fee: fee});\\n        }\\n        return studz;\\n    }\\n\\n    /// Returns the number of tokens that must be paid to breed the two trout.\\n    /// This is also the minting fee when the parents are unset.\\n    function getBreedingFee(TokenId _left, TokenId _right) public view returns (uint256 fee) {\\n        fee += _getBreedingFee(msg.sender, _left);\\n        fee += _getBreedingFee(msg.sender, _right);\\n        fee += _getMintFee(msg.sender);\\n    }\\n\\n    function tokenURI(\\n        uint256 _tokenId\\n    ) public view virtual override(IERC721A, ERC721A) returns (string memory) {\\n        return string.concat(\\\"ipfs://\\\", tokenCids[TokenId.wrap(_tokenId)]);\\n    }\\n\\n    /// Returns a cost for the payer to breed the trout that is no larger than the list price.\\n    function _getBreedingFee(address _payer, TokenId _tokenId) internal view returns (uint256) {\\n        if (TokenId.unwrap(_tokenId) == 0 || _payer == _ownerOf(_tokenId)) return 0;\\n        (bool exists, uint256 fee) = studs.tryGet(TokenId.unwrap(_tokenId));\\n        if (!exists) revert NotListed();\\n        return fee;\\n    }\\n\\n    function _getMintFee(address _minter) internal view returns (uint256) {\\n        return _minter == owner() ? 0 : mintFee;\\n    }\\n\\n    function _spawn(\\n        TokenId _id,\\n        TokenId _left,\\n        TokenId _right\\n    ) internal returns (Receipt memory receipt) {\\n        receipt = _doSpawn(_id, _left, _right);\\n        emit Spawned(_left, _right, receipt.jobId, _id);\\n    }\\n\\n    function _doSpawn(\\n        TokenId _id,\\n        TokenId _left,\\n        TokenId _right\\n    ) internal returns (Receipt memory receipt) {\\n        // solhint-disable quotes\\n        string memory spec = string.concat(\\n            '{\\\"_lilypad_template\\\": \\\"nftrout\\\", \\\"left\\\": \\\"',\\n            tokenCids[_left],\\n            '\\\", \\\"right\\\": \\\"',\\n            tokenCids[_right],\\n            '\\\", \\\"tokenId\\\": \\\"',\\n            Strings.toString(TokenId.unwrap(_id)),\\n            '\\\"}'\\n        );\\n        // solhint-enable quotes\\n        JobId jobId = JobId.wrap(\\n            lilypadEvents.runBacalhauJob(address(this), spec, LilypadResultType.CID)\\n        );\\n        receipt = Receipt({tokenId: _id, left: _left, right: _right, jobId: jobId});\\n        receipts[_id] = receipt;\\n        tokensByJob[receipt.jobId] = receipt.tokenId;\\n    }\\n\\n    function _pay(\\n        address _payee,\\n        uint256 _value,\\n        uint256 _ownerTakeBps\\n    ) internal returns (uint256 value) {\\n        uint256 take = (_value * _ownerTakeBps) / 10_000;\\n        earnings[_payee] += _value - take;\\n        earnings[owner()] += take;\\n        return _value;\\n    }\\n\\n    function _mint(address _to) internal returns (TokenId tokenId) {\\n        tokenId = TokenId.wrap(_nextTokenId());\\n        _safeMint(_to, 1);\\n    }\\n\\n    function _ownerOf(TokenId _id) internal view returns (address) {\\n        return ownerOf(TokenId.unwrap(_id));\\n    }\\n\\n    function _exists(TokenId _id) internal view returns (bool) {\\n        return _exists(TokenId.unwrap(_id));\\n    }\\n\\n    function _startTokenId() internal view virtual override returns (uint256) {\\n        return 1;\\n    }\\n}\\n\",\"keccak256\":\"0x6393b425fdfce75c5510b187fbf583fbd0eb0e8a46c990073a6f604c47239872\",\"license\":\"MIT\"},\"contracts/lilypad/LilypadCallerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\nenum LilypadResultType {\\n    CID,\\n    StdOut,\\n    StdErr,\\n    ExitCode\\n}\\n\\ninterface LilypadCallerInterface {\\n    function lilypadFulfilled(\\n        address _from,\\n        uint _jobId,\\n        LilypadResultType _resultType,\\n        string calldata _result\\n    ) external;\\n\\n    function lilypadCancelled(address _from, uint _jobId, string calldata _errorMsg) external;\\n}\\n\",\"keccak256\":\"0x24508b3df0031fa4f8e7b5cef114270263cdb47faed2a08af0d538e7d1a58e16\",\"license\":\"MIT\"},\"contracts/lilypad/LilypadEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\nimport {Counters} from \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport {LilypadCallerInterface, LilypadResultType} from \\\"./LilypadCallerInterface.sol\\\";\\n\\nerror LilypadEventsError();\\n\\n/**\\n    @notice An experimental contract for POC work to call Bacalhau jobs from FVM smart contracts\\n*/\\ncontract LilypadEvents is Ownable {\\n    using Counters for Counters.Counter; // create job id's?\\n    Counters.Counter private _jobIds;\\n\\n    // only this contract is allowed to call this bridge\\n    address public authorizedContract;\\n\\n    struct BacalhauJob {\\n        address requestor;\\n        // unique id - though uint only goes up to 2^265 -1 so probably want to handle\\n        // this better in future maybe a hash\\n        uint id;\\n        // stingified params? Seems rife for errors - we may need to consider a\\n        // Base contract and several others that verify details before calling\\n        // bacalhau. Or multiple functions in here to call specific things +\\n        // generic job\\n        string spec;\\n        // what type of result the job wants to receive\\n        LilypadResultType resultType;\\n    }\\n\\n    //testing\\n    struct BacalhauJobResult {\\n        address requestor;\\n        uint id;\\n        bool success;\\n        string result;\\n        LilypadResultType resultType;\\n    }\\n\\n    BacalhauJob[] public bacalhauJobHistory; //complete history of all jobs\\n    BacalhauJobResult[] public bacalhauJobResultHistory;\\n    mapping(address => BacalhauJobResult[]) public bacalhauJobResultByAddress; // jobs by requestor\\n\\n    event NewBacalhauJobSubmitted(BacalhauJob job);\\n    event BacalhauJobResultsReturned(BacalhauJobResult result);\\n\\n    // only this contract is allowed to call \\\"runBacalhauJob\\\"\\n    function setAuthorizedContract(address _authorizedContract) public onlyOwner {\\n        authorizedContract = _authorizedContract;\\n    }\\n\\n    modifier callerIsAuthorizedContract() {\\n        require(msg.sender == authorizedContract, \\\"unauthorized\\\");\\n        _;\\n    }\\n\\n    //msg.sender is always the address where the current (external) function call came from.\\n    //need interface for different jobs available to verify params before sending\\n    function runBacalhauJob(\\n        address _from,\\n        string memory _spec,\\n        LilypadResultType _resultType\\n    ) public callerIsAuthorizedContract returns (uint) {\\n        _jobIds.increment();\\n        uint thisJobId = _jobIds.current();\\n        BacalhauJob memory jobCalled = BacalhauJob({\\n            requestor: _from,\\n            id: thisJobId,\\n            spec: _spec,\\n            resultType: _resultType\\n        });\\n\\n        bacalhauJobHistory.push(jobCalled);\\n        emit NewBacalhauJobSubmitted(jobCalled);\\n        return thisJobId;\\n    }\\n\\n    function currentJobID() public view returns (uint) {\\n        return _jobIds.current();\\n    }\\n\\n    function returnBacalhauResults(\\n        address _to,\\n        uint _jobId,\\n        LilypadResultType _resultType,\\n        string memory _result\\n    ) public onlyOwner {\\n        BacalhauJobResult memory jobResult = BacalhauJobResult({\\n            requestor: _to,\\n            id: _jobId,\\n            result: _result,\\n            success: true,\\n            resultType: _resultType\\n        });\\n        bacalhauJobResultHistory.push(jobResult);\\n        bacalhauJobResultByAddress[_to].push(jobResult);\\n\\n        emit BacalhauJobResultsReturned(jobResult);\\n        LilypadCallerInterface(_to).lilypadFulfilled(address(this), _jobId, _resultType, _result);\\n    }\\n\\n    function returnBacalhauError(\\n        address _to,\\n        uint _jobId,\\n        string memory _errorMsg\\n    ) public onlyOwner {\\n        BacalhauJobResult memory jobResult = BacalhauJobResult({\\n            requestor: _to,\\n            id: _jobId,\\n            success: false,\\n            result: _errorMsg,\\n            resultType: LilypadResultType.StdErr\\n        });\\n        bacalhauJobResultHistory.push(jobResult);\\n        bacalhauJobResultByAddress[_to].push(jobResult);\\n\\n        emit BacalhauJobResultsReturned(jobResult);\\n        LilypadCallerInterface(_to).lilypadCancelled(address(this), _jobId, _errorMsg);\\n    }\\n\\n    function fetchAllJobs() public view returns (BacalhauJob[] memory) {\\n        return bacalhauJobHistory;\\n    }\\n\\n    function fetchAllResults() public view returns (BacalhauJobResult[] memory) {\\n        return bacalhauJobResultHistory;\\n    }\\n\\n    function fetchJobsByAddress(\\n        address _requestor\\n    ) public view returns (BacalhauJobResult[] memory) {\\n        return bacalhauJobResultByAddress[_requestor];\\n    }\\n}\\n\",\"keccak256\":\"0x5400cb6a3412cfbc1ea0c0b0a599a3eac4f54cc22d96befaf5df4495305e1f36\",\"license\":\"MIT\"},\"erc721a/contracts/ERC721A.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.2.3\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport './IERC721A.sol';\\n\\n/**\\n * @dev Interface of ERC721 token receiver.\\n */\\ninterface ERC721A__IERC721Receiver {\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\\n/**\\n * @title ERC721A\\n *\\n * @dev Implementation of the [ERC721](https://eips.ethereum.org/EIPS/eip-721)\\n * Non-Fungible Token Standard, including the Metadata extension.\\n * Optimized for lower gas during batch mints.\\n *\\n * Token IDs are minted in sequential order (e.g. 0, 1, 2, 3, ...)\\n * starting from `_startTokenId()`.\\n *\\n * Assumptions:\\n *\\n * - An owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\\n * - The maximum token ID cannot exceed 2**256 - 1 (max value of uint256).\\n */\\ncontract ERC721A is IERC721A {\\n    // Bypass for a `--via-ir` bug (https://github.com/chiru-labs/ERC721A/pull/364).\\n    struct TokenApprovalRef {\\n        address value;\\n    }\\n\\n    // =============================================================\\n    //                           CONSTANTS\\n    // =============================================================\\n\\n    // Mask of an entry in packed address data.\\n    uint256 private constant _BITMASK_ADDRESS_DATA_ENTRY = (1 << 64) - 1;\\n\\n    // The bit position of `numberMinted` in packed address data.\\n    uint256 private constant _BITPOS_NUMBER_MINTED = 64;\\n\\n    // The bit position of `numberBurned` in packed address data.\\n    uint256 private constant _BITPOS_NUMBER_BURNED = 128;\\n\\n    // The bit position of `aux` in packed address data.\\n    uint256 private constant _BITPOS_AUX = 192;\\n\\n    // Mask of all 256 bits in packed address data except the 64 bits for `aux`.\\n    uint256 private constant _BITMASK_AUX_COMPLEMENT = (1 << 192) - 1;\\n\\n    // The bit position of `startTimestamp` in packed ownership.\\n    uint256 private constant _BITPOS_START_TIMESTAMP = 160;\\n\\n    // The bit mask of the `burned` bit in packed ownership.\\n    uint256 private constant _BITMASK_BURNED = 1 << 224;\\n\\n    // The bit position of the `nextInitialized` bit in packed ownership.\\n    uint256 private constant _BITPOS_NEXT_INITIALIZED = 225;\\n\\n    // The bit mask of the `nextInitialized` bit in packed ownership.\\n    uint256 private constant _BITMASK_NEXT_INITIALIZED = 1 << 225;\\n\\n    // The bit position of `extraData` in packed ownership.\\n    uint256 private constant _BITPOS_EXTRA_DATA = 232;\\n\\n    // Mask of all 256 bits in a packed ownership except the 24 bits for `extraData`.\\n    uint256 private constant _BITMASK_EXTRA_DATA_COMPLEMENT = (1 << 232) - 1;\\n\\n    // The mask of the lower 160 bits for addresses.\\n    uint256 private constant _BITMASK_ADDRESS = (1 << 160) - 1;\\n\\n    // The maximum `quantity` that can be minted with {_mintERC2309}.\\n    // This limit is to prevent overflows on the address data entries.\\n    // For a limit of 5000, a total of 3.689e15 calls to {_mintERC2309}\\n    // is required to cause an overflow, which is unrealistic.\\n    uint256 private constant _MAX_MINT_ERC2309_QUANTITY_LIMIT = 5000;\\n\\n    // The `Transfer` event signature is given by:\\n    // `keccak256(bytes(\\\"Transfer(address,address,uint256)\\\"))`.\\n    bytes32 private constant _TRANSFER_EVENT_SIGNATURE =\\n        0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\\n\\n    // =============================================================\\n    //                            STORAGE\\n    // =============================================================\\n\\n    // The next token ID to be minted.\\n    uint256 private _currentIndex;\\n\\n    // The number of tokens burned.\\n    uint256 private _burnCounter;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to ownership details\\n    // An empty struct value does not necessarily mean the token is unowned.\\n    // See {_packedOwnershipOf} implementation for details.\\n    //\\n    // Bits Layout:\\n    // - [0..159]   `addr`\\n    // - [160..223] `startTimestamp`\\n    // - [224]      `burned`\\n    // - [225]      `nextInitialized`\\n    // - [232..255] `extraData`\\n    mapping(uint256 => uint256) private _packedOwnerships;\\n\\n    // Mapping owner address to address data.\\n    //\\n    // Bits Layout:\\n    // - [0..63]    `balance`\\n    // - [64..127]  `numberMinted`\\n    // - [128..191] `numberBurned`\\n    // - [192..255] `aux`\\n    mapping(address => uint256) private _packedAddressData;\\n\\n    // Mapping from token ID to approved address.\\n    mapping(uint256 => TokenApprovalRef) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // =============================================================\\n    //                          CONSTRUCTOR\\n    // =============================================================\\n\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _currentIndex = _startTokenId();\\n    }\\n\\n    // =============================================================\\n    //                   TOKEN COUNTING OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the starting token ID.\\n     * To change the starting token ID, please override this function.\\n     */\\n    function _startTokenId() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Returns the next token ID to be minted.\\n     */\\n    function _nextTokenId() internal view virtual returns (uint256) {\\n        return _currentIndex;\\n    }\\n\\n    /**\\n     * @dev Returns the total number of tokens in existence.\\n     * Burned tokens will reduce the count.\\n     * To get the total number of tokens minted, please see {_totalMinted}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        // Counter underflow is impossible as _burnCounter cannot be incremented\\n        // more than `_currentIndex - _startTokenId()` times.\\n        unchecked {\\n            return _currentIndex - _burnCounter - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the total amount of tokens minted in the contract.\\n     */\\n    function _totalMinted() internal view virtual returns (uint256) {\\n        // Counter underflow is impossible as `_currentIndex` does not decrement,\\n        // and it is initialized to `_startTokenId()`.\\n        unchecked {\\n            return _currentIndex - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the total number of tokens burned.\\n     */\\n    function _totalBurned() internal view virtual returns (uint256) {\\n        return _burnCounter;\\n    }\\n\\n    // =============================================================\\n    //                    ADDRESS DATA OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the number of tokens in `owner`'s account.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\\n        return _packedAddressData[owner] & _BITMASK_ADDRESS_DATA_ENTRY;\\n    }\\n\\n    /**\\n     * Returns the number of tokens minted by `owner`.\\n     */\\n    function _numberMinted(address owner) internal view returns (uint256) {\\n        return (_packedAddressData[owner] >> _BITPOS_NUMBER_MINTED) & _BITMASK_ADDRESS_DATA_ENTRY;\\n    }\\n\\n    /**\\n     * Returns the number of tokens burned by or on behalf of `owner`.\\n     */\\n    function _numberBurned(address owner) internal view returns (uint256) {\\n        return (_packedAddressData[owner] >> _BITPOS_NUMBER_BURNED) & _BITMASK_ADDRESS_DATA_ENTRY;\\n    }\\n\\n    /**\\n     * Returns the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\\n     */\\n    function _getAux(address owner) internal view returns (uint64) {\\n        return uint64(_packedAddressData[owner] >> _BITPOS_AUX);\\n    }\\n\\n    /**\\n     * Sets the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\\n     * If there are multiple variables, please pack them into a uint64.\\n     */\\n    function _setAux(address owner, uint64 aux) internal virtual {\\n        uint256 packed = _packedAddressData[owner];\\n        uint256 auxCasted;\\n        // Cast `aux` with assembly to avoid redundant masking.\\n        assembly {\\n            auxCasted := aux\\n        }\\n        packed = (packed & _BITMASK_AUX_COMPLEMENT) | (auxCasted << _BITPOS_AUX);\\n        _packedAddressData[owner] = packed;\\n    }\\n\\n    // =============================================================\\n    //                            IERC165\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        // The interface IDs are constants representing the first 4 bytes\\n        // of the XOR of all function selectors in the interface.\\n        // See: [ERC165](https://eips.ethereum.org/EIPS/eip-165)\\n        // (e.g. `bytes4(i.functionA.selector ^ i.functionB.selector ^ ...)`)\\n        return\\n            interfaceId == 0x01ffc9a7 || // ERC165 interface ID for ERC165.\\n            interfaceId == 0x80ac58cd || // ERC165 interface ID for ERC721.\\n            interfaceId == 0x5b5e139f; // ERC165 interface ID for ERC721Metadata.\\n    }\\n\\n    // =============================================================\\n    //                        IERC721Metadata\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, _toString(tokenId))) : '';\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, it can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return '';\\n    }\\n\\n    // =============================================================\\n    //                     OWNERSHIPS OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        return address(uint160(_packedOwnershipOf(tokenId)));\\n    }\\n\\n    /**\\n     * @dev Gas spent here starts off proportional to the maximum mint batch size.\\n     * It gradually moves to O(1) as tokens get transferred around over time.\\n     */\\n    function _ownershipOf(uint256 tokenId) internal view virtual returns (TokenOwnership memory) {\\n        return _unpackedOwnership(_packedOwnershipOf(tokenId));\\n    }\\n\\n    /**\\n     * @dev Returns the unpacked `TokenOwnership` struct at `index`.\\n     */\\n    function _ownershipAt(uint256 index) internal view virtual returns (TokenOwnership memory) {\\n        return _unpackedOwnership(_packedOwnerships[index]);\\n    }\\n\\n    /**\\n     * @dev Initializes the ownership slot minted at `index` for efficiency purposes.\\n     */\\n    function _initializeOwnershipAt(uint256 index) internal virtual {\\n        if (_packedOwnerships[index] == 0) {\\n            _packedOwnerships[index] = _packedOwnershipOf(index);\\n        }\\n    }\\n\\n    /**\\n     * Returns the packed ownership data of `tokenId`.\\n     */\\n    function _packedOwnershipOf(uint256 tokenId) private view returns (uint256) {\\n        uint256 curr = tokenId;\\n\\n        unchecked {\\n            if (_startTokenId() <= curr)\\n                if (curr < _currentIndex) {\\n                    uint256 packed = _packedOwnerships[curr];\\n                    // If not burned.\\n                    if (packed & _BITMASK_BURNED == 0) {\\n                        // Invariant:\\n                        // There will always be an initialized ownership slot\\n                        // (i.e. `ownership.addr != address(0) && ownership.burned == false`)\\n                        // before an unintialized ownership slot\\n                        // (i.e. `ownership.addr == address(0) && ownership.burned == false`)\\n                        // Hence, `curr` will not underflow.\\n                        //\\n                        // We can directly compare the packed value.\\n                        // If the address is zero, packed will be zero.\\n                        while (packed == 0) {\\n                            packed = _packedOwnerships[--curr];\\n                        }\\n                        return packed;\\n                    }\\n                }\\n        }\\n        revert OwnerQueryForNonexistentToken();\\n    }\\n\\n    /**\\n     * @dev Returns the unpacked `TokenOwnership` struct from `packed`.\\n     */\\n    function _unpackedOwnership(uint256 packed) private pure returns (TokenOwnership memory ownership) {\\n        ownership.addr = address(uint160(packed));\\n        ownership.startTimestamp = uint64(packed >> _BITPOS_START_TIMESTAMP);\\n        ownership.burned = packed & _BITMASK_BURNED != 0;\\n        ownership.extraData = uint24(packed >> _BITPOS_EXTRA_DATA);\\n    }\\n\\n    /**\\n     * @dev Packs ownership data into a single uint256.\\n     */\\n    function _packOwnershipData(address owner, uint256 flags) private view returns (uint256 result) {\\n        assembly {\\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n            owner := and(owner, _BITMASK_ADDRESS)\\n            // `owner | (block.timestamp << _BITPOS_START_TIMESTAMP) | flags`.\\n            result := or(owner, or(shl(_BITPOS_START_TIMESTAMP, timestamp()), flags))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the `nextInitialized` flag set if `quantity` equals 1.\\n     */\\n    function _nextInitializedFlag(uint256 quantity) private pure returns (uint256 result) {\\n        // For branchless setting of the `nextInitialized` flag.\\n        assembly {\\n            // `(quantity == 1) << _BITPOS_NEXT_INITIALIZED`.\\n            result := shl(_BITPOS_NEXT_INITIALIZED, eq(quantity, 1))\\n        }\\n    }\\n\\n    // =============================================================\\n    //                      APPROVAL OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the\\n     * zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) public payable virtual override {\\n        address owner = ownerOf(tokenId);\\n\\n        if (_msgSenderERC721A() != owner)\\n            if (!isApprovedForAll(owner, _msgSenderERC721A())) {\\n                revert ApprovalCallerNotOwnerNorApproved();\\n            }\\n\\n        _tokenApprovals[tokenId].value = to;\\n        emit Approval(owner, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\\n\\n        return _tokenApprovals[tokenId].value;\\n    }\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom}\\n     * for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _operatorApprovals[_msgSenderERC721A()][operator] = approved;\\n        emit ApprovalForAll(_msgSenderERC721A(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted. See {_mint}.\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            _startTokenId() <= tokenId &&\\n            tokenId < _currentIndex && // If within bounds,\\n            _packedOwnerships[tokenId] & _BITMASK_BURNED == 0; // and not burned.\\n    }\\n\\n    /**\\n     * @dev Returns whether `msgSender` is equal to `approvedAddress` or `owner`.\\n     */\\n    function _isSenderApprovedOrOwner(\\n        address approvedAddress,\\n        address owner,\\n        address msgSender\\n    ) private pure returns (bool result) {\\n        assembly {\\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n            owner := and(owner, _BITMASK_ADDRESS)\\n            // Mask `msgSender` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n            msgSender := and(msgSender, _BITMASK_ADDRESS)\\n            // `msgSender == owner || msgSender == approvedAddress`.\\n            result := or(eq(msgSender, owner), eq(msgSender, approvedAddress))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the storage slot and value for the approved address of `tokenId`.\\n     */\\n    function _getApprovedSlotAndAddress(uint256 tokenId)\\n        private\\n        view\\n        returns (uint256 approvedAddressSlot, address approvedAddress)\\n    {\\n        TokenApprovalRef storage tokenApproval = _tokenApprovals[tokenId];\\n        // The following is equivalent to `approvedAddress = _tokenApprovals[tokenId].value`.\\n        assembly {\\n            approvedAddressSlot := tokenApproval.slot\\n            approvedAddress := sload(approvedAddressSlot)\\n        }\\n    }\\n\\n    // =============================================================\\n    //                      TRANSFER OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token\\n     * by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public payable virtual override {\\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\\n\\n        if (address(uint160(prevOwnershipPacked)) != from) revert TransferFromIncorrectOwner();\\n\\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(tokenId);\\n\\n        // The nested ifs save around 20+ gas over a compound boolean condition.\\n        if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A()))\\n            if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();\\n\\n        if (to == address(0)) revert TransferToZeroAddress();\\n\\n        _beforeTokenTransfers(from, to, tokenId, 1);\\n\\n        // Clear approvals from the previous owner.\\n        assembly {\\n            if approvedAddress {\\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\\n                sstore(approvedAddressSlot, 0)\\n            }\\n        }\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\\n        unchecked {\\n            // We can directly increment and decrement the balances.\\n            --_packedAddressData[from]; // Updates: `balance -= 1`.\\n            ++_packedAddressData[to]; // Updates: `balance += 1`.\\n\\n            // Updates:\\n            // - `address` to the next owner.\\n            // - `startTimestamp` to the timestamp of transfering.\\n            // - `burned` to `false`.\\n            // - `nextInitialized` to `true`.\\n            _packedOwnerships[tokenId] = _packOwnershipData(\\n                to,\\n                _BITMASK_NEXT_INITIALIZED | _nextExtraData(from, to, prevOwnershipPacked)\\n            );\\n\\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\\n            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\\n                uint256 nextTokenId = tokenId + 1;\\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\\n                if (_packedOwnerships[nextTokenId] == 0) {\\n                    // If the next slot is within bounds.\\n                    if (nextTokenId != _currentIndex) {\\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\\n                    }\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, to, tokenId);\\n        _afterTokenTransfers(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public payable virtual override {\\n        safeTransferFrom(from, to, tokenId, '');\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token\\n     * by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement\\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public payable virtual override {\\n        transferFrom(from, to, tokenId);\\n        if (to.code.length != 0)\\n            if (!_checkContractOnERC721Received(from, to, tokenId, _data)) {\\n                revert TransferToNonERC721ReceiverImplementer();\\n            }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before a set of serially-ordered token IDs\\n     * are about to be transferred. This includes minting.\\n     * And also called before burning one token.\\n     *\\n     * `startTokenId` - the first token ID to be transferred.\\n     * `quantity` - the amount to be transferred.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _beforeTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after a set of serially-ordered token IDs\\n     * have been transferred. This includes minting.\\n     * And also called after one token has been burned.\\n     *\\n     * `startTokenId` - the first token ID to be transferred.\\n     * `quantity` - the amount to be transferred.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` has been minted for `to`.\\n     * - When `to` is zero, `tokenId` has been burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _afterTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target contract.\\n     *\\n     * `from` - Previous owner of the given token ID.\\n     * `to` - Target address that will receive the token.\\n     * `tokenId` - Token ID to be transferred.\\n     * `_data` - Optional data to send along with the call.\\n     *\\n     * Returns whether the call correctly returned the expected magic value.\\n     */\\n    function _checkContractOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        try ERC721A__IERC721Receiver(to).onERC721Received(_msgSenderERC721A(), from, tokenId, _data) returns (\\n            bytes4 retval\\n        ) {\\n            return retval == ERC721A__IERC721Receiver(to).onERC721Received.selector;\\n        } catch (bytes memory reason) {\\n            if (reason.length == 0) {\\n                revert TransferToNonERC721ReceiverImplementer();\\n            } else {\\n                assembly {\\n                    revert(add(32, reason), mload(reason))\\n                }\\n            }\\n        }\\n    }\\n\\n    // =============================================================\\n    //                        MINT OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {Transfer} event for each mint.\\n     */\\n    function _mint(address to, uint256 quantity) internal virtual {\\n        uint256 startTokenId = _currentIndex;\\n        if (quantity == 0) revert MintZeroQuantity();\\n\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n        // Overflows are incredibly unrealistic.\\n        // `balance` and `numberMinted` have a maximum limit of 2**64.\\n        // `tokenId` has a maximum limit of 2**256.\\n        unchecked {\\n            // Updates:\\n            // - `balance += quantity`.\\n            // - `numberMinted += quantity`.\\n            //\\n            // We can directly add to the `balance` and `numberMinted`.\\n            _packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);\\n\\n            // Updates:\\n            // - `address` to the owner.\\n            // - `startTimestamp` to the timestamp of minting.\\n            // - `burned` to `false`.\\n            // - `nextInitialized` to `quantity == 1`.\\n            _packedOwnerships[startTokenId] = _packOwnershipData(\\n                to,\\n                _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\\n            );\\n\\n            uint256 toMasked;\\n            uint256 end = startTokenId + quantity;\\n\\n            // Use assembly to loop and emit the `Transfer` event for gas savings.\\n            // The duplicated `log4` removes an extra check and reduces stack juggling.\\n            // The assembly, together with the surrounding Solidity code, have been\\n            // delicately arranged to nudge the compiler into producing optimized opcodes.\\n            assembly {\\n                // Mask `to` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n                toMasked := and(to, _BITMASK_ADDRESS)\\n                // Emit the `Transfer` event.\\n                log4(\\n                    0, // Start of data (0, since no data).\\n                    0, // End of data (0, since no data).\\n                    _TRANSFER_EVENT_SIGNATURE, // Signature.\\n                    0, // `address(0)`.\\n                    toMasked, // `to`.\\n                    startTokenId // `tokenId`.\\n                )\\n\\n                // The `iszero(eq(,))` check ensures that large values of `quantity`\\n                // that overflows uint256 will make the loop run out of gas.\\n                // The compiler will optimize the `iszero` away for performance.\\n                for {\\n                    let tokenId := add(startTokenId, 1)\\n                } iszero(eq(tokenId, end)) {\\n                    tokenId := add(tokenId, 1)\\n                } {\\n                    // Emit the `Transfer` event. Similar to above.\\n                    log4(0, 0, _TRANSFER_EVENT_SIGNATURE, 0, toMasked, tokenId)\\n                }\\n            }\\n            if (toMasked == 0) revert MintToZeroAddress();\\n\\n            _currentIndex = end;\\n        }\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * This function is intended for efficient minting only during contract creation.\\n     *\\n     * It emits only one {ConsecutiveTransfer} as defined in\\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309),\\n     * instead of a sequence of {Transfer} event(s).\\n     *\\n     * Calling this function outside of contract creation WILL make your contract\\n     * non-compliant with the ERC721 standard.\\n     * For full ERC721 compliance, substituting ERC721 {Transfer} event(s) with the ERC2309\\n     * {ConsecutiveTransfer} event is only permissible during contract creation.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {ConsecutiveTransfer} event.\\n     */\\n    function _mintERC2309(address to, uint256 quantity) internal virtual {\\n        uint256 startTokenId = _currentIndex;\\n        if (to == address(0)) revert MintToZeroAddress();\\n        if (quantity == 0) revert MintZeroQuantity();\\n        if (quantity > _MAX_MINT_ERC2309_QUANTITY_LIMIT) revert MintERC2309QuantityExceedsLimit();\\n\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n        // Overflows are unrealistic due to the above check for `quantity` to be below the limit.\\n        unchecked {\\n            // Updates:\\n            // - `balance += quantity`.\\n            // - `numberMinted += quantity`.\\n            //\\n            // We can directly add to the `balance` and `numberMinted`.\\n            _packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);\\n\\n            // Updates:\\n            // - `address` to the owner.\\n            // - `startTimestamp` to the timestamp of minting.\\n            // - `burned` to `false`.\\n            // - `nextInitialized` to `quantity == 1`.\\n            _packedOwnerships[startTokenId] = _packOwnershipData(\\n                to,\\n                _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\\n            );\\n\\n            emit ConsecutiveTransfer(startTokenId, startTokenId + quantity - 1, address(0), to);\\n\\n            _currentIndex = startTokenId + quantity;\\n        }\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement\\n     * {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * See {_mint}.\\n     *\\n     * Emits a {Transfer} event for each mint.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 quantity,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, quantity);\\n\\n        unchecked {\\n            if (to.code.length != 0) {\\n                uint256 end = _currentIndex;\\n                uint256 index = end - quantity;\\n                do {\\n                    if (!_checkContractOnERC721Received(address(0), to, index++, _data)) {\\n                        revert TransferToNonERC721ReceiverImplementer();\\n                    }\\n                } while (index < end);\\n                // Reentrancy protection.\\n                if (_currentIndex != end) revert();\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Equivalent to `_safeMint(to, quantity, '')`.\\n     */\\n    function _safeMint(address to, uint256 quantity) internal virtual {\\n        _safeMint(to, quantity, '');\\n    }\\n\\n    // =============================================================\\n    //                        BURN OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Equivalent to `_burn(tokenId, false)`.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        _burn(tokenId, false);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId, bool approvalCheck) internal virtual {\\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\\n\\n        address from = address(uint160(prevOwnershipPacked));\\n\\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(tokenId);\\n\\n        if (approvalCheck) {\\n            // The nested ifs save around 20+ gas over a compound boolean condition.\\n            if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A()))\\n                if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();\\n        }\\n\\n        _beforeTokenTransfers(from, address(0), tokenId, 1);\\n\\n        // Clear approvals from the previous owner.\\n        assembly {\\n            if approvedAddress {\\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\\n                sstore(approvedAddressSlot, 0)\\n            }\\n        }\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\\n        unchecked {\\n            // Updates:\\n            // - `balance -= 1`.\\n            // - `numberBurned += 1`.\\n            //\\n            // We can directly decrement the balance, and increment the number burned.\\n            // This is equivalent to `packed -= 1; packed += 1 << _BITPOS_NUMBER_BURNED;`.\\n            _packedAddressData[from] += (1 << _BITPOS_NUMBER_BURNED) - 1;\\n\\n            // Updates:\\n            // - `address` to the last owner.\\n            // - `startTimestamp` to the timestamp of burning.\\n            // - `burned` to `true`.\\n            // - `nextInitialized` to `true`.\\n            _packedOwnerships[tokenId] = _packOwnershipData(\\n                from,\\n                (_BITMASK_BURNED | _BITMASK_NEXT_INITIALIZED) | _nextExtraData(from, address(0), prevOwnershipPacked)\\n            );\\n\\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\\n            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\\n                uint256 nextTokenId = tokenId + 1;\\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\\n                if (_packedOwnerships[nextTokenId] == 0) {\\n                    // If the next slot is within bounds.\\n                    if (nextTokenId != _currentIndex) {\\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\\n                    }\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, address(0), tokenId);\\n        _afterTokenTransfers(from, address(0), tokenId, 1);\\n\\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\\n        unchecked {\\n            _burnCounter++;\\n        }\\n    }\\n\\n    // =============================================================\\n    //                     EXTRA DATA OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Directly sets the extra data for the ownership data `index`.\\n     */\\n    function _setExtraDataAt(uint256 index, uint24 extraData) internal virtual {\\n        uint256 packed = _packedOwnerships[index];\\n        if (packed == 0) revert OwnershipNotInitializedForExtraData();\\n        uint256 extraDataCasted;\\n        // Cast `extraData` with assembly to avoid redundant masking.\\n        assembly {\\n            extraDataCasted := extraData\\n        }\\n        packed = (packed & _BITMASK_EXTRA_DATA_COMPLEMENT) | (extraDataCasted << _BITPOS_EXTRA_DATA);\\n        _packedOwnerships[index] = packed;\\n    }\\n\\n    /**\\n     * @dev Called during each token transfer to set the 24bit `extraData` field.\\n     * Intended to be overridden by the cosumer contract.\\n     *\\n     * `previousExtraData` - the value of `extraData` before transfer.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _extraData(\\n        address from,\\n        address to,\\n        uint24 previousExtraData\\n    ) internal view virtual returns (uint24) {}\\n\\n    /**\\n     * @dev Returns the next extra data for the packed ownership data.\\n     * The returned result is shifted into position.\\n     */\\n    function _nextExtraData(\\n        address from,\\n        address to,\\n        uint256 prevOwnershipPacked\\n    ) private view returns (uint256) {\\n        uint24 extraData = uint24(prevOwnershipPacked >> _BITPOS_EXTRA_DATA);\\n        return uint256(_extraData(from, to, extraData)) << _BITPOS_EXTRA_DATA;\\n    }\\n\\n    // =============================================================\\n    //                       OTHER OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the message sender (defaults to `msg.sender`).\\n     *\\n     * If you are writing GSN compatible contracts, you need to override this function.\\n     */\\n    function _msgSenderERC721A() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    /**\\n     * @dev Converts a uint256 to its ASCII string decimal representation.\\n     */\\n    function _toString(uint256 value) internal pure virtual returns (string memory str) {\\n        assembly {\\n            // The maximum value of a uint256 contains 78 digits (1 byte per digit), but\\n            // we allocate 0xa0 bytes to keep the free memory pointer 32-byte word aligned.\\n            // We will need 1 word for the trailing zeros padding, 1 word for the length,\\n            // and 3 words for a maximum of 78 digits. Total: 5 * 0x20 = 0xa0.\\n            let m := add(mload(0x40), 0xa0)\\n            // Update the free memory pointer to allocate.\\n            mstore(0x40, m)\\n            // Assign the `str` to the end.\\n            str := sub(m, 0x20)\\n            // Zeroize the slot after the string.\\n            mstore(str, 0)\\n\\n            // Cache the end of the memory to calculate the length later.\\n            let end := str\\n\\n            // We write the string from rightmost digit to leftmost digit.\\n            // The following is essentially a do-while loop that also handles the zero case.\\n            // prettier-ignore\\n            for { let temp := value } 1 {} {\\n                str := sub(str, 1)\\n                // Write the character to the pointer.\\n                // The ASCII index of the '0' character is 48.\\n                mstore8(str, add(48, mod(temp, 10)))\\n                // Keep dividing `temp` until zero.\\n                temp := div(temp, 10)\\n                // prettier-ignore\\n                if iszero(temp) { break }\\n            }\\n\\n            let length := sub(end, str)\\n            // Move the pointer 32 bytes leftwards to make room for the length.\\n            str := sub(str, 0x20)\\n            // Store the length.\\n            mstore(str, length)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x23116c16976b7d8c0c714ba1b38ae6b16c16fc90ec69b568fb1ebf1bc063e01c\",\"license\":\"MIT\"},\"erc721a/contracts/IERC721A.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.2.3\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Interface of ERC721A.\\n */\\ninterface IERC721A {\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error ApprovalCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error ApprovalQueryForNonexistentToken();\\n\\n    /**\\n     * Cannot query the balance for the zero address.\\n     */\\n    error BalanceQueryForZeroAddress();\\n\\n    /**\\n     * Cannot mint to the zero address.\\n     */\\n    error MintToZeroAddress();\\n\\n    /**\\n     * The quantity of tokens minted must be more than zero.\\n     */\\n    error MintZeroQuantity();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error OwnerQueryForNonexistentToken();\\n\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error TransferCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token must be owned by `from`.\\n     */\\n    error TransferFromIncorrectOwner();\\n\\n    /**\\n     * Cannot safely transfer to a contract that does not implement the\\n     * ERC721Receiver interface.\\n     */\\n    error TransferToNonERC721ReceiverImplementer();\\n\\n    /**\\n     * Cannot transfer to the zero address.\\n     */\\n    error TransferToZeroAddress();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error URIQueryForNonexistentToken();\\n\\n    /**\\n     * The `quantity` minted with ERC2309 exceeds the safety limit.\\n     */\\n    error MintERC2309QuantityExceedsLimit();\\n\\n    /**\\n     * The `extraData` cannot be set on an unintialized ownership slot.\\n     */\\n    error OwnershipNotInitializedForExtraData();\\n\\n    // =============================================================\\n    //                            STRUCTS\\n    // =============================================================\\n\\n    struct TokenOwnership {\\n        // The address of the owner.\\n        address addr;\\n        // Stores the start time of ownership with minimal overhead for tokenomics.\\n        uint64 startTimestamp;\\n        // Whether the token has been burned.\\n        bool burned;\\n        // Arbitrary data similar to `startTimestamp` that can be set via {_extraData}.\\n        uint24 extraData;\\n    }\\n\\n    // =============================================================\\n    //                         TOKEN COUNTERS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the total number of tokens in existence.\\n     * Burned tokens will reduce the count.\\n     * To get the total number of tokens minted, please see {_totalMinted}.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    // =============================================================\\n    //                            IERC165\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n\\n    // =============================================================\\n    //                            IERC721\\n    // =============================================================\\n\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables\\n     * (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in `owner`'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`,\\n     * checking first that contract recipients are aware of the ERC721 protocol\\n     * to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move\\n     * this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement\\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external payable;\\n\\n    /**\\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom}\\n     * whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token\\n     * by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the\\n     * zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external payable;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom}\\n     * for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    // =============================================================\\n    //                        IERC721Metadata\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n\\n    // =============================================================\\n    //                           IERC2309\\n    // =============================================================\\n\\n    /**\\n     * @dev Emitted when tokens in `fromTokenId` to `toTokenId`\\n     * (inclusive) is transferred from `from` to `to`, as defined in the\\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309) standard.\\n     *\\n     * See {_mintERC2309} for more details.\\n     */\\n    event ConsecutiveTransfer(uint256 indexed fromTokenId, uint256 toTokenId, address indexed from, address indexed to);\\n}\\n\",\"keccak256\":\"0xa31dfe2635a25f899e279befef27ffcc02fd16e636c58d4c251a303f2355f7ad\",\"license\":\"MIT\"},\"erc721a/contracts/extensions/ERC721AQueryable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.2.3\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport './IERC721AQueryable.sol';\\nimport '../ERC721A.sol';\\n\\n/**\\n * @title ERC721AQueryable.\\n *\\n * @dev ERC721A subclass with convenience query functions.\\n */\\nabstract contract ERC721AQueryable is ERC721A, IERC721AQueryable {\\n    /**\\n     * @dev Returns the `TokenOwnership` struct at `tokenId` without reverting.\\n     *\\n     * If the `tokenId` is out of bounds:\\n     *\\n     * - `addr = address(0)`\\n     * - `startTimestamp = 0`\\n     * - `burned = false`\\n     * - `extraData = 0`\\n     *\\n     * If the `tokenId` is burned:\\n     *\\n     * - `addr = <Address of owner before token was burned>`\\n     * - `startTimestamp = <Timestamp when token was burned>`\\n     * - `burned = true`\\n     * - `extraData = <Extra data when token was burned>`\\n     *\\n     * Otherwise:\\n     *\\n     * - `addr = <Address of owner>`\\n     * - `startTimestamp = <Timestamp of start of ownership>`\\n     * - `burned = false`\\n     * - `extraData = <Extra data at start of ownership>`\\n     */\\n    function explicitOwnershipOf(uint256 tokenId) public view virtual override returns (TokenOwnership memory) {\\n        TokenOwnership memory ownership;\\n        if (tokenId < _startTokenId() || tokenId >= _nextTokenId()) {\\n            return ownership;\\n        }\\n        ownership = _ownershipAt(tokenId);\\n        if (ownership.burned) {\\n            return ownership;\\n        }\\n        return _ownershipOf(tokenId);\\n    }\\n\\n    /**\\n     * @dev Returns an array of `TokenOwnership` structs at `tokenIds` in order.\\n     * See {ERC721AQueryable-explicitOwnershipOf}\\n     */\\n    function explicitOwnershipsOf(uint256[] calldata tokenIds)\\n        external\\n        view\\n        virtual\\n        override\\n        returns (TokenOwnership[] memory)\\n    {\\n        unchecked {\\n            uint256 tokenIdsLength = tokenIds.length;\\n            TokenOwnership[] memory ownerships = new TokenOwnership[](tokenIdsLength);\\n            for (uint256 i; i != tokenIdsLength; ++i) {\\n                ownerships[i] = explicitOwnershipOf(tokenIds[i]);\\n            }\\n            return ownerships;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an array of token IDs owned by `owner`,\\n     * in the range [`start`, `stop`)\\n     * (i.e. `start <= tokenId < stop`).\\n     *\\n     * This function allows for tokens to be queried if the collection\\n     * grows too big for a single call of {ERC721AQueryable-tokensOfOwner}.\\n     *\\n     * Requirements:\\n     *\\n     * - `start < stop`\\n     */\\n    function tokensOfOwnerIn(\\n        address owner,\\n        uint256 start,\\n        uint256 stop\\n    ) external view virtual override returns (uint256[] memory) {\\n        unchecked {\\n            if (start >= stop) revert InvalidQueryRange();\\n            uint256 tokenIdsIdx;\\n            uint256 stopLimit = _nextTokenId();\\n            // Set `start = max(start, _startTokenId())`.\\n            if (start < _startTokenId()) {\\n                start = _startTokenId();\\n            }\\n            // Set `stop = min(stop, stopLimit)`.\\n            if (stop > stopLimit) {\\n                stop = stopLimit;\\n            }\\n            uint256 tokenIdsMaxLength = balanceOf(owner);\\n            // Set `tokenIdsMaxLength = min(balanceOf(owner), stop - start)`,\\n            // to cater for cases where `balanceOf(owner)` is too big.\\n            if (start < stop) {\\n                uint256 rangeLength = stop - start;\\n                if (rangeLength < tokenIdsMaxLength) {\\n                    tokenIdsMaxLength = rangeLength;\\n                }\\n            } else {\\n                tokenIdsMaxLength = 0;\\n            }\\n            uint256[] memory tokenIds = new uint256[](tokenIdsMaxLength);\\n            if (tokenIdsMaxLength == 0) {\\n                return tokenIds;\\n            }\\n            // We need to call `explicitOwnershipOf(start)`,\\n            // because the slot at `start` may not be initialized.\\n            TokenOwnership memory ownership = explicitOwnershipOf(start);\\n            address currOwnershipAddr;\\n            // If the starting slot exists (i.e. not burned), initialize `currOwnershipAddr`.\\n            // `ownership.address` will not be zero, as `start` is clamped to the valid token ID range.\\n            if (!ownership.burned) {\\n                currOwnershipAddr = ownership.addr;\\n            }\\n            for (uint256 i = start; i != stop && tokenIdsIdx != tokenIdsMaxLength; ++i) {\\n                ownership = _ownershipAt(i);\\n                if (ownership.burned) {\\n                    continue;\\n                }\\n                if (ownership.addr != address(0)) {\\n                    currOwnershipAddr = ownership.addr;\\n                }\\n                if (currOwnershipAddr == owner) {\\n                    tokenIds[tokenIdsIdx++] = i;\\n                }\\n            }\\n            // Downsize the array to fit.\\n            assembly {\\n                mstore(tokenIds, tokenIdsIdx)\\n            }\\n            return tokenIds;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an array of token IDs owned by `owner`.\\n     *\\n     * This function scans the ownership mapping and is O(`totalSupply`) in complexity.\\n     * It is meant to be called off-chain.\\n     *\\n     * See {ERC721AQueryable-tokensOfOwnerIn} for splitting the scan into\\n     * multiple smaller scans if the collection is large enough to cause\\n     * an out-of-gas error (10K collections should be fine).\\n     */\\n    function tokensOfOwner(address owner) external view virtual override returns (uint256[] memory) {\\n        unchecked {\\n            uint256 tokenIdsIdx;\\n            address currOwnershipAddr;\\n            uint256 tokenIdsLength = balanceOf(owner);\\n            uint256[] memory tokenIds = new uint256[](tokenIdsLength);\\n            TokenOwnership memory ownership;\\n            for (uint256 i = _startTokenId(); tokenIdsIdx != tokenIdsLength; ++i) {\\n                ownership = _ownershipAt(i);\\n                if (ownership.burned) {\\n                    continue;\\n                }\\n                if (ownership.addr != address(0)) {\\n                    currOwnershipAddr = ownership.addr;\\n                }\\n                if (currOwnershipAddr == owner) {\\n                    tokenIds[tokenIdsIdx++] = i;\\n                }\\n            }\\n            return tokenIds;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xad83a36e9758f044317e9a5e2903bc49730b6d5de8fbe9a61b2f91fb4c2148c7\",\"license\":\"MIT\"},\"erc721a/contracts/extensions/IERC721AQueryable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.2.3\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport '../IERC721A.sol';\\n\\n/**\\n * @dev Interface of ERC721AQueryable.\\n */\\ninterface IERC721AQueryable is IERC721A {\\n    /**\\n     * Invalid query range (`start` >= `stop`).\\n     */\\n    error InvalidQueryRange();\\n\\n    /**\\n     * @dev Returns the `TokenOwnership` struct at `tokenId` without reverting.\\n     *\\n     * If the `tokenId` is out of bounds:\\n     *\\n     * - `addr = address(0)`\\n     * - `startTimestamp = 0`\\n     * - `burned = false`\\n     * - `extraData = 0`\\n     *\\n     * If the `tokenId` is burned:\\n     *\\n     * - `addr = <Address of owner before token was burned>`\\n     * - `startTimestamp = <Timestamp when token was burned>`\\n     * - `burned = true`\\n     * - `extraData = <Extra data when token was burned>`\\n     *\\n     * Otherwise:\\n     *\\n     * - `addr = <Address of owner>`\\n     * - `startTimestamp = <Timestamp of start of ownership>`\\n     * - `burned = false`\\n     * - `extraData = <Extra data at start of ownership>`\\n     */\\n    function explicitOwnershipOf(uint256 tokenId) external view returns (TokenOwnership memory);\\n\\n    /**\\n     * @dev Returns an array of `TokenOwnership` structs at `tokenIds` in order.\\n     * See {ERC721AQueryable-explicitOwnershipOf}\\n     */\\n    function explicitOwnershipsOf(uint256[] memory tokenIds) external view returns (TokenOwnership[] memory);\\n\\n    /**\\n     * @dev Returns an array of token IDs owned by `owner`,\\n     * in the range [`start`, `stop`)\\n     * (i.e. `start <= tokenId < stop`).\\n     *\\n     * This function allows for tokens to be queried if the collection\\n     * grows too big for a single call of {ERC721AQueryable-tokensOfOwner}.\\n     *\\n     * Requirements:\\n     *\\n     * - `start < stop`\\n     */\\n    function tokensOfOwnerIn(\\n        address owner,\\n        uint256 start,\\n        uint256 stop\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Returns an array of token IDs owned by `owner`.\\n     *\\n     * This function scans the ownership mapping and is O(`totalSupply`) in complexity.\\n     * It is meant to be called off-chain.\\n     *\\n     * See {ERC721AQueryable-tokensOfOwnerIn} for splitting the scan into\\n     * multiple smaller scans if the collection is large enough to cause\\n     * an out-of-gas error (10K collections should be fine).\\n     */\\n    function tokensOfOwner(address owner) external view returns (uint256[] memory);\\n}\\n\",\"keccak256\":\"0xc14fc938aecdccee7edbd3a3ce60b6171cdc3da3345cfa6d288c268983c48942\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608034620007f057601f620031d738819003918201601f191683019291906001600160401b03841183851017620006e1578160809284926040968752833981010312620007f0578051906001600160a01b0382168203620007f0576020810151606084830151920151928315158403620007f0576200007d620007f5565b600d81526c4e4654726f75742047656e203160981b6020820152620000a1620007f5565b600681526554524f55543160d01b6020820152815190916001600160401b038211620006e15760025490600182811c92168015620007e5575b6020831014620006c05781601f84931162000781575b50602090601f83116001146200070357600092620006f7575b50508160011b916000199060031b1c1916176002555b80516001600160401b038111620006e157600391825490600182811c92168015620006d6575b6020831014620006c05781601f84931162000668575b50602090601f8311600114620005fe57600092620005f2575b50508160011b9160001990841b1c19161790555b60016000908155600880546001600160a01b03198082163390811790935593926001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a360018060a01b031690600d541617600d55600955600a5562000203575b516129a19081620008168239f35b73a885b1f77e4185f98b4d4dbe752b212b18b5d551806000526000609660207c020000000000000000a9ad6c62611884672dfef7e20a115778c4b0bab16005948583528685206824000000000000002481540190554260a01b9060018652600490818552828117898820558660018a51602481527fdeaa91b6123d068f5821d0fb0678463d1a8a6079fe8af5de3ce5e896dcf9133d978891a4602586557356e5f834f88f9f7631e9d6a43254e173478ce06a808752876020528887206823000000000000002381540190556025875281602052828117898820558660258660208c5160478152a46048865573f29ac257c03cba76da7d3c4a34f2ca14b563260d808752876020528887206819000000000000001981540190556048875281602052828117898820558660488660208c5160608152a46061865573bd34678c8e17d4d6f221b4cb912d79c3443f803480875287602052888720680c000000000000000c81540190556061875281602052828117898820558660618660208c51606c8152a4606d8655737b9bb19911763a372e35f95d0e31031c0884b6ec80875287602052888720680b000000000000000b8154019055606d8752816020528281178988205586606d8660208c5160778152a46078865573ed03ea9c96ec39097548256e428a163e5f524e47808752876020528887206809000000000000000981540190556078875281602052828117898820558660788660208c5160808152a46081865573404e70a162487c9af8982a89a5453f389d5257b1808752876020528887206806000000000000000681540190556081875281602052828117898820558660818660208c5160868152a460878655737fdb709f97dcd5f5a51054ad84a51107b2c15ef3808752876020528887206805000000000000000581540190556087875281602052828117898820558660878660208c51608b8152a4608c865573ae378d2e106d5c3ebdb7d960bd9c9093e23e680f80875287602052888720680400000000000000048154019055608c8752816020528281178988205586608c8660208c51608f8152a460908655730532bf0916f509883eaa1eca5b270d753e1528558087528760205288872090680300000000000000039182815401905560908852826020528381178a8920558760908760208d5160928152a460938755732772c7df084cbe204576731d711b622234bdd9a790818852886020528988209081540190556093875281602052828117898820558660938660208c5160958152a484865573a9ad6c62611884672dfef7e20a115778c4b0bab196878752602052878620680100000000000000018154019055848652602052178584205560208551838152a46097600055620001f5565b01519050388062000174565b6000858152602081209350601f198516905b8181106200064f575090846001959493921062000636575b505050811b01905562000188565b015160001983861b60f8161c1916905538808062000628565b9293602060018192878601518155019501930162000610565b909150836000526020600020601f840160051c81019160208510620006b5575b90601f859493920160051c01905b818110620006a557506200015b565b6000815584935060010162000696565b909150819062000688565b634e487b7160e01b600052602260045260246000fd5b91607f169162000145565b634e487b7160e01b600052604160045260246000fd5b01519050388062000109565b600260009081529350600080516020620031b783398151915291905b601f198416851062000765576001945083601f198116106200074b575b505050811b016002556200011f565b015160001960f88460031b161c191690553880806200073c565b818101518355602094850194600190930192909101906200071f565b6002600052909150600080516020620031b7833981519152601f840160051c81019160208510620007da575b90601f859493920160051c01905b818110620007ca5750620000f0565b60008155849350600101620007bb565b9091508190620007ad565b91607f1691620000da565b600080fd5b60408051919082016001600160401b03811183821017620006e15760405256fe6080604052600436101561001257600080fd5b60003560e01c806301ffc9a71461026757806306fdde0314610262578063081812fc1461025d578063095ea7b3146102585780630b78f9c0146102535780630f7ee1ec1461024e5780631249c58b1461024957806313966db51461024457806318160ddd1461023f5780631e8f50f31461023a57806323b872dd146102355780633487823e146102305780633ccfd60b1461022b57806342842e0e1461022657806350fd736714610221578063543fd3131461021c5780635bbb2177146102175780636352211e1461021257806367dffc381461020d5780636caf25e61461020857806370a0823114610203578063715018a6146101fe5780638462151c146101f957806389e5ea3b146101f45780638da5cb5b146101ef57806395d89b41146101ea578063964bc33f146101e557806399a2557a146101e0578063a22cb465146101db578063b88d4fde146101d6578063c23dc68f146101d1578063c87b56dd146101cc578063d5040d65146101c7578063d6d7b3ec146101c2578063d9ecad7b146101bd578063e985e9c5146101b85763f2fde38b146101b357600080fd5b6113b9565b611351565b61121d565b611166565b6110b4565b611048565b610fe5565b610f5a565b610e0d565b610dd1565b610d63565b610cbc565b610c93565b610c3f565b610b87565b610aee565b610abf565b610a96565b610a4f565b610a20565b6109bb565b610900565b610879565b610856565b61080e565b610753565b610712565b6106c8565b6106a1565b610683565b6105f7565b6105a9565b610552565b610497565b610432565b61034d565b610283565b6001600160e01b031981160361027e57565b600080fd5b3461027e57602036600319011261027e5760206004356102a28161026c565b63ffffffff60e01b166301ffc9a760e01b81149081156102e0575b81156102cf575b506040519015158152f35b635b5e139f60e01b149050386102c4565b6380ac58cd60e01b811491506102bd565b60005b8381106103045750506000910152565b81810151838201526020016102f4565b9060209161032d815180928185528580860191016102f1565b601f01601f1916010190565b90602061034a928181520190610314565b90565b3461027e5760008060031936011261042f5760405190806002546103708161171b565b8085529160019180831690811561040557506001146103aa575b6103a68561039a81870382610ef0565b60405191829182610339565b0390f35b9250600283527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace5b8284106103ed57505050810160200161039a826103a661038a565b805460208587018101919091529093019281016103d2565b8695506103a69693506020925061039a94915060ff191682840152151560051b820101929361038a565b80fd5b3461027e57602036600319011261027e5760043561044f816122e5565b15610474576000526006602052602060018060a01b0360406000205416604051908152f35b6040516333d1c03960e21b8152600490fd5b6001600160a01b0381160361027e57565b604036600319011261027e576004356104af81610486565b6024356001600160a01b03806104c48361226d565b169081330361051f575b600083815260066020526040812080546001600160a01b0319166001600160a01b0387161790559316907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258480a480f35b600082815260076020908152604080832033845290915290205460ff166104ce576040516367d9dca160e11b8152600490fd5b3461027e57604036600319011261027e577f64f84976d9c917a44796104a59950fdbd9b3c16a5dd348b546d738301f6bd0686040600435602435610594611486565b8160095580600a5582519182526020820152a1005b3461027e57602036600319011261027e57600435600052600c602052608060406000208054906001810154906003600282015491015491604051938452602084015260408301526060820152f35b600036600319011261027e5761060b6114de565b5061062961061833611ac7565b6008546001600160a01b0316612046565b340361066957608061064261063d33612106565b611ae7565b60606040519180518352602081015160208401526040810151604084015201516060820152f35b602460095460405190638c4fcd9360e01b82526004820152fd5b3461027e57600036600319011261027e576020600954604051908152f35b3461027e57600036600319011261027e576000546001546040519103600019018152602090f35b3461027e57600036600319011261027e576020600a54604051908152f35b606090600319011261027e576004356106fe81610486565b9060243561070b81610486565b9060443590565b61072461071e366106e6565b91612320565b005b9181601f8401121561027e578235916001600160401b03831161027e576020838186019501011161027e57565b3461027e57606036600319011261027e5761076f600435610486565b6044356001600160401b03811161027e5761078e903690600401610726565b5050600d546001600160a01b031633036107fc5760006024358152601260205260408120548152600c6020526107f8604082206040516107cd81610eb5565b8154808252600183015491826020820152606060036002860154958660408501520154910152611dcf565b5080f35b6040516341460c0960e11b8152600490fd5b3461027e5760008060031936011261042f57338152600b6020528080808060408120818154915581811561084d575b3390f1156108485780f35b61170f565b506108fc61083d565b610724610862366106e6565b906040519261087084610ed5565b600084526124ee565b3461027e57604036600319011261027e576004356024356001600160a01b036108a18361226d565b1633036108ee5760207f1ea45e30b31292f9d7c5d37d275b2feca555f13f47dce0fdea2f47e8852ecd78918360005260108252806040600020556108e484611555565b50604051908152a2005b6040516330cd747160e01b8152600490fd5b3461027e57602036600319011261027e5760043561091d81610486565b60018060a01b0316600052600b6020526020604060002054604051908152f35b6020908160408183019282815285518094520193019160005b828110610964575050505090565b90919293826080826109af600194895162ffffff6060809260018060a01b0381511685526001600160401b036020820151166020860152604081015115156040860152015116910152565b01950193929101610956565b3461027e57602036600319011261027e576001600160401b0360043581811161027e573660238201121561027e57806004013591821161027e573660248360051b8301011161027e576103a6916024610a149201612761565b6040519182918261093d565b3461027e57602036600319011261027e5760206001600160a01b03610a4660043561226d565b16604051908152f35b3461027e57602036600319011261027e57600435610a6c81610486565b610a74611486565b600d80546001600160a01b0319166001600160a01b0392909216919091179055005b3461027e57600036600319011261027e57600d546040516001600160a01b039091168152602090f35b3461027e57602036600319011261027e576020610ae6600435610ae181610486565b612232565b604051908152f35b3461027e5760008060031936011261042f57610b08611486565b600880546001600160a01b0319811690915581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b6020908160408183019282815285518094520193019160005b828110610b73575050505090565b835185529381019392810192600101610b65565b3461027e57602036600319011261027e57600435610ba481610486565b60008091610bb181612232565b610bba816127f1565b92610bc36114de565b506001926001600160a01b0390811690845b848403610bea57604051806103a68982610b4c565b81610bf482612703565b876040820151610c365750511680610c2e575b50859083838a1614610c1a575b01610bd5565b80610c28838701968a61196f565b52610c14565b975085610c07565b92915050610c14565b3461027e57604036600319011261027e57610c5c60043533611a46565b610c6860243533611a46565b8101809111610c8e57610c7a33611ac7565b8101809111610c8e57602090604051908152f35b6115d1565b3461027e57600036600319011261027e576008546040516001600160a01b039091168152602090f35b3461027e5760008060031936011261042f576040519080600354610cdf8161171b565b808552916001918083169081156104055750600114610d08576103a68561039a81870382610ef0565b9250600383527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b5b828410610d4b57505050810160200161039a826103a661038a565b80546020858701810191909152909301928101610d30565b3461027e57602036600319011261027e576004356001600160a01b03610d888261226d565b1633036108ee576000908082526010602052816040812055610da981611650565b507fc40fdc946efe80191c467f60727c4abc08254a056035d467a4516a86005ab7638280a280f35b3461027e57606036600319011261027e576103a6610e01600435610df481610486565b6044359060243590612819565b60405191829182610b4c565b3461027e57604036600319011261027e57600435610e2a81610486565b6024359081151580920361027e573360009081526007602090815260408083206001600160a01b0385168452909152902060ff1981541660ff841617905560405191825260018060a01b0316907f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3160203392a3005b634e487b7160e01b600052604160045260246000fd5b608081019081106001600160401b03821117610ed057604052565b610e9f565b602081019081106001600160401b03821117610ed057604052565b90601f801991011681019081106001600160401b03821117610ed057604052565b60405190604082018281106001600160401b03821117610ed057604052565b60405190610f3d82610eb5565b565b6001600160401b038111610ed057601f01601f191660200190565b608036600319011261027e57600435610f7281610486565b602435610f7e81610486565b606435916001600160401b03831161027e573660238401121561027e57826004013591610faa83610f3f565b92610fb86040519485610ef0565b808452366024828701011161027e57602081600092602461072498018388013785010152604435916124ee565b3461027e57602036600319011261027e5760806110036004356126a4565b611046604051809262ffffff6060809260018060a01b0381511685526001600160401b036020820151166020860152604081015115156040860152015116910152565bf35b3461027e57602036600319011261027e5760043560005260116020526103a66110926110a0604060002060405192839166697066733a2f2f60c81b602084015260278301906119c3565b03601f198101835282610ef0565b604051918291602083526020830190610314565b3461027e57608036600319011261027e576110d0600435610486565b604435600481101561027e576064356001600160401b03811161027e576110fb903690600401610726565b600d549091906001600160a01b031633036107fc57610724926024356117a9565b60208082019080835283518092528060408094019401926000905b83821061114657505050505090565b845180518752830151868401529485019493820193600190910190611137565b3461027e57604036600319011261027e57600435602435600e5480831160001461121657805b828201808311610c8e5781101561120f576111a792506115e7565b6111b0816118f1565b9160005b8281106111c957604051806103a6868261111c565b806111df6111da61120a9385611702565b611983565b6111e7610f11565b91825260208201526111f9828761196f565b52611204818661196f565b50611960565b6111b4565b50506111a7565b829061118c565b60408060031936011261027e576004356024359161124161123d836122e5565b1590565b6113385761125161123d846122e5565b61132157828214611311576008546112ca9061127f906001600160a01b031661127933611ac7565b90612046565b6001600160a01b03906112af906112b590828461129b8961226d565b166112a68933611a46565b600a549161208f565b90611702565b916112bf8761226d565b166112a68733611a46565b3481036112f857506112e96103a6936112e233612106565b9384611c8f565b50519081529081906020820190565b9051638c4fcd9360e01b81526004810191909152602490fd5b51635693858360e01b8152600490fd5b516303ff20ff60e31b815260048101839052602490fd5b516303ff20ff60e31b8152600481019190915260249150fd5b3461027e57604036600319011261027e57602060ff6113ad60043561137581610486565b6024359061138282610486565b60018060a01b03166000526007845260406000209060018060a01b0316600052602052604060002090565b54166040519015158152f35b3461027e57602036600319011261027e576004356113d681610486565b6113de611486565b6001600160a01b0390811690811561143257600854826bffffffffffffffffffffffff60a01b821617600855167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3005b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b6008546001600160a01b0316330361149a57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b604051906114eb82610eb5565b60006060838281528260208201528260408201520152565b634e487b7160e01b600052603260045260246000fd5b600e5481101561155057600e6000527fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd0190600090565b611503565b80600052600f602052604060002054156000146115cb57600e5468010000000000000000811015610ed0576001810180600e558110156115505781907fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd0155600e5490600052600f602052604060002055600190565b50600090565b634e487b7160e01b600052601160045260246000fd5b91908203918211610c8e57565b600e54801561163a5760001981019080821015611550577fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fc600091600e83520155600e55565b634e487b7160e01b600052603160045260246000fd5b6000818152600f602052604090205480156116fb576000199181830191808311610c8e57600e54938401938411610c8e5783836116ab94600096036116b1575b50505061169b6115f4565b600052600f602052604060002090565b55600190565b61169b6116d9916116d16116c76116f295611519565b90549060031b1c90565b928391611519565b90919082549060031b91821b91600019901b1916179055565b55388080611690565b5050600090565b91908201809211610c8e57565b6040513d6000823e3d90fd5b90600182811c9216801561174b575b602083101461173557565b634e487b7160e01b600052602260045260246000fd5b91607f169161172a565b90601f811161176357505050565b600091825260208220906020601f850160051c8301941061179f575b601f0160051c01915b82811061179457505050565b818155600101611788565b909250829061177f565b9093929360048110156118c4576118be57600052602092601284526040600020546117d3816122e5565b156118b7576117ec906000526011602052604060002090565b916001600160401b038211610ed05761180f82611809855461171b565b85611755565b600094601f831160011461184c57509381929394600092611841575b50508160011b916000199060031b1c1916179055565b01359050388061182b565b90601f1983169561186285600052602060002090565b9281905b88821061189f57505083600195969710611885575b505050811b019055565b0135600019600384901b60f8161c1916905538808061187b565b80600184968294958701358155019501920190611866565b5050509050565b50509050565b634e487b7160e01b600052602160045260246000fd5b6001600160401b038111610ed05760051b60200190565b906118fb826118da565b604061190981519283610ef0565b838252819361191a601f19916118da565b01906000805b83811061192e575050505050565b825190838201918083106001600160401b03841117610ed0576020928552838152828481830152828801015201611920565b6000198114610c8e5760010190565b80518210156115505760209160051b010190565b600e54811015611550577fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd01549081600052601060205260406000205490565b6000929181546119d28161171b565b92600191808316908115611a2b57506001146119ef575b50505050565b90919293945060005260209081600020906000915b858310611a1a57505050500190388080806119e9565b805485840152918301918101611a04565b60ff19168452505050811515909102019150388080806119e9565b8115908115611a79575b506115cb57611a5e90611a97565b9015611a675790565b60405163665c1c5760e01b8152600490fd5b90506001600160a01b0380611a8d8461226d565b1691161438611a50565b60005260106020526040600020548015600014611ac25750600f602052604060002054151590600090565b600191565b6008546001600160a01b03918216911603611ae157600090565b60095490565b90611b7a91611af46114de565b50611afd6114de565b50600080526011602052611b3b7f4ad3b33220dddc71b994a52d72c06b10862965f7d926534c05c00fb7e819e7b780611b3584611f03565b91611cdd565b600d54909190602090611b5e906001600160a01b03165b6001600160a01b031690565b9260405180968192631b32595960e31b83523060048401611da4565b0381600080965af1938415610848578294611c38575b507f2580176791e43ed57455c2a9954e597ac3307125a59e1fd2d3c54cdeeb0693d760408392611bbe610f30565b818152846020820152848382015260608101978852611c1081611beb84600052600c602052604060002090565b9060606003918051845560208101516001850155604081015160028501550151910155565b8051611c2789516000526012602052604060002090565b5596519082519182526020820152a3565b829194506040611c7f7f2580176791e43ed57455c2a9954e597ac3307125a59e1fd2d3c54cdeeb0693d79260203d8111611c88575b611c778183610ef0565b810190611d95565b95925050611b90565b503d611c6d565b929190611c9a6114de565b507f2580176791e43ed57455c2a9954e597ac3307125a59e1fd2d3c54cdeeb0693d76040611cc9848488611dcf565b9560608701519082519182526020820152a3565b601190611d379493611d51610f3d94600d6040519889957f7b225f6c696c797061645f74656d706c617465223a20226e6674726f7574222c60208801526910113632b33a111d101160b11b6040880152604a8701906119c3565b6c111610113934b3b43a111d101160991b815201906119c3565b6e111610113a37b5b2b724b2111d101160891b8152611d7a825180936020600f850191016102f1565b0161227d60f01b600f82015203600e19810185520183610ef0565b9081602091031261027e575190565b9291611dca60409160009360018060a01b03168652606060208701526060860190610314565b930152565b929190600090611ddd6114de565b506020611e4a611e17611dfa846000526011602052604060002090565b611e0e876000526011602052604060002090565b611b358a611f03565b600d54611e2c906001600160a01b0316611b52565b90604051958680948193631b32595960e31b83523060048401611da4565b03925af191821561084857600092611eaf575b50611eac9192611e6b610f30565b918683526020830152604082015260608101928352611e9981611beb8197600052600c602052604060002090565b5191516000526012602052604060002090565b55565b611eac9250611ecb9060203d8111611c8857611c778183610ef0565b91611e5d565b90611edb82610f3f565b611ee86040519182610ef0565b8281528092611ef9601f1991610f3f565b0190602036910137565b806000917a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000080821015612038575b506d04ee2d6d415b85acef810000000080831015612029575b50662386f26fc100008083101561201a575b506305f5e1008083101561200b575b5061271080831015611ffc575b506064821015611fec575b600a80921015611fe2575b600190816021611f9a828701611ed1565b95860101905b611fac575b5050505090565b600019019083906f181899199a1a9b1b9c1cb0b131b232b360811b8282061a835304918215611fdd57919082611fa0565b611fa5565b9160010191611f89565b9190606460029104910191611f7e565b60049193920491019138611f73565b60089193920491019138611f66565b60109193920491019138611f57565b60209193920491019138611f45565b604093508104915038611f2c565b600182151715610c8e5760018060a01b03809116600052600b6020526040600020908154838101809111610c8e57909155600854166001600160a01b0316600052600b60205290565b9091808302908382041483151715610c8e5761271090049081830390838211610c8e576001600160a01b039081166000908152600b60205260409020805490928101908110610c8e57909155600854166001600160a01b03166000908152600b602052604090208054918201809211610c8e575590565b9060008054926040805161211981610ed5565b8381526001600160a01b038316600081815260056020908152604080832080546801000000000000000101905589835260049091529020600160e11b4260a01b831717905560018781019490917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef898289838180a483875b888103612223575050501561221357848655803b6121b2575b505050505050565b879180805b6121d3575b50505050505081540361042f5780808080806121aa565b15612206575b866121eb61123d8684870196866125d2565b6121f557816121b7565b85516368d2bf6b60e11b8152600490fd5b8583106121d957806121bc565b8351622e076360e81b8152600490fd5b80848b858180a4018490612191565b6001600160a01b0316801561225b5760005260056020526001600160401b036040600020541690565b6040516323d3ad8160e21b8152600490fd5b600081806001111561228c575b604051636f96cda160e11b8152600490fd5b815481101561227a5781526004906020918083526040928383205494600160e01b8616156122bc5750505061227a565b93929190935b85156122d057505050505090565b600019018083528185528383205495506122c2565b80600111159081612314575b816122fa575090565b90506000526004602052600160e01b604060002054161590565b600054811091506122f1565b9061232a8361226d565b6001600160a01b03838116928282168490036124dd5760008681526006602052604090208054909261236b6001600160a01b03881633908114908414171590565b612482575b8216958615612470576123c3936123a192612466575b506001600160a01b0316600090815260056020526040902090565b80546000190190556001600160a01b0316600090815260056020526040902090565b80546001019055600160e11b804260a01b8517176123eb866000526004602052604060002090565b5581161561241c575b507fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600080a4565b60018401612434816000526004602052604060002090565b5415612441575b506123f4565b600054811461243b5761245e906000526004602052604060002090565b55388061243b565b6000905538612386565b604051633a954ecd60e21b8152600490fd5b6124c661123d6124bf336124a88b60018060a01b03166000526007602052604060002090565b9060018060a01b0316600052602052604060002090565b5460ff1690565b1561237057604051632ce44b5f60e11b8152600490fd5b60405162a1148160e81b8152600490fd5b9291906124fc828286612320565b803b6125085750505050565b6125119361267b565b1561251f57388080806119e9565b6040516368d2bf6b60e11b8152600490fd5b9081602091031261027e575161034a8161026c565b61034a939260809260018060a01b031682526000602083015260408201528160608201520190610314565b6001600160a01b03918216815291166020820152604081019190915260806060820181905261034a92910190610314565b3d156125cd573d906125b382610f3f565b916125c16040519384610ef0565b82523d6000602084013e565b606090565b6125fb60209160009394604051948580948193630a85bd0160e11b998a84523360048501612546565b03926001600160a01b03165af16000918161264b575b5061263d5761261e6125a2565b80519081612638576040516368d2bf6b60e11b8152600490fd5b602001fd5b6001600160e01b0319161490565b61266d91925060203d8111612674575b6126658183610ef0565b810190612531565b9038612611565b503d61265b565b926020916125fb936000604051809681958294630a85bd0160e11b9a8b85523360048601612571565b6126ac6114de565b506126b56114de565b6001821080156126f7575b6126f257506126ce81612703565b60408101516126f257506126ed61034a916126e76114de565b5061226d565b61271e565b905090565b506000548210156126c0565b61270b6114de565b50600052600460205261034a6040600020545b906127276114de565b6001600160a01b038316815260a083901c6001600160401b03166020820152600160e01b83161515604082015260e89290921c6060830152565b61276a826118da565b916127786040519384610ef0565b808352601f19612787826118da565b0160005b8181106127da57505060005b8181036127a45750505090565b8181101561155057806127be60019260051b8501356126a4565b6127c8828761196f565b526127d3818661196f565b5001612797565b6020906127e56114de565b8282880101520161278b565b906127fb826118da565b6128086040519182610ef0565b8281528092611ef9601f19916118da565b908281101561295957600091825491600192838210612951575b808611612949575b5061284582612232565b918582101561294157818603838110612939575b505b612864836127f1565b958315612930578493612876846126a4565b91879460409361288b61123d86830151151590565b61291e575b50955b6128a4575b50505050505050815290565b8086141580612914575b1561290f5786866128bf8298612703565b8086015161290957516001600160a01b0390811680612901575b50808716908816146128ed575b0195612893565b806128fb838c019b8d61196f565b526128e6565b9750386128d9565b506128e6565b612898565b50818814156128ae565b516001600160a01b0316955038612890565b50505050505090565b925038612859565b84925061285b565b94503861283b565b839150612833565b604051631960ccad60e11b8152600490fdfea26469706673582212203a5c27e9c95ffd85b49c00f5a975dfe992a797f4bf2f60e1fe47b50a25b1eb1764736f6c63430008120033405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace",
  "deployedBytecode": "0x6080604052600436101561001257600080fd5b60003560e01c806301ffc9a71461026757806306fdde0314610262578063081812fc1461025d578063095ea7b3146102585780630b78f9c0146102535780630f7ee1ec1461024e5780631249c58b1461024957806313966db51461024457806318160ddd1461023f5780631e8f50f31461023a57806323b872dd146102355780633487823e146102305780633ccfd60b1461022b57806342842e0e1461022657806350fd736714610221578063543fd3131461021c5780635bbb2177146102175780636352211e1461021257806367dffc381461020d5780636caf25e61461020857806370a0823114610203578063715018a6146101fe5780638462151c146101f957806389e5ea3b146101f45780638da5cb5b146101ef57806395d89b41146101ea578063964bc33f146101e557806399a2557a146101e0578063a22cb465146101db578063b88d4fde146101d6578063c23dc68f146101d1578063c87b56dd146101cc578063d5040d65146101c7578063d6d7b3ec146101c2578063d9ecad7b146101bd578063e985e9c5146101b85763f2fde38b146101b357600080fd5b6113b9565b611351565b61121d565b611166565b6110b4565b611048565b610fe5565b610f5a565b610e0d565b610dd1565b610d63565b610cbc565b610c93565b610c3f565b610b87565b610aee565b610abf565b610a96565b610a4f565b610a20565b6109bb565b610900565b610879565b610856565b61080e565b610753565b610712565b6106c8565b6106a1565b610683565b6105f7565b6105a9565b610552565b610497565b610432565b61034d565b610283565b6001600160e01b031981160361027e57565b600080fd5b3461027e57602036600319011261027e5760206004356102a28161026c565b63ffffffff60e01b166301ffc9a760e01b81149081156102e0575b81156102cf575b506040519015158152f35b635b5e139f60e01b149050386102c4565b6380ac58cd60e01b811491506102bd565b60005b8381106103045750506000910152565b81810151838201526020016102f4565b9060209161032d815180928185528580860191016102f1565b601f01601f1916010190565b90602061034a928181520190610314565b90565b3461027e5760008060031936011261042f5760405190806002546103708161171b565b8085529160019180831690811561040557506001146103aa575b6103a68561039a81870382610ef0565b60405191829182610339565b0390f35b9250600283527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace5b8284106103ed57505050810160200161039a826103a661038a565b805460208587018101919091529093019281016103d2565b8695506103a69693506020925061039a94915060ff191682840152151560051b820101929361038a565b80fd5b3461027e57602036600319011261027e5760043561044f816122e5565b15610474576000526006602052602060018060a01b0360406000205416604051908152f35b6040516333d1c03960e21b8152600490fd5b6001600160a01b0381160361027e57565b604036600319011261027e576004356104af81610486565b6024356001600160a01b03806104c48361226d565b169081330361051f575b600083815260066020526040812080546001600160a01b0319166001600160a01b0387161790559316907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258480a480f35b600082815260076020908152604080832033845290915290205460ff166104ce576040516367d9dca160e11b8152600490fd5b3461027e57604036600319011261027e577f64f84976d9c917a44796104a59950fdbd9b3c16a5dd348b546d738301f6bd0686040600435602435610594611486565b8160095580600a5582519182526020820152a1005b3461027e57602036600319011261027e57600435600052600c602052608060406000208054906001810154906003600282015491015491604051938452602084015260408301526060820152f35b600036600319011261027e5761060b6114de565b5061062961061833611ac7565b6008546001600160a01b0316612046565b340361066957608061064261063d33612106565b611ae7565b60606040519180518352602081015160208401526040810151604084015201516060820152f35b602460095460405190638c4fcd9360e01b82526004820152fd5b3461027e57600036600319011261027e576020600954604051908152f35b3461027e57600036600319011261027e576000546001546040519103600019018152602090f35b3461027e57600036600319011261027e576020600a54604051908152f35b606090600319011261027e576004356106fe81610486565b9060243561070b81610486565b9060443590565b61072461071e366106e6565b91612320565b005b9181601f8401121561027e578235916001600160401b03831161027e576020838186019501011161027e57565b3461027e57606036600319011261027e5761076f600435610486565b6044356001600160401b03811161027e5761078e903690600401610726565b5050600d546001600160a01b031633036107fc5760006024358152601260205260408120548152600c6020526107f8604082206040516107cd81610eb5565b8154808252600183015491826020820152606060036002860154958660408501520154910152611dcf565b5080f35b6040516341460c0960e11b8152600490fd5b3461027e5760008060031936011261042f57338152600b6020528080808060408120818154915581811561084d575b3390f1156108485780f35b61170f565b506108fc61083d565b610724610862366106e6565b906040519261087084610ed5565b600084526124ee565b3461027e57604036600319011261027e576004356024356001600160a01b036108a18361226d565b1633036108ee5760207f1ea45e30b31292f9d7c5d37d275b2feca555f13f47dce0fdea2f47e8852ecd78918360005260108252806040600020556108e484611555565b50604051908152a2005b6040516330cd747160e01b8152600490fd5b3461027e57602036600319011261027e5760043561091d81610486565b60018060a01b0316600052600b6020526020604060002054604051908152f35b6020908160408183019282815285518094520193019160005b828110610964575050505090565b90919293826080826109af600194895162ffffff6060809260018060a01b0381511685526001600160401b036020820151166020860152604081015115156040860152015116910152565b01950193929101610956565b3461027e57602036600319011261027e576001600160401b0360043581811161027e573660238201121561027e57806004013591821161027e573660248360051b8301011161027e576103a6916024610a149201612761565b6040519182918261093d565b3461027e57602036600319011261027e5760206001600160a01b03610a4660043561226d565b16604051908152f35b3461027e57602036600319011261027e57600435610a6c81610486565b610a74611486565b600d80546001600160a01b0319166001600160a01b0392909216919091179055005b3461027e57600036600319011261027e57600d546040516001600160a01b039091168152602090f35b3461027e57602036600319011261027e576020610ae6600435610ae181610486565b612232565b604051908152f35b3461027e5760008060031936011261042f57610b08611486565b600880546001600160a01b0319811690915581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b6020908160408183019282815285518094520193019160005b828110610b73575050505090565b835185529381019392810192600101610b65565b3461027e57602036600319011261027e57600435610ba481610486565b60008091610bb181612232565b610bba816127f1565b92610bc36114de565b506001926001600160a01b0390811690845b848403610bea57604051806103a68982610b4c565b81610bf482612703565b876040820151610c365750511680610c2e575b50859083838a1614610c1a575b01610bd5565b80610c28838701968a61196f565b52610c14565b975085610c07565b92915050610c14565b3461027e57604036600319011261027e57610c5c60043533611a46565b610c6860243533611a46565b8101809111610c8e57610c7a33611ac7565b8101809111610c8e57602090604051908152f35b6115d1565b3461027e57600036600319011261027e576008546040516001600160a01b039091168152602090f35b3461027e5760008060031936011261042f576040519080600354610cdf8161171b565b808552916001918083169081156104055750600114610d08576103a68561039a81870382610ef0565b9250600383527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b5b828410610d4b57505050810160200161039a826103a661038a565b80546020858701810191909152909301928101610d30565b3461027e57602036600319011261027e576004356001600160a01b03610d888261226d565b1633036108ee576000908082526010602052816040812055610da981611650565b507fc40fdc946efe80191c467f60727c4abc08254a056035d467a4516a86005ab7638280a280f35b3461027e57606036600319011261027e576103a6610e01600435610df481610486565b6044359060243590612819565b60405191829182610b4c565b3461027e57604036600319011261027e57600435610e2a81610486565b6024359081151580920361027e573360009081526007602090815260408083206001600160a01b0385168452909152902060ff1981541660ff841617905560405191825260018060a01b0316907f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3160203392a3005b634e487b7160e01b600052604160045260246000fd5b608081019081106001600160401b03821117610ed057604052565b610e9f565b602081019081106001600160401b03821117610ed057604052565b90601f801991011681019081106001600160401b03821117610ed057604052565b60405190604082018281106001600160401b03821117610ed057604052565b60405190610f3d82610eb5565b565b6001600160401b038111610ed057601f01601f191660200190565b608036600319011261027e57600435610f7281610486565b602435610f7e81610486565b606435916001600160401b03831161027e573660238401121561027e57826004013591610faa83610f3f565b92610fb86040519485610ef0565b808452366024828701011161027e57602081600092602461072498018388013785010152604435916124ee565b3461027e57602036600319011261027e5760806110036004356126a4565b611046604051809262ffffff6060809260018060a01b0381511685526001600160401b036020820151166020860152604081015115156040860152015116910152565bf35b3461027e57602036600319011261027e5760043560005260116020526103a66110926110a0604060002060405192839166697066733a2f2f60c81b602084015260278301906119c3565b03601f198101835282610ef0565b604051918291602083526020830190610314565b3461027e57608036600319011261027e576110d0600435610486565b604435600481101561027e576064356001600160401b03811161027e576110fb903690600401610726565b600d549091906001600160a01b031633036107fc57610724926024356117a9565b60208082019080835283518092528060408094019401926000905b83821061114657505050505090565b845180518752830151868401529485019493820193600190910190611137565b3461027e57604036600319011261027e57600435602435600e5480831160001461121657805b828201808311610c8e5781101561120f576111a792506115e7565b6111b0816118f1565b9160005b8281106111c957604051806103a6868261111c565b806111df6111da61120a9385611702565b611983565b6111e7610f11565b91825260208201526111f9828761196f565b52611204818661196f565b50611960565b6111b4565b50506111a7565b829061118c565b60408060031936011261027e576004356024359161124161123d836122e5565b1590565b6113385761125161123d846122e5565b61132157828214611311576008546112ca9061127f906001600160a01b031661127933611ac7565b90612046565b6001600160a01b03906112af906112b590828461129b8961226d565b166112a68933611a46565b600a549161208f565b90611702565b916112bf8761226d565b166112a68733611a46565b3481036112f857506112e96103a6936112e233612106565b9384611c8f565b50519081529081906020820190565b9051638c4fcd9360e01b81526004810191909152602490fd5b51635693858360e01b8152600490fd5b516303ff20ff60e31b815260048101839052602490fd5b516303ff20ff60e31b8152600481019190915260249150fd5b3461027e57604036600319011261027e57602060ff6113ad60043561137581610486565b6024359061138282610486565b60018060a01b03166000526007845260406000209060018060a01b0316600052602052604060002090565b54166040519015158152f35b3461027e57602036600319011261027e576004356113d681610486565b6113de611486565b6001600160a01b0390811690811561143257600854826bffffffffffffffffffffffff60a01b821617600855167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3005b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b6008546001600160a01b0316330361149a57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b604051906114eb82610eb5565b60006060838281528260208201528260408201520152565b634e487b7160e01b600052603260045260246000fd5b600e5481101561155057600e6000527fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd0190600090565b611503565b80600052600f602052604060002054156000146115cb57600e5468010000000000000000811015610ed0576001810180600e558110156115505781907fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd0155600e5490600052600f602052604060002055600190565b50600090565b634e487b7160e01b600052601160045260246000fd5b91908203918211610c8e57565b600e54801561163a5760001981019080821015611550577fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fc600091600e83520155600e55565b634e487b7160e01b600052603160045260246000fd5b6000818152600f602052604090205480156116fb576000199181830191808311610c8e57600e54938401938411610c8e5783836116ab94600096036116b1575b50505061169b6115f4565b600052600f602052604060002090565b55600190565b61169b6116d9916116d16116c76116f295611519565b90549060031b1c90565b928391611519565b90919082549060031b91821b91600019901b1916179055565b55388080611690565b5050600090565b91908201809211610c8e57565b6040513d6000823e3d90fd5b90600182811c9216801561174b575b602083101461173557565b634e487b7160e01b600052602260045260246000fd5b91607f169161172a565b90601f811161176357505050565b600091825260208220906020601f850160051c8301941061179f575b601f0160051c01915b82811061179457505050565b818155600101611788565b909250829061177f565b9093929360048110156118c4576118be57600052602092601284526040600020546117d3816122e5565b156118b7576117ec906000526011602052604060002090565b916001600160401b038211610ed05761180f82611809855461171b565b85611755565b600094601f831160011461184c57509381929394600092611841575b50508160011b916000199060031b1c1916179055565b01359050388061182b565b90601f1983169561186285600052602060002090565b9281905b88821061189f57505083600195969710611885575b505050811b019055565b0135600019600384901b60f8161c1916905538808061187b565b80600184968294958701358155019501920190611866565b5050509050565b50509050565b634e487b7160e01b600052602160045260246000fd5b6001600160401b038111610ed05760051b60200190565b906118fb826118da565b604061190981519283610ef0565b838252819361191a601f19916118da565b01906000805b83811061192e575050505050565b825190838201918083106001600160401b03841117610ed0576020928552838152828481830152828801015201611920565b6000198114610c8e5760010190565b80518210156115505760209160051b010190565b600e54811015611550577fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd01549081600052601060205260406000205490565b6000929181546119d28161171b565b92600191808316908115611a2b57506001146119ef575b50505050565b90919293945060005260209081600020906000915b858310611a1a57505050500190388080806119e9565b805485840152918301918101611a04565b60ff19168452505050811515909102019150388080806119e9565b8115908115611a79575b506115cb57611a5e90611a97565b9015611a675790565b60405163665c1c5760e01b8152600490fd5b90506001600160a01b0380611a8d8461226d565b1691161438611a50565b60005260106020526040600020548015600014611ac25750600f602052604060002054151590600090565b600191565b6008546001600160a01b03918216911603611ae157600090565b60095490565b90611b7a91611af46114de565b50611afd6114de565b50600080526011602052611b3b7f4ad3b33220dddc71b994a52d72c06b10862965f7d926534c05c00fb7e819e7b780611b3584611f03565b91611cdd565b600d54909190602090611b5e906001600160a01b03165b6001600160a01b031690565b9260405180968192631b32595960e31b83523060048401611da4565b0381600080965af1938415610848578294611c38575b507f2580176791e43ed57455c2a9954e597ac3307125a59e1fd2d3c54cdeeb0693d760408392611bbe610f30565b818152846020820152848382015260608101978852611c1081611beb84600052600c602052604060002090565b9060606003918051845560208101516001850155604081015160028501550151910155565b8051611c2789516000526012602052604060002090565b5596519082519182526020820152a3565b829194506040611c7f7f2580176791e43ed57455c2a9954e597ac3307125a59e1fd2d3c54cdeeb0693d79260203d8111611c88575b611c778183610ef0565b810190611d95565b95925050611b90565b503d611c6d565b929190611c9a6114de565b507f2580176791e43ed57455c2a9954e597ac3307125a59e1fd2d3c54cdeeb0693d76040611cc9848488611dcf565b9560608701519082519182526020820152a3565b601190611d379493611d51610f3d94600d6040519889957f7b225f6c696c797061645f74656d706c617465223a20226e6674726f7574222c60208801526910113632b33a111d101160b11b6040880152604a8701906119c3565b6c111610113934b3b43a111d101160991b815201906119c3565b6e111610113a37b5b2b724b2111d101160891b8152611d7a825180936020600f850191016102f1565b0161227d60f01b600f82015203600e19810185520183610ef0565b9081602091031261027e575190565b9291611dca60409160009360018060a01b03168652606060208701526060860190610314565b930152565b929190600090611ddd6114de565b506020611e4a611e17611dfa846000526011602052604060002090565b611e0e876000526011602052604060002090565b611b358a611f03565b600d54611e2c906001600160a01b0316611b52565b90604051958680948193631b32595960e31b83523060048401611da4565b03925af191821561084857600092611eaf575b50611eac9192611e6b610f30565b918683526020830152604082015260608101928352611e9981611beb8197600052600c602052604060002090565b5191516000526012602052604060002090565b55565b611eac9250611ecb9060203d8111611c8857611c778183610ef0565b91611e5d565b90611edb82610f3f565b611ee86040519182610ef0565b8281528092611ef9601f1991610f3f565b0190602036910137565b806000917a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000080821015612038575b506d04ee2d6d415b85acef810000000080831015612029575b50662386f26fc100008083101561201a575b506305f5e1008083101561200b575b5061271080831015611ffc575b506064821015611fec575b600a80921015611fe2575b600190816021611f9a828701611ed1565b95860101905b611fac575b5050505090565b600019019083906f181899199a1a9b1b9c1cb0b131b232b360811b8282061a835304918215611fdd57919082611fa0565b611fa5565b9160010191611f89565b9190606460029104910191611f7e565b60049193920491019138611f73565b60089193920491019138611f66565b60109193920491019138611f57565b60209193920491019138611f45565b604093508104915038611f2c565b600182151715610c8e5760018060a01b03809116600052600b6020526040600020908154838101809111610c8e57909155600854166001600160a01b0316600052600b60205290565b9091808302908382041483151715610c8e5761271090049081830390838211610c8e576001600160a01b039081166000908152600b60205260409020805490928101908110610c8e57909155600854166001600160a01b03166000908152600b602052604090208054918201809211610c8e575590565b9060008054926040805161211981610ed5565b8381526001600160a01b038316600081815260056020908152604080832080546801000000000000000101905589835260049091529020600160e11b4260a01b831717905560018781019490917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef898289838180a483875b888103612223575050501561221357848655803b6121b2575b505050505050565b879180805b6121d3575b50505050505081540361042f5780808080806121aa565b15612206575b866121eb61123d8684870196866125d2565b6121f557816121b7565b85516368d2bf6b60e11b8152600490fd5b8583106121d957806121bc565b8351622e076360e81b8152600490fd5b80848b858180a4018490612191565b6001600160a01b0316801561225b5760005260056020526001600160401b036040600020541690565b6040516323d3ad8160e21b8152600490fd5b600081806001111561228c575b604051636f96cda160e11b8152600490fd5b815481101561227a5781526004906020918083526040928383205494600160e01b8616156122bc5750505061227a565b93929190935b85156122d057505050505090565b600019018083528185528383205495506122c2565b80600111159081612314575b816122fa575090565b90506000526004602052600160e01b604060002054161590565b600054811091506122f1565b9061232a8361226d565b6001600160a01b03838116928282168490036124dd5760008681526006602052604090208054909261236b6001600160a01b03881633908114908414171590565b612482575b8216958615612470576123c3936123a192612466575b506001600160a01b0316600090815260056020526040902090565b80546000190190556001600160a01b0316600090815260056020526040902090565b80546001019055600160e11b804260a01b8517176123eb866000526004602052604060002090565b5581161561241c575b507fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600080a4565b60018401612434816000526004602052604060002090565b5415612441575b506123f4565b600054811461243b5761245e906000526004602052604060002090565b55388061243b565b6000905538612386565b604051633a954ecd60e21b8152600490fd5b6124c661123d6124bf336124a88b60018060a01b03166000526007602052604060002090565b9060018060a01b0316600052602052604060002090565b5460ff1690565b1561237057604051632ce44b5f60e11b8152600490fd5b60405162a1148160e81b8152600490fd5b9291906124fc828286612320565b803b6125085750505050565b6125119361267b565b1561251f57388080806119e9565b6040516368d2bf6b60e11b8152600490fd5b9081602091031261027e575161034a8161026c565b61034a939260809260018060a01b031682526000602083015260408201528160608201520190610314565b6001600160a01b03918216815291166020820152604081019190915260806060820181905261034a92910190610314565b3d156125cd573d906125b382610f3f565b916125c16040519384610ef0565b82523d6000602084013e565b606090565b6125fb60209160009394604051948580948193630a85bd0160e11b998a84523360048501612546565b03926001600160a01b03165af16000918161264b575b5061263d5761261e6125a2565b80519081612638576040516368d2bf6b60e11b8152600490fd5b602001fd5b6001600160e01b0319161490565b61266d91925060203d8111612674575b6126658183610ef0565b810190612531565b9038612611565b503d61265b565b926020916125fb936000604051809681958294630a85bd0160e11b9a8b85523360048601612571565b6126ac6114de565b506126b56114de565b6001821080156126f7575b6126f257506126ce81612703565b60408101516126f257506126ed61034a916126e76114de565b5061226d565b61271e565b905090565b506000548210156126c0565b61270b6114de565b50600052600460205261034a6040600020545b906127276114de565b6001600160a01b038316815260a083901c6001600160401b03166020820152600160e01b83161515604082015260e89290921c6060830152565b61276a826118da565b916127786040519384610ef0565b808352601f19612787826118da565b0160005b8181106127da57505060005b8181036127a45750505090565b8181101561155057806127be60019260051b8501356126a4565b6127c8828761196f565b526127d3818661196f565b5001612797565b6020906127e56114de565b8282880101520161278b565b906127fb826118da565b6128086040519182610ef0565b8281528092611ef9601f19916118da565b908281101561295957600091825491600192838210612951575b808611612949575b5061284582612232565b918582101561294157818603838110612939575b505b612864836127f1565b958315612930578493612876846126a4565b91879460409361288b61123d86830151151590565b61291e575b50955b6128a4575b50505050505050815290565b8086141580612914575b1561290f5786866128bf8298612703565b8086015161290957516001600160a01b0390811680612901575b50808716908816146128ed575b0195612893565b806128fb838c019b8d61196f565b526128e6565b9750386128d9565b506128e6565b612898565b50818814156128ae565b516001600160a01b0316955038612890565b50505050505090565b925038612859565b84925061285b565b94503861283b565b839150612833565b604051631960ccad60e11b8152600490fdfea26469706673582212203a5c27e9c95ffd85b49c00f5a975dfe992a797f4bf2f60e1fe47b50a25b1eb1764736f6c63430008120033",
  "devdoc": {
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
      },
      "ApprovalForAll(address,address,bool)": {
        "details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
      },
      "ConsecutiveTransfer(uint256,uint256,address,address)": {
        "details": "Emitted when tokens in `fromTokenId` to `toTokenId` (inclusive) is transferred from `from` to `to`, as defined in the [ERC2309](https://eips.ethereum.org/EIPS/eip-2309) standard. See {_mintERC2309} for more details."
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `tokenId` token is transferred from `from` to `to`."
      }
    },
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
      },
      "balanceOf(address)": {
        "details": "Returns the number of tokens in `owner`'s account."
      },
      "explicitOwnershipOf(uint256)": {
        "details": "Returns the `TokenOwnership` struct at `tokenId` without reverting. If the `tokenId` is out of bounds: - `addr = address(0)` - `startTimestamp = 0` - `burned = false` - `extraData = 0` If the `tokenId` is burned: - `addr = <Address of owner before token was burned>` - `startTimestamp = <Timestamp when token was burned>` - `burned = true` - `extraData = <Extra data when token was burned>` Otherwise: - `addr = <Address of owner>` - `startTimestamp = <Timestamp of start of ownership>` - `burned = false` - `extraData = <Extra data at start of ownership>`"
      },
      "explicitOwnershipsOf(uint256[])": {
        "details": "Returns an array of `TokenOwnership` structs at `tokenIds` in order. See {ERC721AQueryable-explicitOwnershipOf}"
      },
      "getApproved(uint256)": {
        "details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
      },
      "isApprovedForAll(address,address)": {
        "details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}."
      },
      "name()": {
        "details": "Returns the token collection name."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "Equivalent to `safeTransferFrom(from, to, tokenId, '')`."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
      },
      "setApprovalForAll(address,bool)": {
        "details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified) to learn more about how these ids are created. This function call must use less than 30000 gas."
      },
      "symbol()": {
        "details": "Returns the token collection symbol."
      },
      "tokensOfOwner(address)": {
        "details": "Returns an array of token IDs owned by `owner`. This function scans the ownership mapping and is O(`totalSupply`) in complexity. It is meant to be called off-chain. See {ERC721AQueryable-tokensOfOwnerIn} for splitting the scan into multiple smaller scans if the collection is large enough to cause an out-of-gas error (10K collections should be fine)."
      },
      "tokensOfOwnerIn(address,uint256,uint256)": {
        "details": "Returns an array of token IDs owned by `owner`, in the range [`start`, `stop`) (i.e. `start <= tokenId < stop`). This function allows for tokens to be queried if the collection grows too big for a single call of {ERC721AQueryable-tokensOfOwner}. Requirements: - `start < stop`"
      },
      "totalSupply()": {
        "details": "Returns the total number of tokens in existence. Burned tokens will reduce the count. To get the total number of tokens minted, please see {_totalMinted}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "Transfers `tokenId` from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "ApprovalCallerNotOwnerNorApproved()": [
        {
          "notice": "The caller must own the token or be an approved operator."
        }
      ],
      "ApprovalQueryForNonexistentToken()": [
        {
          "notice": "The token does not exist."
        }
      ],
      "BalanceQueryForZeroAddress()": [
        {
          "notice": "Cannot query the balance for the zero address."
        }
      ],
      "CannotSelfBreed()": [
        {
          "notice": "A trout cannot breed with itself."
        }
      ],
      "InvalidQueryRange()": [
        {
          "notice": "Invalid query range (`start` >= `stop`)."
        }
      ],
      "MintERC2309QuantityExceedsLimit()": [
        {
          "notice": "The `quantity` minted with ERC2309 exceeds the safety limit."
        }
      ],
      "MintToZeroAddress()": [
        {
          "notice": "Cannot mint to the zero address."
        }
      ],
      "MintZeroQuantity()": [
        {
          "notice": "The quantity of tokens minted must be more than zero."
        }
      ],
      "NoSuchToken(uint256)": [
        {
          "notice": "The token does not exist;"
        }
      ],
      "NotLilypad()": [
        {
          "notice": "The caller must be lilypad."
        }
      ],
      "NotListed()": [
        {
          "notice": "One of the trout you tried to breed is neither owned by you nor listed for public breeding."
        }
      ],
      "NotOwner()": [
        {
          "notice": "You are not the owner of the trout;"
        }
      ],
      "OwnerQueryForNonexistentToken()": [
        {
          "notice": "The token does not exist."
        }
      ],
      "OwnershipNotInitializedForExtraData()": [
        {
          "notice": "The `extraData` cannot be set on an unintialized ownership slot."
        }
      ],
      "PaymentRequired(uint256)": [
        {
          "notice": "Not enough value was sent."
        }
      ],
      "TransferCallerNotOwnerNorApproved()": [
        {
          "notice": "The caller must own the token or be an approved operator."
        }
      ],
      "TransferFromIncorrectOwner()": [
        {
          "notice": "The token must be owned by `from`."
        }
      ],
      "TransferToNonERC721ReceiverImplementer()": [
        {
          "notice": "Cannot safely transfer to a contract that does not implement the ERC721Receiver interface."
        }
      ],
      "TransferToZeroAddress()": [
        {
          "notice": "Cannot transfer to the zero address."
        }
      ],
      "URIQueryForNonexistentToken()": [
        {
          "notice": "The token does not exist."
        }
      ]
    },
    "events": {
      "Delisted(uint256)": {
        "notice": "The trout is no longer breedable."
      },
      "Listed(uint256,uint256)": {
        "notice": "The trout was listed as breedable."
      },
      "Spawned(uint256,uint256,uint256,uint256)": {
        "notice": "Two trouts have bred to produce a new trout."
      }
    },
    "kind": "user",
    "methods": {
      "breed(uint256,uint256)": {
        "notice": "Breeds any two trout to produce a third trout that will be owned by the caller. This method must be called with enough value to pay for the two trouts' fees and the minting fee."
      },
      "delist(uint256)": {
        "notice": "Makes a trout not breedable."
      },
      "getBreedingFee(uint256,uint256)": {
        "notice": "Returns the number of tokens that must be paid to breed the two trout. This is also the minting fee when the parents are unset."
      },
      "getStuds(uint256,uint256)": {
        "notice": "Paginated list of trout listed for breeding."
      },
      "list(uint256,uint256)": {
        "notice": "Makes a trout breedable."
      },
      "mint()": {
        "notice": "Transmutes money into trout."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4460,
        "contract": "contracts/NFTrout.sol:NFTrout",
        "label": "_currentIndex",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 4462,
        "contract": "contracts/NFTrout.sol:NFTrout",
        "label": "_burnCounter",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 4464,
        "contract": "contracts/NFTrout.sol:NFTrout",
        "label": "_name",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 4466,
        "contract": "contracts/NFTrout.sol:NFTrout",
        "label": "_symbol",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 4470,
        "contract": "contracts/NFTrout.sol:NFTrout",
        "label": "_packedOwnerships",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 4474,
        "contract": "contracts/NFTrout.sol:NFTrout",
        "label": "_packedAddressData",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4479,
        "contract": "contracts/NFTrout.sol:NFTrout",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_struct(TokenApprovalRef)4392_storage)"
      },
      {
        "astId": 4485,
        "contract": "contracts/NFTrout.sol:NFTrout",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 7,
        "contract": "contracts/NFTrout.sol:NFTrout",
        "label": "_owner",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 3097,
        "contract": "contracts/NFTrout.sol:NFTrout",
        "label": "mintFee",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 3099,
        "contract": "contracts/NFTrout.sol:NFTrout",
        "label": "matchmakingBps",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 3103,
        "contract": "contracts/NFTrout.sol:NFTrout",
        "label": "earnings",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3109,
        "contract": "contracts/NFTrout.sol:NFTrout",
        "label": "receipts",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_userDefinedValueType(TokenId)3006,t_struct(Receipt)3089_storage)"
      },
      {
        "astId": 3112,
        "contract": "contracts/NFTrout.sol:NFTrout",
        "label": "lilypadEvents",
        "offset": 0,
        "slot": "13",
        "type": "t_contract(LilypadEvents)4368"
      },
      {
        "astId": 3116,
        "contract": "contracts/NFTrout.sol:NFTrout",
        "label": "studs",
        "offset": 0,
        "slot": "14",
        "type": "t_struct(UintToUintMap)1494_storage"
      },
      {
        "astId": 3121,
        "contract": "contracts/NFTrout.sol:NFTrout",
        "label": "tokenCids",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_userDefinedValueType(TokenId)3006,t_string_storage)"
      },
      {
        "astId": 3127,
        "contract": "contracts/NFTrout.sol:NFTrout",
        "label": "tokensByJob",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_userDefinedValueType(JobId)3004,t_userDefinedValueType(TokenId)3006)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(LilypadEvents)4368": {
        "encoding": "inplace",
        "label": "contract LilypadEvents",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(TokenApprovalRef)4392_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ERC721A.TokenApprovalRef)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenApprovalRef)4392_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_userDefinedValueType(JobId)3004,t_userDefinedValueType(TokenId)3006)": {
        "encoding": "mapping",
        "key": "t_userDefinedValueType(JobId)3004",
        "label": "mapping(JobId => TokenId)",
        "numberOfBytes": "32",
        "value": "t_userDefinedValueType(TokenId)3006"
      },
      "t_mapping(t_userDefinedValueType(TokenId)3006,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_userDefinedValueType(TokenId)3006",
        "label": "mapping(TokenId => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_userDefinedValueType(TokenId)3006,t_struct(Receipt)3089_storage)": {
        "encoding": "mapping",
        "key": "t_userDefinedValueType(TokenId)3006",
        "label": "mapping(TokenId => struct NFTrout.Receipt)",
        "numberOfBytes": "32",
        "value": "t_struct(Receipt)3089_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Bytes32Set)2575_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Bytes32Set",
        "members": [
          {
            "astId": 2574,
            "contract": "contracts/NFTrout.sol:NFTrout",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)2381_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Bytes32ToBytes32Map)1264_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableMap.Bytes32ToBytes32Map",
        "members": [
          {
            "astId": 1259,
            "contract": "contracts/NFTrout.sol:NFTrout",
            "label": "_keys",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Bytes32Set)2575_storage"
          },
          {
            "astId": 1263,
            "contract": "contracts/NFTrout.sol:NFTrout",
            "label": "_values",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_bytes32,t_bytes32)"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Receipt)3089_storage": {
        "encoding": "inplace",
        "label": "struct NFTrout.Receipt",
        "members": [
          {
            "astId": 3079,
            "contract": "contracts/NFTrout.sol:NFTrout",
            "label": "tokenId",
            "offset": 0,
            "slot": "0",
            "type": "t_userDefinedValueType(TokenId)3006"
          },
          {
            "astId": 3082,
            "contract": "contracts/NFTrout.sol:NFTrout",
            "label": "left",
            "offset": 0,
            "slot": "1",
            "type": "t_userDefinedValueType(TokenId)3006"
          },
          {
            "astId": 3085,
            "contract": "contracts/NFTrout.sol:NFTrout",
            "label": "right",
            "offset": 0,
            "slot": "2",
            "type": "t_userDefinedValueType(TokenId)3006"
          },
          {
            "astId": 3088,
            "contract": "contracts/NFTrout.sol:NFTrout",
            "label": "jobId",
            "offset": 0,
            "slot": "3",
            "type": "t_userDefinedValueType(JobId)3004"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Set)2381_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 2376,
            "contract": "contracts/NFTrout.sol:NFTrout",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 2380,
            "contract": "contracts/NFTrout.sol:NFTrout",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(TokenApprovalRef)4392_storage": {
        "encoding": "inplace",
        "label": "struct ERC721A.TokenApprovalRef",
        "members": [
          {
            "astId": 4391,
            "contract": "contracts/NFTrout.sol:NFTrout",
            "label": "value",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(UintToUintMap)1494_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableMap.UintToUintMap",
        "members": [
          {
            "astId": 1493,
            "contract": "contracts/NFTrout.sol:NFTrout",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Bytes32ToBytes32Map)1264_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_userDefinedValueType(JobId)3004": {
        "encoding": "inplace",
        "label": "JobId",
        "numberOfBytes": "32"
      },
      "t_userDefinedValueType(TokenId)3006": {
        "encoding": "inplace",
        "label": "TokenId",
        "numberOfBytes": "32"
      }
    }
  }
}